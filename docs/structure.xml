<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a11" title="">
  <file path="API.php" hash="6d07028d5b858ee45e5c2eebe90e84b5" package="Default">
    <include line="2" type="Include Once" package="Default">
      <name>FreeriderAPI.php</name>
    </include>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file API.php</error>
    </parse_markers>
  </file>
  <file path="Freerider.php" hash="f64d3226a0e0ae383e091690167871db" package="Default">
    <class final="false" abstract="false" namespace="global" line="9" package="Default">
      <extends/>
      <name>Freerider</name>
      <full_name>\Freerider</full_name>
      <docblock line="2">
        <description>Created by JetBrains PhpStorm.</description>
        <long-description>&lt;p&gt;User: HansBentlov
Date: 2012-11-19
Time: 12:03
To change this template use File | Settings | File Templates.&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="11" namespace="global" package="Default">
        <name>$destination</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="public" line="12" namespace="global" package="Default">
        <name>$origin</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="public" line="13" namespace="global" package="Default">
        <name>$startDate</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="public" line="14" namespace="global" package="Default">
        <name>$endDate</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="public" line="15" namespace="global" package="Default">
        <name>$carModel</name>
        <default>null</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="17" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="17">
          <name>$origin</name>
          <default></default>
          <type/>
        </argument>
        <argument line="17">
          <name>$destination</name>
          <default></default>
          <type/>
        </argument>
        <argument line="17">
          <name>$startDate</name>
          <default></default>
          <type/>
        </argument>
        <argument line="17">
          <name>$endDate</name>
          <default></default>
          <type/>
        </argument>
        <argument line="17">
          <name>$carModel</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Freerider.php</error>
      <error line="11" code="50018">No DocBlock was found for property $destination</error>
      <error line="12" code="50018">No DocBlock was found for property $origin</error>
      <error line="13" code="50018">No DocBlock was found for property $startDate</error>
      <error line="14" code="50018">No DocBlock was found for property $endDate</error>
      <error line="15" code="50018">No DocBlock was found for property $carModel</error>
      <error line="17" code="50010">No DocBlock was found for method __construct()</error>
    </parse_markers>
  </file>
  <file path="FreeriderAPI.php" hash="4dc1d83b39d16525ea0e3052a7078e3c" package="Default">
    <include line="2" type="Include Once" package="Default">
      <name>helper/simple_html_dom.php</name>
    </include>
    <include line="3" type="Include Once" package="Default">
      <name>Freerider.php</name>
    </include>
    <class final="false" abstract="false" namespace="global" line="9" package="Default">
      <extends/>
      <name>FreeriderAPI</name>
      <full_name>\FreeriderAPI</full_name>
      <docblock line="4">
        <description>PHP-API for fetching available Hertz Freerider travels.</description>
        <long-description></long-description>
        <tag line="4" name="author" description="Hans BentlÃ¶v &lt;hb222ap@student.lnu.se&gt;"/>
        <tag line="4" name="todo" description="Refactoring, renaming variables"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="12" namespace="global" package="Default">
        <name>$url</name>
        <default>"http://hertzfreerider.se/unauth/list_transport_offer.aspx"</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="18" package="Default">
        <name>GetAll</name>
        <full_name>GetAll</full_name>
        <docblock line="14">
          <description>Returns all available Freerider rentals</description>
          <long-description></long-description>
          <tag line="14" name="return" description="Array containing Freerider-objects or empty array if none available" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="40" package="Default">
        <name>getDestination</name>
        <full_name>getDestination</full_name>
        <docblock line="35">
          <description>Returns available Freerider rentals based on a destination search query</description>
          <long-description></long-description>
          <tag line="35" name="param" description="" type="\global\" variable="$destination"/>
          <tag line="35" name="return" description="Array containing Freerider-objects or empty array if none available" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$query</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="64" package="Default">
        <name>getOrigin</name>
        <full_name>getOrigin</full_name>
        <docblock line="59">
          <description>Returns available Freerider rentals based on a origin search query</description>
          <long-description></long-description>
          <tag line="59" name="param" description="" type="\global\" variable="$origin"/>
          <tag line="59" name="return" description="Array containing Freerider-objects or empty array if none available" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$query</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file FreeriderAPI.php</error>
      <error line="12" code="50018">No DocBlock was found for property $url</error>
      <error line="35" code="50014">Name of argument $query does not match with the DocBlock's name $destination in getDestination()</error>
      <notice line="35" code="50013">Parameter $destination could not be found in getDestination()</notice>
      <error line="59" code="50014">Name of argument $query does not match with the DocBlock's name $origin in getOrigin()</error>
      <notice line="59" code="50013">Parameter $origin could not be found in getOrigin()</notice>
    </parse_markers>
  </file>
  <file path="helper/simple_html_dom.php" hash="0f499337c220cbb6f9f425cd5994707f" package="PlaceLocalInclude\simple\html\dom">
    <docblock line="2">
      <description>Website: http://sourceforge.net/projects/simplehtmldom/
Additional projects that may be used: http://sourceforge.net/projects/debugobject/
Acknowledge: Jose Solorzano (https://sourceforge.net/projects/php-html/)
Contributions by:
 Yousuke Kumakura (Attribute filters)
 Vadim Voituk (Negative indexes supports of "find" method)
 Antcs (Constructor with automatically load contents either text or file/url)</description>
      <long-description>&lt;p&gt;all affected sections have comments starting with "PaperG"&lt;/p&gt;

&lt;p&gt;Paperg - Added case insensitive testing of the value of the selector.
Paperg - Added tag_start for the starting index of tags - NOTE: This works but not accurately.
 This tag_start gets counted AFTER \r\n have been crushed out, and after the remove_noice calls so it will not reflect the REAL position of the tag in the source,
 it will almost always be smaller by some amount.
 We use this to determine how far into the file the tag in question is.  This "percentage will never be accurate as the $dom-&gt;size is the "real" number of bytes the dom was created from.
 but for most purposes, it's a really good estimation.
Paperg - Added the forceTagsClosed to the dom constructor.  Forcing tags closed is great for malformed html, but it CAN lead to parsing errors.
Allow the user to tell us how much they trust the html.
Paperg add the text and plaintext to the selectors for the find syntax.  plaintext implies text in the innertext of a node.  text implies that the tag is a text node.
This allows for us to find tags based on the text they contain.
Create find_ancestor_tag to see if a tag is - at any level - inside of another specific tag.
Paperg: added parse_charset so that we know about the character set of the source document.
 NOTE:  If the user's system has a routine called get_last_retrieve_url_contents_content_type availalbe, we will assume it's returning the content-type header from the
 last transfer or curl_exec, and we will parse that and use it in preference to any other method of charset detection.&lt;/p&gt;

&lt;p&gt;Found infinite loop in the case of broken html in restore_noise.  Rewrote to protect from that.
PaperG (John Schlick) Added get_display_size for "IMG" tags.&lt;/p&gt;

&lt;p&gt;Licensed under The MIT License
Redistributions of files must retain the above copyright notice.&lt;/p&gt;</long-description>
      <tag line="2" name="author" description="S.C. Chen &lt;me578022@gmail.com&gt;"/>
      <tag line="2" name="author" description="John Schlick"/>
      <tag line="2" name="author" description="Rus Carroll"/>
      <tag line="2" name="version" description="1.5 ($Rev: 202 $)"/>
      <tag line="2" name="package" description="PlaceLocalInclude"/>
      <tag line="2" name="subpackage" description="simple_html_dom"/>
    </docblock>
    <constant namespace="global" line="46" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_TYPE_ELEMENT</name>
      <full_name>\HDOM_TYPE_ELEMENT</full_name>
      <value>1</value>
      <docblock line="42">
        <description>All of the Defines for the classes below.</description>
        <long-description></long-description>
        <tag line="42" name="author" description="S.C. Chen &lt;me578022@gmail.com&gt;"/>
      </docblock>
    </constant>
    <constant namespace="global" line="47" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_TYPE_COMMENT</name>
      <full_name>\HDOM_TYPE_COMMENT</full_name>
      <value>2</value>
    </constant>
    <constant namespace="global" line="48" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_TYPE_TEXT</name>
      <full_name>\HDOM_TYPE_TEXT</full_name>
      <value>3</value>
    </constant>
    <constant namespace="global" line="49" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_TYPE_ENDTAG</name>
      <full_name>\HDOM_TYPE_ENDTAG</full_name>
      <value>4</value>
    </constant>
    <constant namespace="global" line="50" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_TYPE_ROOT</name>
      <full_name>\HDOM_TYPE_ROOT</full_name>
      <value>5</value>
    </constant>
    <constant namespace="global" line="51" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_TYPE_UNKNOWN</name>
      <full_name>\HDOM_TYPE_UNKNOWN</full_name>
      <value>6</value>
    </constant>
    <constant namespace="global" line="52" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_QUOTE_DOUBLE</name>
      <full_name>\HDOM_QUOTE_DOUBLE</full_name>
      <value>0</value>
    </constant>
    <constant namespace="global" line="53" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_QUOTE_SINGLE</name>
      <full_name>\HDOM_QUOTE_SINGLE</full_name>
      <value>1</value>
    </constant>
    <constant namespace="global" line="54" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_QUOTE_NO</name>
      <full_name>\HDOM_QUOTE_NO</full_name>
      <value>3</value>
    </constant>
    <constant namespace="global" line="55" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_INFO_BEGIN</name>
      <full_name>\HDOM_INFO_BEGIN</full_name>
      <value>0</value>
    </constant>
    <constant namespace="global" line="56" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_INFO_END</name>
      <full_name>\HDOM_INFO_END</full_name>
      <value>1</value>
    </constant>
    <constant namespace="global" line="57" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_INFO_QUOTE</name>
      <full_name>\HDOM_INFO_QUOTE</full_name>
      <value>2</value>
    </constant>
    <constant namespace="global" line="58" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_INFO_SPACE</name>
      <full_name>\HDOM_INFO_SPACE</full_name>
      <value>3</value>
    </constant>
    <constant namespace="global" line="59" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_INFO_TEXT</name>
      <full_name>\HDOM_INFO_TEXT</full_name>
      <value>4</value>
    </constant>
    <constant namespace="global" line="60" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_INFO_INNER</name>
      <full_name>\HDOM_INFO_INNER</full_name>
      <value>5</value>
    </constant>
    <constant namespace="global" line="61" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_INFO_OUTER</name>
      <full_name>\HDOM_INFO_OUTER</full_name>
      <value>6</value>
    </constant>
    <constant namespace="global" line="62" package="PlaceLocalInclude\simple\html\dom">
      <name>HDOM_INFO_ENDSPACE</name>
      <full_name>\HDOM_INFO_ENDSPACE</full_name>
      <value>7</value>
    </constant>
    <constant namespace="global" line="63" package="PlaceLocalInclude\simple\html\dom">
      <name>DEFAULT_TARGET_CHARSET</name>
      <full_name>\DEFAULT_TARGET_CHARSET</full_name>
      <value></value>
    </constant>
    <constant namespace="global" line="64" package="PlaceLocalInclude\simple\html\dom">
      <name>DEFAULT_BR_TEXT</name>
      <full_name>\DEFAULT_BR_TEXT</full_name>
      <value></value>
    </constant>
    <constant namespace="global" line="65" package="PlaceLocalInclude\simple\html\dom">
      <name>DEFAULT_SPAN_TEXT</name>
      <full_name>\DEFAULT_SPAN_TEXT</full_name>
      <value></value>
    </constant>
    <constant namespace="global" line="66" package="PlaceLocalInclude\simple\html\dom">
      <name>MAX_FILE_SIZE</name>
      <full_name>\MAX_FILE_SIZE</full_name>
      <value>600000</value>
    </constant>
    <function namespace="global" line="71" package="PlaceLocalInclude\simple\html\dom">
      <name>file_get_html</name>
      <full_name>\file_get_html</full_name>
      <argument line="71">
        <name>$url</name>
        <default></default>
        <type/>
      </argument>
      <argument line="71">
        <name>$use_include_path</name>
        <default>false</default>
        <type/>
      </argument>
      <argument line="71">
        <name>$context</name>
        <default>null</default>
        <type/>
      </argument>
      <argument line="71">
        <name>$offset</name>
        <default>-1</default>
        <type/>
      </argument>
      <argument line="71">
        <name>$maxLen</name>
        <default>-1</default>
        <type/>
      </argument>
      <argument line="71">
        <name>$lowercase</name>
        <default>true</default>
        <type/>
      </argument>
      <argument line="71">
        <name>$forceTagsClosed</name>
        <default>true</default>
        <type/>
      </argument>
      <argument line="71">
        <name>$target_charset</name>
        <default>DEFAULT_TARGET_CHARSET</default>
        <type/>
      </argument>
      <argument line="71">
        <name>$stripRN</name>
        <default>true</default>
        <type/>
      </argument>
      <argument line="71">
        <name>$defaultBRText</name>
        <default>DEFAULT_BR_TEXT</default>
        <type/>
      </argument>
      <argument line="71">
        <name>$defaultSpanText</name>
        <default>DEFAULT_SPAN_TEXT</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="89" package="PlaceLocalInclude\simple\html\dom">
      <name>str_get_html</name>
      <full_name>\str_get_html</full_name>
      <argument line="89">
        <name>$str</name>
        <default></default>
        <type/>
      </argument>
      <argument line="89">
        <name>$lowercase</name>
        <default>true</default>
        <type/>
      </argument>
      <argument line="89">
        <name>$forceTagsClosed</name>
        <default>true</default>
        <type/>
      </argument>
      <argument line="89">
        <name>$target_charset</name>
        <default>DEFAULT_TARGET_CHARSET</default>
        <type/>
      </argument>
      <argument line="89">
        <name>$stripRN</name>
        <default>true</default>
        <type/>
      </argument>
      <argument line="89">
        <name>$defaultBRText</name>
        <default>DEFAULT_BR_TEXT</default>
        <type/>
      </argument>
      <argument line="89">
        <name>$defaultSpanText</name>
        <default>DEFAULT_SPAN_TEXT</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="102" package="PlaceLocalInclude\simple\html\dom">
      <name>dump_html_tree</name>
      <full_name>\dump_html_tree</full_name>
      <argument line="102">
        <name>$node</name>
        <default></default>
        <type/>
      </argument>
      <argument line="102">
        <name>$show_attr</name>
        <default>true</default>
        <type/>
      </argument>
      <argument line="102">
        <name>$deep</name>
        <default>0</default>
        <type/>
      </argument>
    </function>
    <class final="false" abstract="false" namespace="global" line="115" package="PlaceLocalInclude">
      <extends/>
      <name>simple_html_dom_node</name>
      <full_name>\simple_html_dom_node</full_name>
      <docblock line="108">
        <description>simple html dom node
PaperG - added ability for "find" routine to lowercase the value of the selector.</description>
        <long-description>&lt;p&gt;PaperG - added $tag_start to track the start position of the tag in the total byte index&lt;/p&gt;</long-description>
        <tag line="108" name="package" description="PlaceLocalInclude"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="117" namespace="global" package="Default">
        <name>$nodetype</name>
        <default>HDOM_TYPE_TEXT</default>
      </property>
      <property final="false" static="false" visibility="public" line="118" namespace="global" package="Default">
        <name>$tag</name>
        <default>'text'</default>
      </property>
      <property final="false" static="false" visibility="public" line="119" namespace="global" package="Default">
        <name>$attr</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="120" namespace="global" package="Default">
        <name>$children</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="121" namespace="global" package="Default">
        <name>$nodes</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="122" namespace="global" package="Default">
        <name>$parent</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="public" line="124" namespace="global" package="Default">
        <name>$_</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="125" namespace="global" package="Default">
        <name>$tag_start</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="private" line="126" namespace="global" package="Default">
        <name>$dom</name>
        <default>null</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="128" package="PlaceLocalInclude">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="128">
          <name>$dom</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="134" package="PlaceLocalInclude">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="PlaceLocalInclude">
        <name>__toString</name>
        <full_name>__toString</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="145" package="PlaceLocalInclude">
        <name>clear</name>
        <full_name>clear</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="PlaceLocalInclude">
        <name>dump</name>
        <full_name>dump</full_name>
        <argument line="154">
          <name>$show_attr</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="154">
          <name>$deep</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="179" package="PlaceLocalInclude">
        <name>dump_node</name>
        <full_name>dump_node</full_name>
        <argument line="179">
          <name>$echo</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="245" package="PlaceLocalInclude">
        <name>parent</name>
        <full_name>parent</full_name>
        <argument line="245">
          <name>$parent</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="260" package="PlaceLocalInclude">
        <name>has_child</name>
        <full_name>has_child</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="266" package="PlaceLocalInclude">
        <name>children</name>
        <full_name>children</full_name>
        <argument line="266">
          <name>$idx</name>
          <default>-1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="277" package="PlaceLocalInclude">
        <name>first_child</name>
        <full_name>first_child</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="287" package="PlaceLocalInclude">
        <name>last_child</name>
        <full_name>last_child</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="297" package="PlaceLocalInclude">
        <name>next_sibling</name>
        <full_name>next_sibling</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="318" package="PlaceLocalInclude">
        <name>prev_sibling</name>
        <full_name>prev_sibling</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="330" package="PlaceLocalInclude">
        <name>find_ancestor_tag</name>
        <full_name>find_ancestor_tag</full_name>
        <argument line="330">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="352" package="PlaceLocalInclude">
        <name>innertext</name>
        <full_name>innertext</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="364" package="PlaceLocalInclude">
        <name>outertext</name>
        <full_name>outertext</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="424" package="PlaceLocalInclude">
        <name>text</name>
        <full_name>text</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="458" package="PlaceLocalInclude">
        <name>xmltext</name>
        <full_name>xmltext</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="467" package="PlaceLocalInclude">
        <name>makeup</name>
        <full_name>makeup</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="503" package="PlaceLocalInclude">
        <name>find</name>
        <full_name>find</full_name>
        <argument line="503">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
        <argument line="503">
          <name>$idx</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="503">
          <name>$lowercase</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="554" package="PlaceLocalInclude">
        <name>seek</name>
        <full_name>seek</full_name>
        <argument line="554">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
        <argument line="554">
          <name>$ret</name>
          <default></default>
          <type/>
        </argument>
        <argument line="554">
          <name>$lowercase</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="651" package="PlaceLocalInclude">
        <name>match</name>
        <full_name>match</full_name>
        <argument line="651">
          <name>$exp</name>
          <default></default>
          <type/>
        </argument>
        <argument line="651">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="651">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="673" package="PlaceLocalInclude">
        <name>parse_selector</name>
        <full_name>parse_selector</full_name>
        <argument line="673">
          <name>$selector_string</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="721" package="PlaceLocalInclude">
        <name>__get</name>
        <full_name>__get</full_name>
        <argument line="721">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="735" package="PlaceLocalInclude">
        <name>__set</name>
        <full_name>__set</full_name>
        <argument line="735">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="735">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="749" package="PlaceLocalInclude">
        <name>__isset</name>
        <full_name>__isset</full_name>
        <argument line="749">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="759" package="PlaceLocalInclude">
        <name>__unset</name>
        <full_name>__unset</full_name>
        <argument line="759">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="765" package="PlaceLocalInclude">
        <name>convert_text</name>
        <full_name>convert_text</full_name>
        <argument line="765">
          <name>$text</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="817" package="PlaceLocalInclude">
        <name>is_utf8</name>
        <full_name>is_utf8</full_name>
        <docblock line="811">
          <description>Returns true if $string is valid UTF-8 and false otherwise.</description>
          <long-description></long-description>
          <tag line="811" name="param" description="String to be tested" type="mixed" variable="$str">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="811" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="817">
          <name>$str</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="862" package="PlaceLocalInclude">
        <name>get_display_size</name>
        <full_name>get_display_size</full_name>
        <docblock line="854">
          <description>Function to try a few tricks to determine the displayed size of an img on the page.</description>
          <long-description>&lt;p&gt;NOTE: This will ONLY work on an IMG tag. Returns FALSE on all other tag types.&lt;/p&gt;</long-description>
          <tag line="854" name="author" description="John Schlick"/>
          <tag line="854" name="version" description="April 19 2012"/>
          <tag line="854" name="return" description="an array containing the 'height' and 'width' of the image on the page or -1 if we can't figure it out." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="943" package="PlaceLocalInclude">
        <name>getAllAttributes</name>
        <full_name>getAllAttributes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="944" package="PlaceLocalInclude">
        <name>getAttribute</name>
        <full_name>getAttribute</full_name>
        <argument line="944">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="945" package="PlaceLocalInclude">
        <name>setAttribute</name>
        <full_name>setAttribute</full_name>
        <argument line="945">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="945">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="946" package="PlaceLocalInclude">
        <name>hasAttribute</name>
        <full_name>hasAttribute</full_name>
        <argument line="946">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="947" package="PlaceLocalInclude">
        <name>removeAttribute</name>
        <full_name>removeAttribute</full_name>
        <argument line="947">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="948" package="PlaceLocalInclude">
        <name>getElementById</name>
        <full_name>getElementById</full_name>
        <argument line="948">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="949" package="PlaceLocalInclude">
        <name>getElementsById</name>
        <full_name>getElementsById</full_name>
        <argument line="949">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="949">
          <name>$idx</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="950" package="PlaceLocalInclude">
        <name>getElementByTagName</name>
        <full_name>getElementByTagName</full_name>
        <argument line="950">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="951" package="PlaceLocalInclude">
        <name>getElementsByTagName</name>
        <full_name>getElementsByTagName</full_name>
        <argument line="951">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="951">
          <name>$idx</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="952" package="PlaceLocalInclude">
        <name>parentNode</name>
        <full_name>parentNode</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="953" package="PlaceLocalInclude">
        <name>childNodes</name>
        <full_name>childNodes</full_name>
        <argument line="953">
          <name>$idx</name>
          <default>-1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="954" package="PlaceLocalInclude">
        <name>firstChild</name>
        <full_name>firstChild</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="955" package="PlaceLocalInclude">
        <name>lastChild</name>
        <full_name>lastChild</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="956" package="PlaceLocalInclude">
        <name>nextSibling</name>
        <full_name>nextSibling</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="957" package="PlaceLocalInclude">
        <name>previousSibling</name>
        <full_name>previousSibling</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="958" package="PlaceLocalInclude">
        <name>hasChildNodes</name>
        <full_name>hasChildNodes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="959" package="PlaceLocalInclude">
        <name>nodeName</name>
        <full_name>nodeName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="960" package="PlaceLocalInclude">
        <name>appendChild</name>
        <full_name>appendChild</full_name>
        <argument line="960">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="972" package="PlaceLocalInclude">
      <extends/>
      <name>simple_html_dom</name>
      <full_name>\simple_html_dom</full_name>
      <docblock line="964">
        <description>simple html dom parser
Paperg - in the find routine: allow us to specify that we want case insensitive testing of the value of the selector.</description>
        <long-description>&lt;p&gt;Paperg - change $size from protected to public so we can easily access it
Paperg - added ForceTagsClosed in the constructor which tells us whether we trust the html or not.  Default is to NOT trust it.&lt;/p&gt;</long-description>
        <tag line="964" name="package" description="PlaceLocalInclude"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="974" namespace="global" package="Default">
        <name>$root</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="public" line="975" namespace="global" package="Default">
        <name>$nodes</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="976" namespace="global" package="Default">
        <name>$callback</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="public" line="977" namespace="global" package="Default">
        <name>$lowercase</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="public" line="979" namespace="global" package="Default">
        <name>$original_size</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="980" namespace="global" package="Default">
        <name>$size</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="981" namespace="global" package="Default">
        <name>$pos</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="982" namespace="global" package="Default">
        <name>$doc</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="983" namespace="global" package="Default">
        <name>$char</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="984" namespace="global" package="Default">
        <name>$cursor</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="985" namespace="global" package="Default">
        <name>$parent</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="protected" line="986" namespace="global" package="Default">
        <name>$noise</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="protected" line="987" namespace="global" package="Default">
        <name>$token_blank</name>
        <default>" \t\r\n"</default>
      </property>
      <property final="false" static="false" visibility="protected" line="988" namespace="global" package="Default">
        <name>$token_equal</name>
        <default>' =/&gt;'</default>
      </property>
      <property final="false" static="false" visibility="protected" line="989" namespace="global" package="Default">
        <name>$token_slash</name>
        <default>" /&gt;\r\n\t"</default>
      </property>
      <property final="false" static="false" visibility="protected" line="990" namespace="global" package="Default">
        <name>$token_attr</name>
        <default>' &gt;'</default>
      </property>
      <property final="false" static="false" visibility="public" line="992" namespace="global" package="Default">
        <name>$_charset</name>
        <default>''</default>
      </property>
      <property final="false" static="false" visibility="public" line="993" namespace="global" package="Default">
        <name>$_target_charset</name>
        <default>''</default>
      </property>
      <property final="false" static="false" visibility="protected" line="994" namespace="global" package="Default">
        <name>$default_br_text</name>
        <default>""</default>
      </property>
      <property final="false" static="false" visibility="public" line="995" namespace="global" package="Default">
        <name>$default_span_text</name>
        <default>""</default>
      </property>
      <property final="false" static="false" visibility="protected" line="998" namespace="global" package="Default">
        <name>$self_closing_tags</name>
        <default>array('img' =&gt; 1, 'br' =&gt; 1, 'input' =&gt; 1, 'meta' =&gt; 1, 'link' =&gt; 1, 'hr' =&gt; 1, 'base' =&gt; 1, 'embed' =&gt; 1, 'spacer' =&gt; 1)</default>
      </property>
      <property final="false" static="false" visibility="protected" line="999" namespace="global" package="Default">
        <name>$block_tags</name>
        <default>array('root' =&gt; 1, 'body' =&gt; 1, 'form' =&gt; 1, 'div' =&gt; 1, 'span' =&gt; 1, 'table' =&gt; 1)</default>
      </property>
      <property final="false" static="false" visibility="protected" line="1002" namespace="global" package="Default">
        <name>$optional_closing_tags</name>
        <default>array('tr' =&gt; array('tr' =&gt; 1, 'td' =&gt; 1, 'th' =&gt; 1), 'th' =&gt; array('th' =&gt; 1), 'td' =&gt; array('td' =&gt; 1), 'li' =&gt; array('li' =&gt; 1), 'dt' =&gt; array('dt' =&gt; 1, 'dd' =&gt; 1), 'dd' =&gt; array('dd' =&gt; 1, 'dt' =&gt; 1), 'dl' =&gt; array('dd' =&gt; 1, 'dt' =&gt; 1), 'p' =&gt; array('p' =&gt; 1), 'nobr' =&gt; array('nobr' =&gt; 1), 'b' =&gt; array('b' =&gt; 1), 'option' =&gt; array('option' =&gt; 1))</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1016" package="PlaceLocalInclude">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="1016">
          <name>$str</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="1016">
          <name>$lowercase</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1016">
          <name>$forceTagsClosed</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1016">
          <name>$target_charset</name>
          <default>DEFAULT_TARGET_CHARSET</default>
          <type/>
        </argument>
        <argument line="1016">
          <name>$stripRN</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1016">
          <name>$defaultBRText</name>
          <default>DEFAULT_BR_TEXT</default>
          <type/>
        </argument>
        <argument line="1016">
          <name>$defaultSpanText</name>
          <default>DEFAULT_SPAN_TEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1036" package="PlaceLocalInclude">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1042" package="PlaceLocalInclude">
        <name>load</name>
        <full_name>load</full_name>
        <argument line="1042">
          <name>$str</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1042">
          <name>$lowercase</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1042">
          <name>$stripRN</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1042">
          <name>$defaultBRText</name>
          <default>DEFAULT_BR_TEXT</default>
          <type/>
        </argument>
        <argument line="1042">
          <name>$defaultSpanText</name>
          <default>DEFAULT_SPAN_TEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1079" package="PlaceLocalInclude">
        <name>load_file</name>
        <full_name>load_file</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1091" package="PlaceLocalInclude">
        <name>set_callback</name>
        <full_name>set_callback</full_name>
        <argument line="1091">
          <name>$function_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1097" package="PlaceLocalInclude">
        <name>remove_callback</name>
        <full_name>remove_callback</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1103" package="PlaceLocalInclude">
        <name>save</name>
        <full_name>save</full_name>
        <argument line="1103">
          <name>$filepath</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1112" package="PlaceLocalInclude">
        <name>find</name>
        <full_name>find</full_name>
        <argument line="1112">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1112">
          <name>$idx</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="1112">
          <name>$lowercase</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1118" package="PlaceLocalInclude">
        <name>clear</name>
        <full_name>clear</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1129" package="PlaceLocalInclude">
        <name>dump</name>
        <full_name>dump</full_name>
        <argument line="1129">
          <name>$show_attr</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1135" package="PlaceLocalInclude">
        <name>prepare</name>
        <full_name>prepare</full_name>
        <argument line="1135">
          <name>$str</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1135">
          <name>$lowercase</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1135">
          <name>$stripRN</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1135">
          <name>$defaultBRText</name>
          <default>DEFAULT_BR_TEXT</default>
          <type/>
        </argument>
        <argument line="1135">
          <name>$defaultSpanText</name>
          <default>DEFAULT_SPAN_TEXT</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1170" package="PlaceLocalInclude">
        <name>parse</name>
        <full_name>parse</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1188" package="PlaceLocalInclude">
        <name>parse_charset</name>
        <full_name>parse_charset</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1259" package="PlaceLocalInclude">
        <name>read_tag</name>
        <full_name>read_tag</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1484" package="PlaceLocalInclude">
        <name>parse_attr</name>
        <full_name>parse_attr</full_name>
        <argument line="1484">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1484">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1484">
          <name>$space</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1521" package="PlaceLocalInclude">
        <name>link_nodes</name>
        <full_name>link_nodes</full_name>
        <argument line="1521">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1521">
          <name>$is_child</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1532" package="PlaceLocalInclude">
        <name>as_text_node</name>
        <full_name>as_text_node</full_name>
        <argument line="1532">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1542" package="PlaceLocalInclude">
        <name>skip</name>
        <full_name>skip</full_name>
        <argument line="1542">
          <name>$chars</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1548" package="PlaceLocalInclude">
        <name>copy_skip</name>
        <full_name>copy_skip</full_name>
        <argument line="1548">
          <name>$chars</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1558" package="PlaceLocalInclude">
        <name>copy_until</name>
        <full_name>copy_until</full_name>
        <argument line="1558">
          <name>$chars</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1567" package="PlaceLocalInclude">
        <name>copy_until_char</name>
        <full_name>copy_until_char</full_name>
        <argument line="1567">
          <name>$char</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1585" package="PlaceLocalInclude">
        <name>copy_until_char_escape</name>
        <full_name>copy_until_char_escape</full_name>
        <argument line="1585">
          <name>$char</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1616" package="PlaceLocalInclude">
        <name>remove_noise</name>
        <full_name>remove_noise</full_name>
        <argument line="1616">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1616">
          <name>$remove_tag</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1641" package="PlaceLocalInclude">
        <name>restore_noise</name>
        <full_name>restore_noise</full_name>
        <argument line="1641">
          <name>$text</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1674" package="PlaceLocalInclude">
        <name>search_noise</name>
        <full_name>search_noise</full_name>
        <argument line="1674">
          <name>$text</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1687" package="PlaceLocalInclude">
        <name>__toString</name>
        <full_name>__toString</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1692" package="PlaceLocalInclude">
        <name>__get</name>
        <full_name>__get</full_name>
        <argument line="1692">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1710" package="PlaceLocalInclude">
        <name>childNodes</name>
        <full_name>childNodes</full_name>
        <argument line="1710">
          <name>$idx</name>
          <default>-1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1711" package="PlaceLocalInclude">
        <name>firstChild</name>
        <full_name>firstChild</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1712" package="PlaceLocalInclude">
        <name>lastChild</name>
        <full_name>lastChild</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1713" package="PlaceLocalInclude">
        <name>createElement</name>
        <full_name>createElement</full_name>
        <argument line="1713">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1713">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1714" package="PlaceLocalInclude">
        <name>createTextNode</name>
        <full_name>createTextNode</full_name>
        <argument line="1714">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1715" package="PlaceLocalInclude">
        <name>getElementById</name>
        <full_name>getElementById</full_name>
        <argument line="1715">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1716" package="PlaceLocalInclude">
        <name>getElementsById</name>
        <full_name>getElementsById</full_name>
        <argument line="1716">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1716">
          <name>$idx</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1717" package="PlaceLocalInclude">
        <name>getElementByTagName</name>
        <full_name>getElementByTagName</full_name>
        <argument line="1717">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1718" package="PlaceLocalInclude">
        <name>getElementsByTagName</name>
        <full_name>getElementsByTagName</full_name>
        <argument line="1718">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1718">
          <name>$idx</name>
          <default>-1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1719" package="PlaceLocalInclude">
        <name>loadFile</name>
        <full_name>loadFile</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="71" code="50009">No DocBlock was found for function \file_get_html()</error>
      <error line="89" code="50009">No DocBlock was found for function \str_get_html()</error>
      <error line="102" code="50009">No DocBlock was found for function \dump_html_tree()</error>
      <error line="117" code="50018">No DocBlock was found for property $nodetype</error>
      <error line="118" code="50018">No DocBlock was found for property $tag</error>
      <error line="119" code="50018">No DocBlock was found for property $attr</error>
      <error line="120" code="50018">No DocBlock was found for property $children</error>
      <error line="121" code="50018">No DocBlock was found for property $nodes</error>
      <error line="122" code="50018">No DocBlock was found for property $parent</error>
      <error line="124" code="50018">No DocBlock was found for property $_</error>
      <error line="125" code="50018">No DocBlock was found for property $tag_start</error>
      <error line="126" code="50018">No DocBlock was found for property $dom</error>
      <error line="128" code="50010">No DocBlock was found for method __construct()</error>
      <error line="134" code="50010">No DocBlock was found for method __destruct()</error>
      <error line="139" code="50010">No DocBlock was found for method __toString()</error>
      <error line="145" code="50010">No DocBlock was found for method clear()</error>
      <error line="154" code="50010">No DocBlock was found for method dump()</error>
      <error line="179" code="50010">No DocBlock was found for method dump_node()</error>
      <error line="245" code="50010">No DocBlock was found for method parent()</error>
      <error line="260" code="50010">No DocBlock was found for method has_child()</error>
      <error line="266" code="50010">No DocBlock was found for method children()</error>
      <error line="277" code="50010">No DocBlock was found for method first_child()</error>
      <error line="287" code="50010">No DocBlock was found for method last_child()</error>
      <error line="297" code="50010">No DocBlock was found for method next_sibling()</error>
      <error line="318" code="50010">No DocBlock was found for method prev_sibling()</error>
      <error line="330" code="50010">No DocBlock was found for method find_ancestor_tag()</error>
      <error line="352" code="50010">No DocBlock was found for method innertext()</error>
      <error line="364" code="50010">No DocBlock was found for method outertext()</error>
      <error line="424" code="50010">No DocBlock was found for method text()</error>
      <error line="458" code="50010">No DocBlock was found for method xmltext()</error>
      <error line="467" code="50010">No DocBlock was found for method makeup()</error>
      <error line="503" code="50010">No DocBlock was found for method find()</error>
      <error line="554" code="50010">No DocBlock was found for method seek()</error>
      <error line="651" code="50010">No DocBlock was found for method match()</error>
      <error line="673" code="50010">No DocBlock was found for method parse_selector()</error>
      <error line="721" code="50010">No DocBlock was found for method __get()</error>
      <error line="735" code="50010">No DocBlock was found for method __set()</error>
      <error line="749" code="50010">No DocBlock was found for method __isset()</error>
      <error line="759" code="50010">No DocBlock was found for method __unset()</error>
      <error line="765" code="50010">No DocBlock was found for method convert_text()</error>
      <error line="943" code="50010">No DocBlock was found for method getAllAttributes()</error>
      <error line="944" code="50010">No DocBlock was found for method getAttribute()</error>
      <error line="945" code="50010">No DocBlock was found for method setAttribute()</error>
      <error line="946" code="50010">No DocBlock was found for method hasAttribute()</error>
      <error line="947" code="50010">No DocBlock was found for method removeAttribute()</error>
      <error line="948" code="50010">No DocBlock was found for method getElementById()</error>
      <error line="949" code="50010">No DocBlock was found for method getElementsById()</error>
      <error line="950" code="50010">No DocBlock was found for method getElementByTagName()</error>
      <error line="951" code="50010">No DocBlock was found for method getElementsByTagName()</error>
      <error line="952" code="50010">No DocBlock was found for method parentNode()</error>
      <error line="953" code="50010">No DocBlock was found for method childNodes()</error>
      <error line="954" code="50010">No DocBlock was found for method firstChild()</error>
      <error line="955" code="50010">No DocBlock was found for method lastChild()</error>
      <error line="956" code="50010">No DocBlock was found for method nextSibling()</error>
      <error line="957" code="50010">No DocBlock was found for method previousSibling()</error>
      <error line="958" code="50010">No DocBlock was found for method hasChildNodes()</error>
      <error line="959" code="50010">No DocBlock was found for method nodeName()</error>
      <error line="960" code="50010">No DocBlock was found for method appendChild()</error>
      <error line="974" code="50018">No DocBlock was found for property $root</error>
      <error line="975" code="50018">No DocBlock was found for property $nodes</error>
      <error line="976" code="50018">No DocBlock was found for property $callback</error>
      <error line="977" code="50018">No DocBlock was found for property $lowercase</error>
      <error line="979" code="50018">No DocBlock was found for property $original_size</error>
      <error line="980" code="50018">No DocBlock was found for property $size</error>
      <error line="981" code="50018">No DocBlock was found for property $pos</error>
      <error line="982" code="50018">No DocBlock was found for property $doc</error>
      <error line="983" code="50018">No DocBlock was found for property $char</error>
      <error line="984" code="50018">No DocBlock was found for property $cursor</error>
      <error line="985" code="50018">No DocBlock was found for property $parent</error>
      <error line="986" code="50018">No DocBlock was found for property $noise</error>
      <error line="987" code="50018">No DocBlock was found for property $token_blank</error>
      <error line="988" code="50018">No DocBlock was found for property $token_equal</error>
      <error line="989" code="50018">No DocBlock was found for property $token_slash</error>
      <error line="990" code="50018">No DocBlock was found for property $token_attr</error>
      <error line="992" code="50018">No DocBlock was found for property $_charset</error>
      <error line="993" code="50018">No DocBlock was found for property $_target_charset</error>
      <error line="994" code="50018">No DocBlock was found for property $default_br_text</error>
      <error line="995" code="50018">No DocBlock was found for property $default_span_text</error>
      <error line="998" code="50018">No DocBlock was found for property $self_closing_tags</error>
      <error line="999" code="50018">No DocBlock was found for property $block_tags</error>
      <error line="1002" code="50018">No DocBlock was found for property $optional_closing_tags</error>
      <error line="1016" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1036" code="50010">No DocBlock was found for method __destruct()</error>
      <error line="1042" code="50010">No DocBlock was found for method load()</error>
      <error line="1079" code="50010">No DocBlock was found for method load_file()</error>
      <error line="1091" code="50010">No DocBlock was found for method set_callback()</error>
      <error line="1097" code="50010">No DocBlock was found for method remove_callback()</error>
      <error line="1103" code="50010">No DocBlock was found for method save()</error>
      <error line="1112" code="50010">No DocBlock was found for method find()</error>
      <error line="1118" code="50010">No DocBlock was found for method clear()</error>
      <error line="1129" code="50010">No DocBlock was found for method dump()</error>
      <error line="1135" code="50010">No DocBlock was found for method prepare()</error>
      <error line="1170" code="50010">No DocBlock was found for method parse()</error>
      <error line="1188" code="50010">No DocBlock was found for method parse_charset()</error>
      <error line="1259" code="50010">No DocBlock was found for method read_tag()</error>
      <error line="1484" code="50010">No DocBlock was found for method parse_attr()</error>
      <error line="1521" code="50010">No DocBlock was found for method link_nodes()</error>
      <error line="1532" code="50010">No DocBlock was found for method as_text_node()</error>
      <error line="1542" code="50010">No DocBlock was found for method skip()</error>
      <error line="1548" code="50010">No DocBlock was found for method copy_skip()</error>
      <error line="1558" code="50010">No DocBlock was found for method copy_until()</error>
      <error line="1567" code="50010">No DocBlock was found for method copy_until_char()</error>
      <error line="1585" code="50010">No DocBlock was found for method copy_until_char_escape()</error>
      <error line="1616" code="50010">No DocBlock was found for method remove_noise()</error>
      <error line="1641" code="50010">No DocBlock was found for method restore_noise()</error>
      <error line="1674" code="50010">No DocBlock was found for method search_noise()</error>
      <error line="1687" code="50010">No DocBlock was found for method __toString()</error>
      <error line="1692" code="50010">No DocBlock was found for method __get()</error>
      <error line="1710" code="50010">No DocBlock was found for method childNodes()</error>
      <error line="1711" code="50010">No DocBlock was found for method firstChild()</error>
      <error line="1712" code="50010">No DocBlock was found for method lastChild()</error>
      <error line="1713" code="50010">No DocBlock was found for method createElement()</error>
      <error line="1714" code="50010">No DocBlock was found for method createTextNode()</error>
      <error line="1715" code="50010">No DocBlock was found for method getElementById()</error>
      <error line="1716" code="50010">No DocBlock was found for method getElementsById()</error>
      <error line="1717" code="50010">No DocBlock was found for method getElementByTagName()</error>
      <error line="1718" code="50010">No DocBlock was found for method getElementsByTagName()</error>
      <error line="1719" code="50010">No DocBlock was found for method loadFile()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/arguments.php" hash="66113f16221e18deb7f1efb71842125e" package="Default">
    <docblock line="2">
      <description>base include file for SimpleTest</description>
      <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
      <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: dumper.php 1909 2009-07-29 15:58:11Z dgheath $"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="Default">
      <extends/>
      <name>SimpleArguments</name>
      <full_name>\SimpleArguments</full_name>
      <docblock line="9">
        <description>Parses the command line arguments.</description>
        <long-description>&lt;p&gt;@package  SimpleTest&lt;/p&gt;</long-description>
        <tag line="9" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="15" namespace="global" package="Default">
        <name>$all</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="17">
          <description>Parses the command line arguments.</description>
          <long-description>&lt;p&gt;The usual formats
are supported:
-f value
-f=value
--flag=value
--flag value
-f           (true)
--flag       (true)&lt;/p&gt;</long-description>
          <tag line="17" name="param" description="Normally the PHP $argv." type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$arguments</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>assign</name>
        <full_name>assign</full_name>
        <docblock line="36">
          <description>Sets the value in the argments object.</description>
          <long-description>&lt;p&gt;If multiple
values are added under the same key, the key will
give an array value in the order they were added.&lt;/p&gt;</long-description>
          <tag line="36" name="param" description="The variable to assign to." type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="param" description="value The value that would norally be colected on the command line." type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="44">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="62" package="Default">
        <name>parseArgument</name>
        <full_name>parseArgument</full_name>
        <docblock line="54">
          <description>Extracts the next key and value from the argument list.</description>
          <long-description></long-description>
          <tag line="54" name="param" description="The remaining arguments to be parsed. The argument list will be reduced." type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="54" name="return" description="Two item array of key and value.&#10;                             If no value can be found it will&#10;                             have the value true assigned instead." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$arguments</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="83" package="Default">
        <name>nextNonFlagElseTrue</name>
        <full_name>nextNonFlagElseTrue</full_name>
        <docblock line="75">
          <description>Attempts to use the next argument as a value.</description>
          <long-description>&lt;p&gt;It
won't use what it thinks is a flag.&lt;/p&gt;</long-description>
          <tag line="75" name="param" description="Remaining arguments to be parsed. This variable is modified if there is a value to be extracted." type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="75" name="return" description="The next value unless it's a flag." type="\string/boolean">
            <type by_reference="false">\string/boolean</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$arguments</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Default">
        <name>valueIsNext</name>
        <full_name>valueIsNext</full_name>
        <docblock line="87">
          <description>Test to see if the next available argument is a valid value.</description>
          <long-description>&lt;p&gt;If it starts with "-" or "--" it's a flag and doesn't count.&lt;/p&gt;</long-description>
          <tag line="87" name="param" description="Remaining arguments to be parsed. Not affected by this call. boolean True if valid value." type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$arguments</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="103" package="Default">
        <name>isFlag</name>
        <full_name>isFlag</full_name>
        <docblock line="98">
          <description>It's a flag if it starts with "-" or "--".</description>
          <long-description></long-description>
          <tag line="98" name="param" description="Value to be tested." type="string" variable="$argument">
            <type by_reference="false">string</type>
          </tag>
          <tag line="98" name="return" description="True if it's a flag." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$argument</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="117" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <docblock line="107">
          <description>The arguments are available as individual member
variables on the object.</description>
          <long-description></long-description>
          <tag line="107" name="param" description="Argument name." type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="107" name="return" description="Either false for no value,&#10;                                the value as a string or&#10;                                a list of multiple values if&#10;                                the flag had been specified more&#10;                                than once." type="\string/array/boolean">
            <type by_reference="false">\string/array/boolean</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="128" package="Default">
        <name>all</name>
        <full_name>all</full_name>
        <docblock line="124">
          <description>The entire argument set as a hash.</description>
          <long-description></long-description>
          <tag line="124" name="return" description="Each argument and it's value(s)." type="\hash">
            <type by_reference="false">\hash</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="138" package="Default">
      <extends/>
      <name>SimpleHelp</name>
      <full_name>\SimpleHelp</full_name>
      <docblock line="133">
        <description>Renders the help for the command line arguments.</description>
        <long-description>&lt;p&gt;@package  SimpleTest&lt;/p&gt;</long-description>
        <tag line="133" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="139" namespace="global" package="Default">
        <name>$overview</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="140" namespace="global" package="Default">
        <name>$flag_sets</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="141" namespace="global" package="Default">
        <name>$explanations</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="147" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="143">
          <description>Sets up the top level explanation for the program.</description>
          <long-description></long-description>
          <tag line="143" name="param" description="Summary of program." type="string" variable="$overview">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$overview</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="159" package="Default">
        <name>explainFlag</name>
        <full_name>explainFlag</full_name>
        <docblock line="151">
          <description>Adds the explanation for a group of flags that all
have the same function.</description>
          <long-description></long-description>
          <tag line="151" name="param" description="Flag and alternates. Don't worry about leading dashes as these are inserted automatically." type="\string/array" variable="$flags">
            <type by_reference="false">\string/array</type>
          </tag>
          <tag line="151" name="param" description="What that flag group does." type="string" variable="$explanation">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="159">
          <name>$flags</name>
          <default></default>
          <type/>
        </argument>
        <argument line="159">
          <name>$explanation</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="169" package="Default">
        <name>render</name>
        <full_name>render</full_name>
        <docblock line="165">
          <description>Generates the help text.</description>
          <long-description></long-description>
          <tag line="165" name="returns" description="string      The complete formatted text."/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="182" package="Default">
        <name>longestFlag</name>
        <full_name>longestFlag</full_name>
        <docblock line="178">
          <description>Works out the longest flag for formatting purposes.</description>
          <long-description></long-description>
          <tag line="178" name="param" description="The internal flag set list." type="array" variable="$flag_sets">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="182">
          <name>$flag_sets</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="196" package="Default">
        <name>renderFlagSet</name>
        <full_name>renderFlagSet</full_name>
        <docblock line="192">
          <description>Generates the text for a single flag and it's alternate flags.</description>
          <long-description></long-description>
          <tag line="192" name="returns" description="string           Help text for that flag group."/>
        </docblock>
        <argument line="196">
          <name>$flags</name>
          <default></default>
          <type/>
        </argument>
        <argument line="196">
          <name>$explanation</name>
          <default></default>
          <type/>
        </argument>
        <argument line="196">
          <name>$tab_stop</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="210" package="Default">
        <name>renderFlag</name>
        <full_name>renderFlag</full_name>
        <docblock line="205">
          <description>Generates the flag name including leading dashes.</description>
          <long-description></long-description>
          <tag line="205" name="param" description="Just the name." type="string" variable="$flag">
            <type by_reference="false">string</type>
          </tag>
          <tag line="205" name="returns" description="Fag with apropriate dashes."/>
        </docblock>
        <argument line="210">
          <name>$flag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="220" package="Default">
        <name>noDuplicateNewLines</name>
        <full_name>noDuplicateNewLines</full_name>
        <docblock line="214">
          <description>Converts multiple new lines into a single new line.</description>
          <long-description>&lt;p&gt;Just there to trap accidental duplicate new lines.&lt;/p&gt;</long-description>
          <tag line="214" name="param" description="Text to clean up." type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="214" name="returns" description="string          Text with no blank lines."/>
        </docblock>
        <argument line="220">
          <name>$text</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <critical line="9" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="15" code="50018">No DocBlock was found for property $all</error>
      <critical line="133" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="139" code="50018">No DocBlock was found for property $overview</error>
      <error line="140" code="50018">No DocBlock was found for property $flag_sets</error>
      <error line="141" code="50018">No DocBlock was found for property $explanations</error>
      <error line="192" code="50015">Argument $flags is missing from the Docblock of renderFlagSet()</error>
      <error line="192" code="50015">Argument $explanation is missing from the Docblock of renderFlagSet()</error>
      <error line="192" code="50015">Argument $tab_stop is missing from the Docblock of renderFlagSet()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/authentication.php" hash="dd5ea83d362f3395d42097551f50bbe9" package="Default">
    <docblock line="2">
      <description>Base include file for SimpleTest</description>
      <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
      <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: authentication.php 2011 2011-04-29 08:22:48Z pp11 $"/>
    </docblock>
    <include line="11" type="Require Once" package="Default">
      <name/>
      <docblock line="8">
        <description>include http class</description>
        <long-description></long-description>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="18" package="Default">
      <extends/>
      <name>SimpleRealm</name>
      <full_name>\SimpleRealm</full_name>
      <docblock line="13">
        <description>Represents a single security realm's identity.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="13" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="19" namespace="global" package="Default">
        <name>$type</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="20" namespace="global" package="Default">
        <name>$root</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="21" namespace="global" package="Default">
        <name>$username</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$password</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Default">
        <name>SimpleRealm</name>
        <full_name>SimpleRealm</full_name>
        <docblock line="24">
          <description>Starts with the initial entry directory.</description>
          <long-description>&lt;p&gt;@param string $type      Authentication type for this
                            realm. Only Basic authentication
                            is currently supported.&lt;/p&gt;</long-description>
          <tag line="24" name="param" description="Somewhere in realm. @access public" type="\SimpleUrl" variable="$url">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>stretch</name>
        <full_name>stretch</full_name>
        <docblock line="39">
          <description>Adds another location to the realm.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url    Somewhere in realm.&lt;/p&gt;</long-description>
          <tag line="39" name="access" description="public"/>
        </docblock>
        <argument line="44">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="55" package="Default">
        <name>getCommonPath</name>
        <full_name>getCommonPath</full_name>
        <docblock line="48">
          <description>Finds the common starting path.</description>
          <long-description>&lt;p&gt;@param string $first        Path to compare.&lt;/p&gt;</long-description>
          <tag line="48" name="param" description="Path to compare. @return string Common directories. @access private" type="string" variable="$second">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="72" package="Default">
        <name>setIdentity</name>
        <full_name>setIdentity</full_name>
        <docblock line="66">
          <description>Sets the identity to try within this realm.</description>
          <long-description>&lt;p&gt;@param string $username    Username in authentication dialog.&lt;/p&gt;</long-description>
          <tag line="66" name="param" description="Password in authentication dialog. @access public" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$username</name>
          <default></default>
          <type/>
        </argument>
        <argument line="72">
          <name>$password</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="82" package="Default">
        <name>getUsername</name>
        <full_name>getUsername</full_name>
        <docblock line="77">
          <description>Accessor for current identity.</description>
          <long-description>&lt;p&gt;@return string        Last succesful username.&lt;/p&gt;</long-description>
          <tag line="77" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="91" package="Default">
        <name>getPassword</name>
        <full_name>getPassword</full_name>
        <docblock line="86">
          <description>Accessor for current identity.</description>
          <long-description>&lt;p&gt;@return string        Last succesful password.&lt;/p&gt;</long-description>
          <tag line="86" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="102" package="Default">
        <name>isWithin</name>
        <full_name>isWithin</full_name>
        <docblock line="95">
          <description>Test to see if the URL is within the directory
   tree of the realm.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url    URL to test.&lt;/p&gt;</long-description>
          <tag line="95" name="return" description="True if subpath.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="121" package="Default">
        <name>isIn</name>
        <full_name>isIn</full_name>
        <docblock line="112">
          <description>Tests to see if one string is a substring of
   another.</description>
          <long-description>&lt;p&gt;@param string $part        Small bit.&lt;/p&gt;</long-description>
          <tag line="112" name="param" description="Big bit. @return boolean True if the small bit is in the big bit. @access private" type="string" variable="$whole">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="121">
          <name>$part</name>
          <default></default>
          <type/>
        </argument>
        <argument line="121">
          <name>$whole</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="131" package="Default">
      <extends/>
      <name>SimpleAuthenticator</name>
      <full_name>\SimpleAuthenticator</full_name>
      <docblock line="126">
        <description>Manages security realms.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="126" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="132" namespace="global" package="Default">
        <name>$realms</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="138" package="Default">
        <name>SimpleAuthenticator</name>
        <full_name>SimpleAuthenticator</full_name>
        <docblock line="134">
          <description>Clears the realms.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="146" package="Default">
        <name>restartSession</name>
        <full_name>restartSession</full_name>
        <docblock line="142">
          <description>Starts with no realms set up.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="166" package="Default">
        <name>addRealm</name>
        <full_name>addRealm</full_name>
        <docblock line="150">
          <description>Adds a new realm centered the current URL.</description>
          <long-description>&lt;p&gt;Browsers privatey wildly on their behaviour in this
   regard. Mozilla ignores the realm and presents
   only when challenged, wasting bandwidth. IE
   just carries on presenting until a new challenge
   occours. SimpleTest tries to follow the spirit of
   the original standards committee and treats the
   base URL as the root of a file tree shaped realm.&lt;/p&gt;</long-description>
          <tag line="150" name="param" description="Base of realm. @param string $type Authentication type for this realm. Only Basic authentication is currently supported. @param string $realm Name of realm. @access public" type="\SimpleUrl" variable="$url">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="166">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="166">
          <name>$realm</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="179" package="Default">
        <name>setIdentityForRealm</name>
        <full_name>setIdentityForRealm</full_name>
        <docblock line="170">
          <description>Sets the current identity to be presented
   against that realm.</description>
          <long-description>&lt;p&gt;@param string $host        Server hosting realm.&lt;/p&gt;</long-description>
          <tag line="170" name="param" description="Name of realm. @param string $username Username for realm. @param string $password Password for realm. @access public" type="string" variable="$realm">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="179">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="179">
          <name>$realm</name>
          <default></default>
          <type/>
        </argument>
        <argument line="179">
          <name>$username</name>
          <default></default>
          <type/>
        </argument>
        <argument line="179">
          <name>$password</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="191" package="Default">
        <name>findRealmFromUrl</name>
        <full_name>findRealmFromUrl</full_name>
        <docblock line="185">
          <description>Finds the name of the realm by comparing URLs.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url        URL to test.&lt;/p&gt;</long-description>
          <tag line="185" name="return" description="Name of realm.&#10;   @access private" type="\SimpleRealm">
            <type by_reference="false">\SimpleRealm</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="209" package="Default">
        <name>addHeaders</name>
        <full_name>addHeaders</full_name>
        <docblock line="203">
          <description>Presents the appropriate headers for this location.</description>
          <long-description>&lt;p&gt;@param SimpleHttpRequest $request  Request to modify.&lt;/p&gt;</long-description>
          <tag line="203" name="param" description="Base of realm. @access public" type="\SimpleUrl" variable="$url">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="209">
          <name>$request</name>
          <default></default>
          <type/>
        </argument>
        <argument line="209">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="230" package="Default">
        <name>addBasicHeaders</name>
        <full_name>addBasicHeaders</full_name>
        <docblock line="222">
          <description>Presents the appropriate headers for this
   location for basic authentication.</description>
          <long-description>&lt;p&gt;@param SimpleHttpRequest $request  Request to modify.&lt;/p&gt;</long-description>
          <tag line="222" name="param" description="Username for realm. @param string $password Password for realm. @access public" type="string" variable="$username">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="230">
          <name>$request</name>
          <default></default>
          <type/>
        </argument>
        <argument line="230">
          <name>$username</name>
          <default></default>
          <type/>
        </argument>
        <argument line="230">
          <name>$password</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <critical line="13" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="19" code="50018">No DocBlock was found for property $type</error>
      <error line="20" code="50018">No DocBlock was found for property $root</error>
      <error line="21" code="50018">No DocBlock was found for property $username</error>
      <error line="22" code="50018">No DocBlock was found for property $password</error>
      <error line="24" code="50014">Name of argument $type does not match with the DocBlock's name $url in SimpleRealm()</error>
      <error line="24" code="50015">Argument $url is missing from the Docblock of SimpleRealm()</error>
      <error line="39" code="50015">Argument $url is missing from the Docblock of stretch()</error>
      <error line="48" code="50014">Name of argument $first does not match with the DocBlock's name $second in getCommonPath()</error>
      <error line="48" code="50015">Argument $second is missing from the Docblock of getCommonPath()</error>
      <error line="66" code="50015">Argument $password is missing from the Docblock of setIdentity()</error>
      <error line="95" code="50015">Argument $url is missing from the Docblock of isWithin()</error>
      <error line="112" code="50014">Name of argument $part does not match with the DocBlock's name $whole in isIn()</error>
      <error line="112" code="50015">Argument $whole is missing from the Docblock of isIn()</error>
      <critical line="126" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="132" code="50018">No DocBlock was found for property $realms</error>
      <error line="150" code="50015">Argument $type is missing from the Docblock of addRealm()</error>
      <error line="150" code="50015">Argument $realm is missing from the Docblock of addRealm()</error>
      <error line="170" code="50014">Name of argument $host does not match with the DocBlock's name $realm in setIdentityForRealm()</error>
      <error line="170" code="50015">Argument $realm is missing from the Docblock of setIdentityForRealm()</error>
      <error line="170" code="50015">Argument $username is missing from the Docblock of setIdentityForRealm()</error>
      <error line="170" code="50015">Argument $password is missing from the Docblock of setIdentityForRealm()</error>
      <error line="185" code="50015">Argument $url is missing from the Docblock of findRealmFromUrl()</error>
      <error line="203" code="50014">Name of argument $request does not match with the DocBlock's name $url in addHeaders()</error>
      <error line="203" code="50015">Argument $url is missing from the Docblock of addHeaders()</error>
      <error line="222" code="50014">Name of argument $request does not match with the DocBlock's name $username in addBasicHeaders()</error>
      <error line="222" code="50015">Argument $username is missing from the Docblock of addBasicHeaders()</error>
      <error line="222" code="50015">Argument $password is missing from the Docblock of addBasicHeaders()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/autorun.php" hash="a86e038a1fac35cccc12a4508035c2c6" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Autorunner which runs all tests cases found in a file
 that includes this module.</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="version" description="$Id: autorun.php 2037 2011-11-30 17:58:21Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <function namespace="global" line="25" package="Default">
      <name>simpletest_autorun</name>
      <full_name>\simpletest_autorun</full_name>
      <docblock line="22">
        <description>Exit handler to run all recent test cases and exit system if in CLI</description>
        <long-description></long-description>
      </docblock>
    </function>
    <function namespace="global" line="44" package="Default">
      <name>run_local_tests</name>
      <full_name>\run_local_tests</full_name>
      <docblock line="36">
        <description>run all recent test cases if no test has
   so far been run.</description>
        <long-description>&lt;p&gt;Uses the DefaultReporter which can have
   it's output controlled with SimpleTest::prefer().&lt;/p&gt;</long-description>
        <tag line="36" name="return" description="false if there were test failures, true if&#10;                        there were no failures, null if tests are&#10;                        already running" type="\boolean/null">
          <type by_reference="false">\boolean/null</type>
        </tag>
      </docblock>
    </function>
    <function namespace="global" line="66" package="Default">
      <name>tests_have_run</name>
      <full_name>\tests_have_run</full_name>
      <docblock line="61">
        <description>Checks the current test context to see if a test has
   ever been run.</description>
        <long-description>&lt;p&gt;@return boolean        True if tests have run.&lt;/p&gt;</long-description>
      </docblock>
    </function>
    <function namespace="global" line="77" package="Default">
      <name>initial_file</name>
      <full_name>\initial_file</full_name>
      <docblock line="73">
        <description>The first autorun file.</description>
        <long-description>&lt;p&gt;@return string        Filename of first autorun script.&lt;/p&gt;</long-description>
      </docblock>
    </function>
    <function namespace="global" line="95" package="Default">
      <name>capture_new_classes</name>
      <full_name>\capture_new_classes</full_name>
      <docblock line="90">
        <description>Every class since the first autorun include.</description>
        <long-description>&lt;p&gt;This
   is safe enough if require_once() is always used.&lt;/p&gt;</long-description>
        <tag line="90" name="return" description="Class names." type="array">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
    </function>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/autorun.php</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/browser.php" hash="6ed9edf2a341523b162b318b3d0b4591" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: browser.php 2013 2011-04-29 09:29:45Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="18" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="19" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="20" type="Require Once" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="28" package="Default">
      <name>DEFAULT_MAX_NESTED_FRAMES</name>
      <full_name>\DEFAULT_MAX_NESTED_FRAMES</full_name>
      <value>3</value>
    </constant>
    <class final="false" abstract="false" namespace="global" line="36" package="Default">
      <extends/>
      <name>SimpleBrowserHistory</name>
      <full_name>\SimpleBrowserHistory</full_name>
      <docblock line="31">
        <description>Browser history list.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="31" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="37" namespace="global" package="Default">
        <name>$sequence</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="38" namespace="global" package="Default">
        <name>$position</name>
        <default>-1</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="45" package="Default">
        <name>isEmpty</name>
        <full_name>isEmpty</full_name>
        <docblock line="40">
          <description>Test for no entries yet.</description>
          <long-description>&lt;p&gt;@return boolean        True if empty.&lt;/p&gt;</long-description>
          <tag line="40" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="54" package="Default">
        <name>atBeginning</name>
        <full_name>atBeginning</full_name>
        <docblock line="49">
          <description>Test for being at the beginning.</description>
          <long-description>&lt;p&gt;@return boolean        True if first.&lt;/p&gt;</long-description>
          <tag line="49" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="63" package="Default">
        <name>atEnd</name>
        <full_name>atEnd</full_name>
        <docblock line="58">
          <description>Test for being at the last entry.</description>
          <long-description>&lt;p&gt;@return boolean        True if last.&lt;/p&gt;</long-description>
          <tag line="58" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="Default">
        <name>recordEntry</name>
        <full_name>recordEntry</full_name>
        <docblock line="67">
          <description>Adds a successfully fetched page to the history.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url                 URL of fetch.&lt;/p&gt;</long-description>
          <tag line="67" name="param" description="Any post data with the fetch. @access public" type="\SimpleEncoding" variable="$parameters">
            <type by_reference="false">\SimpleEncoding</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="73">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="Default">
        <name>getUrl</name>
        <full_name>getUrl</full_name>
        <docblock line="81">
          <description>Last fully qualified URL for current history
   position.</description>
          <long-description>&lt;p&gt;@return SimpleUrl        URL for this position.&lt;/p&gt;</long-description>
          <tag line="81" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="100" package="Default">
        <name>getParameters</name>
        <full_name>getParameters</full_name>
        <docblock line="94">
          <description>Parameters of last fetch from current history
   position.</description>
          <long-description>&lt;p&gt;@return SimpleFormEncoding    Post parameters.&lt;/p&gt;</long-description>
          <tag line="94" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="113" package="Default">
        <name>back</name>
        <full_name>back</full_name>
        <docblock line="107">
          <description>Step back one place in the history.</description>
          <long-description>&lt;p&gt;Stops at
   the first page.&lt;/p&gt;</long-description>
          <tag line="107" name="return" description="True if any previous entries.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="127" package="Default">
        <name>forward</name>
        <full_name>forward</full_name>
        <docblock line="121">
          <description>Step forward one place.</description>
          <long-description>&lt;p&gt;If already at the
   latest entry then nothing will happen.&lt;/p&gt;</long-description>
          <tag line="121" name="return" description="True if any future entries.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="140" package="Default">
        <name>dropFuture</name>
        <full_name>dropFuture</full_name>
        <docblock line="135">
          <description>Ditches all future entries beyond the current
   point.</description>
          <long-description>&lt;p&gt;@access private&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="157" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleBrowser</name>
      <full_name>\SimpleBrowser</full_name>
      <docblock line="150">
        <description>Simulated web browser.</description>
        <long-description>&lt;p&gt;This is an aggregate of
   the user agent, the HTML parsing, request history
   and the last header set.&lt;/p&gt;</long-description>
        <tag line="150" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="158" namespace="global" package="Default">
        <name>$user_agent</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="159" namespace="global" package="Default">
        <name>$page</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="160" namespace="global" package="Default">
        <name>$history</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="161" namespace="global" package="Default">
        <name>$ignore_frames</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="162" namespace="global" package="Default">
        <name>$maximum_nested_frames</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="163" namespace="global" package="Default">
        <name>$parser</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="172" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="165">
          <description>Starts with a fresh browser with no
   cookie or any other state information.</description>
          <long-description>&lt;p&gt;The
   exception is that a default proxy will be
   set up if specified in the options.&lt;/p&gt;</long-description>
          <tag line="165" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="189" package="SimpleTest&#10;   @subpackage WebTester">
        <name>createUserAgent</name>
        <full_name>createUserAgent</full_name>
        <docblock line="184">
          <description>Creates the underlying user agent.</description>
          <long-description>&lt;p&gt;@return SimpleFetcher    Content fetcher.&lt;/p&gt;</long-description>
          <tag line="184" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="198" package="SimpleTest&#10;   @subpackage WebTester">
        <name>createHistory</name>
        <full_name>createHistory</full_name>
        <docblock line="193">
          <description>Creates a new empty history list.</description>
          <long-description>&lt;p&gt;@return SimpleBrowserHistory    New list.&lt;/p&gt;</long-description>
          <tag line="193" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="208" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getParser</name>
        <full_name>getParser</full_name>
        <docblock line="202">
          <description>Get the HTML parser to use.</description>
          <long-description>&lt;p&gt;Can be overridden by
   setParser. Otherwise scans through the available parsers and
   uses the first one which is available.&lt;/p&gt;</long-description>
          <tag line="202" name="return" description="SimplePHPPageBuilder or SimpleTidyPageBuilder" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="223" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setParser</name>
        <full_name>setParser</full_name>
        <docblock line="219">
          <description>Override the default HTML parser, allowing parsers to be plugged in.</description>
          <long-description>&lt;p&gt;@param object           A parser object instance.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="223">
          <name>$parser</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="232" package="SimpleTest&#10;   @subpackage WebTester">
        <name>ignoreFrames</name>
        <full_name>ignoreFrames</full_name>
        <docblock line="227">
          <description>Disables frames support.</description>
          <long-description>&lt;p&gt;Frames will not be fetched
   and the frameset page will be used instead.&lt;/p&gt;</long-description>
          <tag line="227" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="241" package="SimpleTest&#10;   @subpackage WebTester">
        <name>useFrames</name>
        <full_name>useFrames</full_name>
        <docblock line="236">
          <description>Enables frames support.</description>
          <long-description>&lt;p&gt;Frames will be fetched from
   now on.&lt;/p&gt;</long-description>
          <tag line="236" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="249" package="SimpleTest&#10;   @subpackage WebTester">
        <name>ignoreCookies</name>
        <full_name>ignoreCookies</full_name>
        <docblock line="245">
          <description>Switches off cookie sending and recieving.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="257" package="SimpleTest&#10;   @subpackage WebTester">
        <name>useCookies</name>
        <full_name>useCookies</full_name>
        <docblock line="253">
          <description>Switches back on the cookie sending and recieving.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="269" package="SimpleTest&#10;   @subpackage WebTester">
        <name>parse</name>
        <full_name>parse</full_name>
        <docblock line="261">
          <description>Parses the raw content into a page.</description>
          <long-description>&lt;p&gt;Will load further
   frame pages unless frames are disabled.&lt;/p&gt;</long-description>
          <tag line="261" name="param" description="Response from fetch. @param integer $depth Nested frameset depth. @return SimplePage Parsed HTML. @access private" type="\SimpleHttpResponse" variable="$response">
            <type by_reference="false">\SimpleHttpResponse</type>
          </tag>
        </docblock>
        <argument line="269">
          <name>$response</name>
          <default></default>
          <type/>
        </argument>
        <argument line="269">
          <name>$depth</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="289" package="SimpleTest&#10;   @subpackage WebTester">
        <name>buildPage</name>
        <full_name>buildPage</full_name>
        <docblock line="282">
          <description>Assembles the parsing machinery and actually parses
   a single page.</description>
          <long-description>&lt;p&gt;Frees all of the builder memory and so
   unjams the PHP memory management.&lt;/p&gt;</long-description>
          <tag line="282" name="param" description="Response from fetch. @return SimplePage Parsed top level page." type="\SimpleHttpResponse" variable="$response">
            <type by_reference="false">\SimpleHttpResponse</type>
          </tag>
        </docblock>
        <argument line="289">
          <name>$response</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="302" package="SimpleTest&#10;   @subpackage WebTester">
        <name>fetch</name>
        <full_name>fetch</full_name>
        <docblock line="293">
          <description>Fetches a page.</description>
          <long-description>&lt;p&gt;Jointly recursive with the parse()
   method as it descends a frameset.&lt;/p&gt;</long-description>
          <tag line="293" name="param" description="Target to fetch. @param SimpleEncoding $encoding GET/POST parameters. @param integer $depth Nested frameset depth protection. @return SimplePage Parsed page. @access private" type="\string/SimpleUrl" variable="$url">
            <type by_reference="false">\string/SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="302">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="302">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
        <argument line="302">
          <name>$depth</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="318" package="SimpleTest&#10;   @subpackage WebTester">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="310">
          <description>Fetches a page or a single frame if that is the current
   focus.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url                   Target to fetch.&lt;/p&gt;</long-description>
          <tag line="310" name="param" description="GET/POST parameters. @return string Raw content of page. @access private" type="\SimpleEncoding" variable="$parameters">
            <type by_reference="false">\SimpleEncoding</type>
          </tag>
        </docblock>
        <argument line="318">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="318">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="333" package="SimpleTest&#10;   @subpackage WebTester">
        <name>loadPage</name>
        <full_name>loadPage</full_name>
        <docblock line="326">
          <description>Fetches a page and makes it the current page/frame.</description>
          <long-description>&lt;p&gt;@param string/SimpleUrl $url            Target to fetch as string.&lt;/p&gt;</long-description>
          <tag line="326" name="param" description="POST parameters. @return string Raw content of page. @access private" type="\SimplePostEncoding" variable="$parameters">
            <type by_reference="false">\SimplePostEncoding</type>
          </tag>
        </docblock>
        <argument line="333">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="333">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="350" package="SimpleTest&#10;   @subpackage WebTester">
        <name>loadFrame</name>
        <full_name>loadFrame</full_name>
        <docblock line="341">
          <description>Fetches a frame into the existing frameset replacing the
   original.</description>
          <long-description>&lt;p&gt;@param array $frames                    List of names to drill down.&lt;/p&gt;</long-description>
          <tag line="341" name="param" description="Target to fetch as string. @param SimpleFormEncoding $parameters POST parameters. @return string Raw content of page. @access private" type="\string/SimpleUrl" variable="$url">
            <type by_reference="false">\string/SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="350">
          <name>$frames</name>
          <default></default>
          <type/>
        </argument>
        <argument line="350">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="350">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="364" package="SimpleTest&#10;   @subpackage WebTester">
        <name>restart</name>
        <full_name>restart</full_name>
        <docblock line="356">
          <description>Removes expired and temporary cookies as if
   the browser was closed and re-opened.</description>
          <long-description>&lt;p&gt;@param string/integer $date   Time when session restarted.
                                 If omitted then all persistent
                                 cookies are kept.&lt;/p&gt;</long-description>
          <tag line="356" name="access" description="public"/>
        </docblock>
        <argument line="364">
          <name>$date</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="374" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addHeader</name>
        <full_name>addHeader</full_name>
        <docblock line="368">
          <description>Adds a header to every fetch.</description>
          <long-description>&lt;p&gt;@param string $header       Header line to add to every
                               request until cleared.&lt;/p&gt;</long-description>
          <tag line="368" name="access" description="public"/>
        </docblock>
        <argument line="374">
          <name>$header</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="383" package="SimpleTest&#10;   @subpackage WebTester">
        <name>ageCookies</name>
        <full_name>ageCookies</full_name>
        <docblock line="378">
          <description>Ages the cookies by the specified time.</description>
          <long-description>&lt;p&gt;@param integer $interval    Amount in seconds.&lt;/p&gt;</long-description>
          <tag line="378" name="access" description="public"/>
        </docblock>
        <argument line="383">
          <name>$interval</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="397" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setCookie</name>
        <full_name>setCookie</full_name>
        <docblock line="387">
          <description>Sets an additional cookie.</description>
          <long-description>&lt;p&gt;If a cookie has
   the same name and path it is replaced.&lt;/p&gt;</long-description>
          <tag line="387" name="param" description="Cookie key. @param string $value Value of cookie. @param string $host Host upon which the cookie is valid. @param string $path Cookie path if not host wide. @param string $expiry Expiry date. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="397">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="397">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="397">
          <name>$host</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="397">
          <name>$path</name>
          <default>'/'</default>
          <type/>
        </argument>
        <argument line="397">
          <name>$expiry</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="411" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getCookieValue</name>
        <full_name>getCookieValue</full_name>
        <docblock line="401">
          <description>Reads the most specific cookie value from the
   browser cookies.</description>
          <long-description>&lt;p&gt;@param string $host        Host to search.&lt;/p&gt;</long-description>
          <tag line="401" name="param" description="Applicable path. @param string $name Name of cookie to read. @return string False if not present, else the value as a string. @access public" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="411">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="411">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="411">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="422" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getCurrentCookieValue</name>
        <full_name>getCurrentCookieValue</full_name>
        <docblock line="415">
          <description>Reads the current cookies for the current URL.</description>
          <long-description>&lt;p&gt;@param string $name   Key of cookie to find.&lt;/p&gt;</long-description>
          <tag line="415" name="return" description="Null if there is no current URL, false&#10;                         if the cookie is not set.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="422">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="432" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setMaximumRedirects</name>
        <full_name>setMaximumRedirects</full_name>
        <docblock line="426">
          <description>Sets the maximum number of redirects before
   a page will be loaded anyway.</description>
          <long-description>&lt;p&gt;@param integer $max        Most hops allowed.&lt;/p&gt;</long-description>
          <tag line="426" name="access" description="public"/>
        </docblock>
        <argument line="432">
          <name>$max</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="442" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setMaximumNestedFrames</name>
        <full_name>setMaximumNestedFrames</full_name>
        <docblock line="436">
          <description>Sets the maximum number of nesting of framed pages
   within a framed page to prevent loops.</description>
          <long-description>&lt;p&gt;@param integer $max        Highest depth allowed.&lt;/p&gt;</long-description>
          <tag line="436" name="access" description="public"/>
        </docblock>
        <argument line="442">
          <name>$max</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="451" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setConnectionTimeout</name>
        <full_name>setConnectionTimeout</full_name>
        <docblock line="446">
          <description>Sets the socket timeout for opening a connection.</description>
          <long-description>&lt;p&gt;@param integer $timeout      Maximum time in seconds.&lt;/p&gt;</long-description>
          <tag line="446" name="access" description="public"/>
        </docblock>
        <argument line="451">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="464" package="SimpleTest&#10;   @subpackage WebTester">
        <name>useProxy</name>
        <full_name>useProxy</full_name>
        <docblock line="455">
          <description>Sets proxy to use on all requests for when
   testing from behind a firewall.</description>
          <long-description>&lt;p&gt;Set URL
   to false to disable.&lt;/p&gt;</long-description>
          <tag line="455" name="param" description="Proxy URL. @param string $username Proxy username for authentication. @param string $password Proxy password for authentication. @access public" type="string" variable="$proxy">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="464">
          <name>$proxy</name>
          <default></default>
          <type/>
        </argument>
        <argument line="464">
          <name>$username</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="464">
          <name>$password</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="477" package="SimpleTest&#10;   @subpackage WebTester">
        <name>head</name>
        <full_name>head</full_name>
        <docblock line="468">
          <description>Fetches the page content with a HEAD request.</description>
          <long-description>&lt;p&gt;Will affect cookies, but will not change the base URL.&lt;/p&gt;</long-description>
          <tag line="468" name="param" description="Target to fetch as string. @param hash/SimpleHeadEncoding $parameters Additional parameters for HEAD request. @return boolean True if successful. @access public" type="\string/SimpleUrl" variable="$url">
            <type by_reference="false">\string/SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="477">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="477">
          <name>$parameters</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="497" package="SimpleTest&#10;   @subpackage WebTester">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="489">
          <description>Fetches the page content with a simple GET request.</description>
          <long-description>&lt;p&gt;@param string/SimpleUrl $url                Target to fetch.&lt;/p&gt;</long-description>
          <tag line="489" name="param" description="Additional parameters for GET request. @return string Content of page or false. @access public" type="\hash/SimpleFormEncoding" variable="$parameters">
            <type by_reference="false">\hash/SimpleFormEncoding</type>
          </tag>
        </docblock>
        <argument line="497">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="497">
          <name>$parameters</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="515" package="SimpleTest&#10;   @subpackage WebTester">
        <name>post</name>
        <full_name>post</full_name>
        <docblock line="507">
          <description>Fetches the page content with a POST request.</description>
          <long-description>&lt;p&gt;@param string/SimpleUrl $url                Target to fetch as string.&lt;/p&gt;</long-description>
          <tag line="507" name="param" description="POST parameters or request body. @param string $content_type MIME Content-Type of the request body @return string Content of page. @access public" type="\hash/SimpleFormEncoding" variable="$parameters">
            <type by_reference="false">\hash/SimpleFormEncoding</type>
          </tag>
        </docblock>
        <argument line="515">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="515">
          <name>$parameters</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="515">
          <name>$content_type</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="533" package="SimpleTest&#10;   @subpackage WebTester">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="525">
          <description>Fetches the page content with a PUT request.</description>
          <long-description>&lt;p&gt;@param string/SimpleUrl $url                Target to fetch as string.&lt;/p&gt;</long-description>
          <tag line="525" name="param" description="PUT request body. @param string $content_type MIME Content-Type of the request body @return string Content of page. @access public" type="\hash/SimpleFormEncoding" variable="$parameters">
            <type by_reference="false">\hash/SimpleFormEncoding</type>
          </tag>
        </docblock>
        <argument line="533">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="533">
          <name>$parameters</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="533">
          <name>$content_type</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="548" package="SimpleTest&#10;   @subpackage WebTester">
        <name>delete</name>
        <full_name>delete</full_name>
        <docblock line="540">
          <description>Sends a DELETE request and fetches the response.</description>
          <long-description>&lt;p&gt;@param string/SimpleUrl $url                Target to fetch.&lt;/p&gt;</long-description>
          <tag line="540" name="param" description="Additional parameters for DELETE request. @return string Content of page or false. @access public" type="\hash/SimpleFormEncoding" variable="$parameters">
            <type by_reference="false">\hash/SimpleFormEncoding</type>
          </tag>
        </docblock>
        <argument line="548">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="548">
          <name>$parameters</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="563" package="SimpleTest&#10;   @subpackage WebTester">
        <name>retry</name>
        <full_name>retry</full_name>
        <docblock line="555">
          <description>Equivalent to hitting the retry button on the
   browser.</description>
          <long-description>&lt;p&gt;Will attempt to repeat the page fetch. If
   there is no history to repeat it will give false.&lt;/p&gt;</long-description>
          <tag line="555" name="return" description="Content if fetch succeeded&#10;                            else false.&#10;   @access public" type="\string/boolean">
            <type by_reference="false">\string/boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="588" package="SimpleTest&#10;   @subpackage WebTester">
        <name>back</name>
        <full_name>back</full_name>
        <docblock line="579">
          <description>Equivalent to hitting the back button on the
   browser.</description>
          <long-description>&lt;p&gt;The browser history is unchanged on
   failure. The page content is refetched as there
   is no concept of content caching in SimpleTest.&lt;/p&gt;</long-description>
          <tag line="579" name="return" description="True if history entry and&#10;                       fetch succeeded&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="608" package="SimpleTest&#10;   @subpackage WebTester">
        <name>forward</name>
        <full_name>forward</full_name>
        <docblock line="599">
          <description>Equivalent to hitting the forward button on the
   browser.</description>
          <long-description>&lt;p&gt;The browser history is unchanged on
   failure. The page content is refetched as there
   is no concept of content caching in SimpleTest.&lt;/p&gt;</long-description>
          <tag line="599" name="return" description="True if history entry and&#10;                       fetch succeeded&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="629" package="SimpleTest&#10;   @subpackage WebTester">
        <name>authenticate</name>
        <full_name>authenticate</full_name>
        <docblock line="619">
          <description>Retries a request after setting the authentication
   for the current realm.</description>
          <long-description>&lt;p&gt;@param string $username    Username for realm.&lt;/p&gt;</long-description>
          <tag line="619" name="param" description="Password for realm. @return boolean True if successful fetch. Note that authentication may still have failed. @access public" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="629">
          <name>$username</name>
          <default></default>
          <type/>
        </argument>
        <argument line="629">
          <name>$password</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="651" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getFrames</name>
        <full_name>getFrames</full_name>
        <docblock line="645">
          <description>Accessor for a breakdown of the frameset.</description>
          <long-description>&lt;p&gt;@return array   Hash tree of frames by name
                   or index if no name.&lt;/p&gt;</long-description>
          <tag line="645" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="663" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getFrameFocus</name>
        <full_name>getFrameFocus</full_name>
        <docblock line="655">
          <description>Accessor for current frame focus.</description>
          <long-description>&lt;p&gt;Will be
   false if no frame has focus.&lt;/p&gt;</long-description>
          <tag line="655" name="return" description="Label if any, otherwise&#10;                                     the position in the frameset&#10;                                     or false if none.&#10;   @access public" type="\integer/string/boolean">
            <type by_reference="false">\integer/string/boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="673" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setFrameFocusByIndex</name>
        <full_name>setFrameFocusByIndex</full_name>
        <docblock line="667">
          <description>Sets the focus by index.</description>
          <long-description>&lt;p&gt;The integer index starts from 1.&lt;/p&gt;</long-description>
          <tag line="667" name="param" description="Chosen frame. @return boolean True if frame exists. @access public" type="integer" variable="$choice">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="673">
          <name>$choice</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="683" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setFrameFocus</name>
        <full_name>setFrameFocus</full_name>
        <docblock line="677">
          <description>Sets the focus by name.</description>
          <long-description>&lt;p&gt;@param string $name    Chosen frame.&lt;/p&gt;</long-description>
          <tag line="677" name="return" description="True if frame exists.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="683">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="692" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clearFrameFocus</name>
        <full_name>clearFrameFocus</full_name>
        <docblock line="687">
          <description>Clears the frame focus.</description>
          <long-description>&lt;p&gt;All frames will be searched
   for content.&lt;/p&gt;</long-description>
          <tag line="687" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="701" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getTransportError</name>
        <full_name>getTransportError</full_name>
        <docblock line="696">
          <description>Accessor for last error.</description>
          <long-description>&lt;p&gt;@return string        Error from last response.&lt;/p&gt;</long-description>
          <tag line="696" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="710" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getMimeType</name>
        <full_name>getMimeType</full_name>
        <docblock line="705">
          <description>Accessor for current MIME type.</description>
          <long-description>&lt;p&gt;@return string    MIME type as string; e.g. 'text/html'&lt;/p&gt;</long-description>
          <tag line="705" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="719" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getResponseCode</name>
        <full_name>getResponseCode</full_name>
        <docblock line="714">
          <description>Accessor for last response code.</description>
          <long-description>&lt;p&gt;@return integer    Last HTTP response code received.&lt;/p&gt;</long-description>
          <tag line="714" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="729" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getAuthentication</name>
        <full_name>getAuthentication</full_name>
        <docblock line="723">
          <description>Accessor for last Authentication type.</description>
          <long-description>&lt;p&gt;Only valid
   straight after a challenge (401).&lt;/p&gt;</long-description>
          <tag line="723" name="return" description="Description of challenge type.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="739" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getRealm</name>
        <full_name>getRealm</full_name>
        <docblock line="733">
          <description>Accessor for last Authentication realm.</description>
          <long-description>&lt;p&gt;Only valid
   straight after a challenge (401).&lt;/p&gt;</long-description>
          <tag line="733" name="return" description="Name of security realm.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="749" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getUrl</name>
        <full_name>getUrl</full_name>
        <docblock line="743">
          <description>Accessor for current URL of page or frame if
   focused.</description>
          <long-description>&lt;p&gt;@return string    Location of current page or frame as
                     a string.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="758" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getBaseUrl</name>
        <full_name>getBaseUrl</full_name>
        <docblock line="754">
          <description>Accessor for base URL of page if set via BASE tag</description>
          <long-description>&lt;p&gt;@return string    base URL&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="768" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getRequest</name>
        <full_name>getRequest</full_name>
        <docblock line="763">
          <description>Accessor for raw bytes sent down the wire.</description>
          <long-description>&lt;p&gt;@return string      Original text sent.&lt;/p&gt;</long-description>
          <tag line="763" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="777" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getHeaders</name>
        <full_name>getHeaders</full_name>
        <docblock line="772">
          <description>Accessor for raw header information.</description>
          <long-description>&lt;p&gt;@return string      Header block.&lt;/p&gt;</long-description>
          <tag line="772" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="786" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getContent</name>
        <full_name>getContent</full_name>
        <docblock line="781">
          <description>Accessor for raw page information.</description>
          <long-description>&lt;p&gt;@return string      Original text content of web page.&lt;/p&gt;</long-description>
          <tag line="781" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="795" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getContentAsText</name>
        <full_name>getContentAsText</full_name>
        <docblock line="790">
          <description>Accessor for plain text version of the page.</description>
          <long-description>&lt;p&gt;@return string      Normalised text representation.&lt;/p&gt;</long-description>
          <tag line="790" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="804" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getTitle</name>
        <full_name>getTitle</full_name>
        <docblock line="799">
          <description>Accessor for parsed title.</description>
          <long-description>&lt;p&gt;@return string     Title or false if no title is present.&lt;/p&gt;</long-description>
          <tag line="799" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="814" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getUrls</name>
        <full_name>getUrls</full_name>
        <docblock line="808">
          <description>Accessor for a list of all links in current page.</description>
          <long-description>&lt;p&gt;@return array   List of urls with scheme of
                   http or https and hostname.&lt;/p&gt;</long-description>
          <tag line="808" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="825" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setField</name>
        <full_name>setField</full_name>
        <docblock line="818">
          <description>Sets all form fields with that name.</description>
          <long-description>&lt;p&gt;@param string $label   Name or label of field in forms.&lt;/p&gt;</long-description>
          <tag line="818" name="param" description="New value of field. @return boolean True if field exists, otherwise false. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="825">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="825">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="825">
          <name>$position</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="837" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setFieldByName</name>
        <full_name>setFieldByName</full_name>
        <docblock line="829">
          <description>Sets all form fields with that name.</description>
          <long-description>&lt;p&gt;Will use label if
   one is available (not yet implemented).&lt;/p&gt;</long-description>
          <tag line="829" name="param" description="Name of field in forms. @param string $value New value of field. @return boolean True if field exists, otherwise false. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="837">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="837">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="837">
          <name>$position</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="848" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setFieldById</name>
        <full_name>setFieldById</full_name>
        <docblock line="841">
          <description>Sets all form fields with that id attribute.</description>
          <long-description>&lt;p&gt;@param string/integer $id   Id of field in forms.&lt;/p&gt;</long-description>
          <tag line="841" name="param" description="New value of field. @return boolean True if field exists, otherwise false. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="848">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="848">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="861" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getField</name>
        <full_name>getField</full_name>
        <docblock line="852">
          <description>Accessor for a form element value within the page.</description>
          <long-description>&lt;p&gt;Finds the first match.&lt;/p&gt;</long-description>
          <tag line="852" name="param" description="Field label. @return string/boolean A value if the field is present, false if unchecked and null if missing. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="861">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="874" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getFieldByName</name>
        <full_name>getFieldByName</full_name>
        <docblock line="865">
          <description>Accessor for a form element value within the page.</description>
          <long-description>&lt;p&gt;Finds the first match.&lt;/p&gt;</long-description>
          <tag line="865" name="param" description="Field name. @return string/boolean A string if the field is present, false if unchecked and null if missing. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="874">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="886" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getFieldById</name>
        <full_name>getFieldById</full_name>
        <docblock line="878">
          <description>Accessor for a form element value within the page.</description>
          <long-description>&lt;p&gt;@param string/integer $id  Id of field in forms.&lt;/p&gt;</long-description>
          <tag line="878" name="return" description="A string if the field is&#10;                              present, false if unchecked&#10;                              and null if missing.&#10;   @access public" type="\string/boolean">
            <type by_reference="false">\string/boolean</type>
          </tag>
        </docblock>
        <argument line="886">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="899" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickSubmit</name>
        <full_name>clickSubmit</full_name>
        <docblock line="890">
          <description>Clicks the submit button by label.</description>
          <long-description>&lt;p&gt;The owning
   form will be submitted by this.&lt;/p&gt;</long-description>
          <tag line="890" name="param" description="Button label. An unlabeled button can be triggered by 'Submit'. @param hash $additional Additional form data. @return string/boolean Page on success. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="899">
          <name>$label</name>
          <default>'Submit'</default>
          <type/>
        </argument>
        <argument line="899">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="917" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickSubmitByName</name>
        <full_name>clickSubmitByName</full_name>
        <docblock line="909">
          <description>Clicks the submit button by name attribute.</description>
          <long-description>&lt;p&gt;The owning
   form will be submitted by this.&lt;/p&gt;</long-description>
          <tag line="909" name="param" description="Button name. @param hash $additional Additional form data. @return string/boolean Page on success. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="917">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="917">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="935" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickSubmitById</name>
        <full_name>clickSubmitById</full_name>
        <docblock line="927">
          <description>Clicks the submit button by ID attribute of the button
   itself.</description>
          <long-description>&lt;p&gt;The owning form will be submitted by this.&lt;/p&gt;</long-description>
          <tag line="927" name="param" description="Button ID. @param hash $additional Additional form data. @return string/boolean Page on success. @access public" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="935">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="935">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="952" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isSubmit</name>
        <full_name>isSubmit</full_name>
        <docblock line="945">
          <description>Tests to see if a submit button exists with this
   label.</description>
          <long-description>&lt;p&gt;@param string $label    Button label.&lt;/p&gt;</long-description>
          <tag line="945" name="return" description="True if present.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="952">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="969" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickImage</name>
        <full_name>clickImage</full_name>
        <docblock line="956">
          <description>Clicks the submit image by some kind of label.</description>
          <long-description>&lt;p&gt;Usually
   the alt tag or the nearest equivalent. The owning
   form will be submitted by this. Clicking outside of
   the boundary of the coordinates will result in
   a failure.&lt;/p&gt;</long-description>
          <tag line="956" name="param" description="ID attribute of button. @param integer $x X-coordinate of imaginary click. @param integer $y Y-coordinate of imaginary click. @param hash $additional Additional form data. @return string/boolean Page on success. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="969">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="969">
          <name>$x</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="969">
          <name>$y</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="969">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="992" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickImageByName</name>
        <full_name>clickImageByName</full_name>
        <docblock line="979">
          <description>Clicks the submit image by the name.</description>
          <long-description>&lt;p&gt;Usually
   the alt tag or the nearest equivalent. The owning
   form will be submitted by this. Clicking outside of
   the boundary of the coordinates will result in
   a failure.&lt;/p&gt;</long-description>
          <tag line="979" name="param" description="Name attribute of button. @param integer $x X-coordinate of imaginary click. @param integer $y Y-coordinate of imaginary click. @param hash $additional Additional form data. @return string/boolean Page on success. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="992">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="992">
          <name>$x</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="992">
          <name>$y</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="992">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1014" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickImageById</name>
        <full_name>clickImageById</full_name>
        <docblock line="1002">
          <description>Clicks the submit image by ID attribute.</description>
          <long-description>&lt;p&gt;The owning
   form will be submitted by this. Clicking outside of
   the boundary of the coordinates will result in
   a failure.&lt;/p&gt;</long-description>
          <tag line="1002" name="param" description="ID attribute of button. @param integer $x X-coordinate of imaginary click. @param integer $y Y-coordinate of imaginary click. @param hash $additional Additional form data. @return string/boolean Page on success. @access public" type="\integer/string" variable="$id">
            <type by_reference="false">\integer/string</type>
          </tag>
        </docblock>
        <argument line="1014">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1014">
          <name>$x</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="1014">
          <name>$y</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="1014">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1031" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isImage</name>
        <full_name>isImage</full_name>
        <docblock line="1024">
          <description>Tests to see if an image exists with this
   title or alt text.</description>
          <long-description>&lt;p&gt;@param string $label    Image text.&lt;/p&gt;</long-description>
          <tag line="1024" name="return" description="True if present.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1031">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1042" package="SimpleTest&#10;   @subpackage WebTester">
        <name>submitFormById</name>
        <full_name>submitFormById</full_name>
        <docblock line="1035">
          <description>Submits a form by the ID.</description>
          <long-description>&lt;p&gt;@param string $id       The form ID. No submit button value
                           will be sent.&lt;/p&gt;</long-description>
          <tag line="1035" name="return" description="Page on success.&#10;   @access public" type="\string/boolean">
            <type by_reference="false">\string/boolean</type>
          </tag>
        </docblock>
        <argument line="1042">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1042">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1062" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getLink</name>
        <full_name>getLink</full_name>
        <docblock line="1052">
          <description>Finds a URL by label.</description>
          <long-description>&lt;p&gt;Will find the first link
   found with this link text by default, or a later
   one if an index is given. The match ignores case and
   white space issues.&lt;/p&gt;</long-description>
          <tag line="1052" name="param" description="Text between the anchor tags. @param integer $index Link position counting from zero. @return string/boolean URL on success. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1062">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1062">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1083" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickLink</name>
        <full_name>clickLink</full_name>
        <docblock line="1073">
          <description>Follows a link by label.</description>
          <long-description>&lt;p&gt;Will click the first link
   found with this link text by default, or a later
   one if an index is given. The match ignores case and
   white space issues.&lt;/p&gt;</long-description>
          <tag line="1073" name="param" description="Text between the anchor tags. @param integer $index Link position counting from zero. @return string/boolean Page on success. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1083">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1083">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1098" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getLinkById</name>
        <full_name>getLinkById</full_name>
        <docblock line="1092">
          <description>Finds a link by id attribute.</description>
          <long-description>&lt;p&gt;@param string $id        ID attribute value.&lt;/p&gt;</long-description>
          <tag line="1092" name="return" description="URL on success.&#10;   @access public" type="\string/boolean">
            <type by_reference="false">\string/boolean</type>
          </tag>
        </docblock>
        <argument line="1098">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1108" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickLinkById</name>
        <full_name>clickLinkById</full_name>
        <docblock line="1102">
          <description>Follows a link by id attribute.</description>
          <long-description>&lt;p&gt;@param string $id        ID attribute value.&lt;/p&gt;</long-description>
          <tag line="1102" name="return" description="Page on success.&#10;   @access public" type="\string/boolean">
            <type by_reference="false">\string/boolean</type>
          </tag>
        </docblock>
        <argument line="1108">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1123" package="SimpleTest&#10;   @subpackage WebTester">
        <name>click</name>
        <full_name>click</full_name>
        <docblock line="1116">
          <description>Clicks a visible text item.</description>
          <long-description>&lt;p&gt;Will first try buttons,
   then links and then images.&lt;/p&gt;</long-description>
          <tag line="1116" name="param" description="Visible text or alt text. @return string/boolean Raw page or false. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1123">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1140" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isClickable</name>
        <full_name>isClickable</full_name>
        <docblock line="1134">
          <description>Tests to see if a click target exists.</description>
          <long-description>&lt;p&gt;@param string $label    Visible text or alt text.&lt;/p&gt;</long-description>
          <tag line="1134" name="return" description="True if target present.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1140">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/browser.php</error>
      <critical line="31" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="37" code="50018">No DocBlock was found for property $sequence</error>
      <error line="38" code="50018">No DocBlock was found for property $position</error>
      <error line="67" code="50014">Name of argument $url does not match with the DocBlock's name $parameters in recordEntry()</error>
      <error line="67" code="50015">Argument $parameters is missing from the Docblock of recordEntry()</error>
      <error line="158" code="50018">No DocBlock was found for property $user_agent</error>
      <error line="159" code="50018">No DocBlock was found for property $page</error>
      <error line="160" code="50018">No DocBlock was found for property $history</error>
      <error line="161" code="50018">No DocBlock was found for property $ignore_frames</error>
      <error line="162" code="50018">No DocBlock was found for property $maximum_nested_frames</error>
      <error line="163" code="50018">No DocBlock was found for property $parser</error>
      <error line="219" code="50015">Argument $parser is missing from the Docblock of setParser()</error>
      <error line="261" code="50015">Argument $depth is missing from the Docblock of parse()</error>
      <error line="293" code="50015">Argument $encoding is missing from the Docblock of fetch()</error>
      <error line="293" code="50015">Argument $depth is missing from the Docblock of fetch()</error>
      <error line="310" code="50014">Name of argument $url does not match with the DocBlock's name $parameters in load()</error>
      <error line="310" code="50015">Argument $parameters is missing from the Docblock of load()</error>
      <error line="326" code="50014">Name of argument $url does not match with the DocBlock's name $parameters in loadPage()</error>
      <error line="326" code="50015">Argument $parameters is missing from the Docblock of loadPage()</error>
      <error line="341" code="50014">Name of argument $frames does not match with the DocBlock's name $url in loadFrame()</error>
      <error line="341" code="50015">Argument $url is missing from the Docblock of loadFrame()</error>
      <error line="341" code="50015">Argument $parameters is missing from the Docblock of loadFrame()</error>
      <error line="356" code="50015">Argument $date is missing from the Docblock of restart()</error>
      <error line="368" code="50015">Argument $header is missing from the Docblock of addHeader()</error>
      <error line="378" code="50015">Argument $interval is missing from the Docblock of ageCookies()</error>
      <error line="387" code="50015">Argument $value is missing from the Docblock of setCookie()</error>
      <error line="387" code="50015">Argument $host is missing from the Docblock of setCookie()</error>
      <error line="387" code="50015">Argument $path is missing from the Docblock of setCookie()</error>
      <error line="387" code="50015">Argument $expiry is missing from the Docblock of setCookie()</error>
      <error line="401" code="50014">Name of argument $host does not match with the DocBlock's name $path in getCookieValue()</error>
      <error line="401" code="50015">Argument $path is missing from the Docblock of getCookieValue()</error>
      <error line="401" code="50015">Argument $name is missing from the Docblock of getCookieValue()</error>
      <error line="415" code="50015">Argument $name is missing from the Docblock of getCurrentCookieValue()</error>
      <error line="426" code="50015">Argument $max is missing from the Docblock of setMaximumRedirects()</error>
      <error line="436" code="50015">Argument $max is missing from the Docblock of setMaximumNestedFrames()</error>
      <error line="446" code="50015">Argument $timeout is missing from the Docblock of setConnectionTimeout()</error>
      <error line="455" code="50015">Argument $username is missing from the Docblock of useProxy()</error>
      <error line="455" code="50015">Argument $password is missing from the Docblock of useProxy()</error>
      <error line="468" code="50015">Argument $parameters is missing from the Docblock of head()</error>
      <error line="489" code="50014">Name of argument $url does not match with the DocBlock's name $parameters in get()</error>
      <error line="489" code="50015">Argument $parameters is missing from the Docblock of get()</error>
      <error line="507" code="50014">Name of argument $url does not match with the DocBlock's name $parameters in post()</error>
      <error line="507" code="50015">Argument $parameters is missing from the Docblock of post()</error>
      <error line="507" code="50015">Argument $content_type is missing from the Docblock of post()</error>
      <error line="525" code="50014">Name of argument $url does not match with the DocBlock's name $parameters in put()</error>
      <error line="525" code="50015">Argument $parameters is missing from the Docblock of put()</error>
      <error line="525" code="50015">Argument $content_type is missing from the Docblock of put()</error>
      <error line="540" code="50014">Name of argument $url does not match with the DocBlock's name $parameters in delete()</error>
      <error line="540" code="50015">Argument $parameters is missing from the Docblock of delete()</error>
      <error line="619" code="50014">Name of argument $username does not match with the DocBlock's name $password in authenticate()</error>
      <error line="619" code="50015">Argument $password is missing from the Docblock of authenticate()</error>
      <error line="677" code="50015">Argument $name is missing from the Docblock of setFrameFocus()</error>
      <error line="818" code="50014">Name of argument $label does not match with the DocBlock's name $value in setField()</error>
      <error line="818" code="50015">Argument $value is missing from the Docblock of setField()</error>
      <error line="818" code="50015">Argument $position is missing from the Docblock of setField()</error>
      <error line="829" code="50015">Argument $value is missing from the Docblock of setFieldByName()</error>
      <error line="829" code="50015">Argument $position is missing from the Docblock of setFieldByName()</error>
      <error line="841" code="50014">Name of argument $id does not match with the DocBlock's name $value in setFieldById()</error>
      <error line="841" code="50015">Argument $value is missing from the Docblock of setFieldById()</error>
      <error line="878" code="50015">Argument $id is missing from the Docblock of getFieldById()</error>
      <error line="890" code="50015">Argument $additional is missing from the Docblock of clickSubmit()</error>
      <error line="909" code="50015">Argument $additional is missing from the Docblock of clickSubmitByName()</error>
      <error line="927" code="50015">Argument $additional is missing from the Docblock of clickSubmitById()</error>
      <error line="945" code="50015">Argument $label is missing from the Docblock of isSubmit()</error>
      <error line="956" code="50015">Argument $x is missing from the Docblock of clickImage()</error>
      <error line="956" code="50015">Argument $y is missing from the Docblock of clickImage()</error>
      <error line="956" code="50015">Argument $additional is missing from the Docblock of clickImage()</error>
      <error line="979" code="50015">Argument $x is missing from the Docblock of clickImageByName()</error>
      <error line="979" code="50015">Argument $y is missing from the Docblock of clickImageByName()</error>
      <error line="979" code="50015">Argument $additional is missing from the Docblock of clickImageByName()</error>
      <error line="1002" code="50015">Argument $x is missing from the Docblock of clickImageById()</error>
      <error line="1002" code="50015">Argument $y is missing from the Docblock of clickImageById()</error>
      <error line="1002" code="50015">Argument $additional is missing from the Docblock of clickImageById()</error>
      <error line="1024" code="50015">Argument $label is missing from the Docblock of isImage()</error>
      <error line="1035" code="50015">Argument $id is missing from the Docblock of submitFormById()</error>
      <error line="1035" code="50015">Argument $additional is missing from the Docblock of submitFormById()</error>
      <error line="1052" code="50015">Argument $index is missing from the Docblock of getLink()</error>
      <error line="1073" code="50015">Argument $index is missing from the Docblock of clickLink()</error>
      <error line="1092" code="50015">Argument $id is missing from the Docblock of getLinkById()</error>
      <error line="1102" code="50015">Argument $id is missing from the Docblock of clickLinkById()</error>
      <error line="1134" code="50015">Argument $label is missing from the Docblock of isClickable()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/collector.php" hash="0bb96536665ddc71b4b39d1bdd395afb" package="SimpleTest\UnitTester">
    <docblock line="2">
      <description>This file contains the following classes: {@link SimpleCollector},
{@link SimplePatternCollector}.</description>
      <long-description></long-description>
      <tag line="2" name="author" description="Travis Swicegood &lt;development@domain51.com&gt;"/>
      <tag line="2" name="package" description="SimpleTest"/>
      <tag line="2" name="subpackage" description="UnitTester"/>
      <tag line="2" name="version" description="$Id: collector.php 2011 2011-04-29 08:22:48Z pp11 $"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="19" package="SimpleTest\UnitTester">
      <extends/>
      <name>SimpleCollector</name>
      <full_name>\SimpleCollector</full_name>
      <docblock line="12">
        <description>The basic collector for {@link GroupTest}</description>
        <long-description></long-description>
        <tag line="12" name="see" description="GroupTest::collect()" refers="\global\collect(),"/>
        <tag line="12" name="package" description="SimpleTest"/>
        <tag line="12" name="subpackage" description="UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="26" package="SimpleTest\UnitTester">
        <name>removeTrailingSlash</name>
        <full_name>removeTrailingSlash</full_name>
        <docblock line="21">
          <description>Strips off any kind of slash at the end so as to normalise the path.</description>
          <long-description></long-description>
          <tag line="21" name="param" description="Path to normalise." type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="21" name="return" description="Path without trailing slash." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="42" package="SimpleTest\UnitTester">
        <name>collect</name>
        <full_name>collect</full_name>
        <docblock line="36">
          <description>Scans the directory and adds what it can.</description>
          <long-description></long-description>
          <tag line="36" name="param" description="Group test with {@link GroupTest::addTestFile()} method." type="object" variable="$test">
            <type by_reference="false">object</type>
          </tag>
          <tag line="36" name="param" description="Directory to scan." type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="see" description="\global\_attemptToAdd()" refers="\global\_attemptToAdd()"/>
        </docblock>
        <argument line="42">
          <name>$test</name>
          <default></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="68" package="SimpleTest\UnitTester">
        <name>handle</name>
        <full_name>handle</full_name>
        <docblock line="55">
          <description>This method determines what should be done with a given file and adds
it via {@link GroupTest::addTestFile()} if necessary.</description>
          <long-description>&lt;p&gt;This method should be overriden to provide custom matching criteria,
such as pattern matching, recursive matching, etc.  For an example, see
{@link SimplePatternCollector::_handle()}.&lt;/p&gt;</long-description>
          <tag line="55" name="param" description="Group test with {@link GroupTest::addTestFile()} method." type="object" variable="$test">
            <type by_reference="false">object</type>
          </tag>
          <tag line="55" name="param" description="A filename as generated by {@link collect()}" type="string" variable="$filename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="see" description="\global\collect()" refers="\global\collect()"/>
          <tag line="55" name="access" description="protected"/>
        </docblock>
        <argument line="68">
          <name>$test</name>
          <default></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$file</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="82" package="SimpleTest\UnitTester">
        <name>isHidden</name>
        <full_name>isHidden</full_name>
        <docblock line="75">
          <description>Tests for hidden files so as to skip them.</description>
          <long-description>&lt;p&gt;Currently
 only tests for Unix hidden files.&lt;/p&gt;</long-description>
          <tag line="75" name="param" description="Plain filename. @return boolean True if hidden file. @access private" type="string" variable="$filename">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$filename</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="95" package="SimpleTest\UnitTester">
      <extends>\SimpleCollector</extends>
      <name>SimplePatternCollector</name>
      <full_name>\SimplePatternCollector</full_name>
      <docblock line="87">
        <description>An extension to {@link SimpleCollector} that only adds files matching a
given pattern.</description>
        <long-description></long-description>
        <tag line="87" name="package" description="SimpleTest"/>
        <tag line="87" name="subpackage" description="UnitTester"/>
        <tag line="87" name="see" description="\global\SimpleCollector" refers="\global\SimpleCollector"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="96" namespace="global" package="Default">
        <name>$pattern</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="104" package="SimpleTest\UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="98">
          <description></description>
          <long-description></long-description>
          <tag line="98" name="param" description="Perl compatible regex to test name against See {@link http://us4.php.net/manual/en/reference.pcre.pattern.syntax.php PHP's PCRE} for full documentation of valid pattern.s" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$pattern</name>
          <default>'/php$/i'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="116" package="SimpleTest\UnitTester">
        <name>handle</name>
        <full_name>handle</full_name>
        <docblock line="108">
          <description>Attempts to add files that match a given pattern.</description>
          <long-description></long-description>
          <tag line="108" name="see" description="\global\SimpleCollector::_handle()" refers="\global\SimpleCollector::_handle()"/>
          <tag line="108" name="param" description="Group test with {@link GroupTest::addTestFile()} method." type="object" variable="$test">
            <type by_reference="false">object</type>
          </tag>
          <tag line="108" name="param" description="Directory to scan." type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="108" name="access" description="protected"/>
        </docblock>
        <argument line="116">
          <name>$test</name>
          <default></default>
          <type/>
        </argument>
        <argument line="116">
          <name>$filename</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="55" code="50014">Name of argument $file does not match with the DocBlock's name $filename in handle()</error>
      <notice line="55" code="50013">Parameter $filename could not be found in handle()</notice>
      <error line="96" code="50018">No DocBlock was found for property $pattern</error>
      <error line="98" code="50012">No short description for method __construct()</error>
      <error line="108" code="50014">Name of argument $filename does not match with the DocBlock's name $path in handle()</error>
      <notice line="108" code="50013">Parameter $path could not be found in handle()</notice>
    </parse_markers>
  </file>
  <file path="test/simpletest/compatibility.php" hash="693b357674923b8de771cc9093c513e3" package="Default">
    <docblock line="2">
      <description>base include file for SimpleTest</description>
      <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
      <tag line="2" name="version" description="$Id: compatibility.php 1900 2009-07-29 11:44:37Z lastcraft $"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="13" package="Default">
      <extends/>
      <name>SimpleTestCompatibility</name>
      <full_name>\SimpleTestCompatibility</full_name>
      <docblock line="8">
        <description>Static methods for compatibility between different
 PHP versions.</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="21" package="Default">
        <name>copy</name>
        <full_name>copy</full_name>
        <docblock line="15">
          <description>Creates a copy whether in PHP5 or PHP4.</description>
          <long-description>&lt;p&gt;@param object $object     Thing to copy.&lt;/p&gt;</long-description>
          <tag line="15" name="return" description="A copy.&#10;   @access public" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="21">
          <name>$object</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="38" package="Default">
        <name>isIdentical</name>
        <full_name>isIdentical</full_name>
        <docblock line="29">
          <description>Identity test.</description>
          <long-description>&lt;p&gt;Drops back to equality + types for PHP5
   objects as the === operator counts as the
   stronger reference constraint.&lt;/p&gt;</long-description>
          <tag line="29" name="param" description="Test subject. @param mixed $second Comparison object. @return boolean True if identical. @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="38">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="55" package="Default">
        <name>isIdenticalType</name>
        <full_name>isIdenticalType</full_name>
        <docblock line="48">
          <description>Recursive type test.</description>
          <long-description>&lt;p&gt;@param mixed $first    Test subject.&lt;/p&gt;</long-description>
          <tag line="48" name="param" description="Comparison object. @return boolean True if same type. @access private" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="83" package="Default">
        <name>isArrayOfIdenticalTypes</name>
        <full_name>isArrayOfIdenticalTypes</full_name>
        <docblock line="76">
          <description>Recursive type test for each element of an array.</description>
          <long-description>&lt;p&gt;@param mixed $first    Test subject.&lt;/p&gt;</long-description>
          <tag line="76" name="param" description="Comparison object. @return boolean True if identical. @access private" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="83">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="105" package="Default">
        <name>isReference</name>
        <full_name>isReference</full_name>
        <docblock line="98">
          <description>Test for two variables being aliases.</description>
          <long-description>&lt;p&gt;@param mixed $first    Test subject.&lt;/p&gt;</long-description>
          <tag line="98" name="param" description="Comparison object. @return boolean True if same. @access public" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="105">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="131" package="Default">
        <name>isA</name>
        <full_name>isA</full_name>
        <docblock line="123">
          <description>Test to see if an object is a member of a
   class hiearchy.</description>
          <long-description>&lt;p&gt;@param object $object    Object to test.&lt;/p&gt;</long-description>
          <tag line="123" name="param" description="Root name of hiearchy. @return boolean True if class in hiearchy. @access public" type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$object</name>
          <default></default>
          <type/>
        </argument>
        <argument line="131">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="156" package="Default">
        <name>setTimeout</name>
        <full_name>setTimeout</full_name>
        <docblock line="150">
          <description>Sets a socket timeout for each chunk.</description>
          <long-description>&lt;p&gt;@param resource $handle    Socket handle.&lt;/p&gt;</long-description>
          <tag line="150" name="param" description="Limit in seconds. @access public" type="integer" variable="$timeout">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$handle</name>
          <default></default>
          <type/>
        </argument>
        <argument line="156">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="15" code="50015">Argument $object is missing from the Docblock of copy()</error>
      <error line="29" code="50015">Argument $second is missing from the Docblock of isIdentical()</error>
      <error line="48" code="50014">Name of argument $first does not match with the DocBlock's name $second in isIdenticalType()</error>
      <error line="48" code="50015">Argument $second is missing from the Docblock of isIdenticalType()</error>
      <error line="76" code="50014">Name of argument $first does not match with the DocBlock's name $second in isArrayOfIdenticalTypes()</error>
      <error line="76" code="50015">Argument $second is missing from the Docblock of isArrayOfIdenticalTypes()</error>
      <error line="98" code="50014">Name of argument $first does not match with the DocBlock's name $second in isReference()</error>
      <error line="98" code="50015">Argument $second is missing from the Docblock of isReference()</error>
      <error line="123" code="50014">Name of argument $object does not match with the DocBlock's name $class in isA()</error>
      <error line="123" code="50015">Argument $class is missing from the Docblock of isA()</error>
      <error line="150" code="50014">Name of argument $handle does not match with the DocBlock's name $timeout in setTimeout()</error>
      <error line="150" code="50015">Argument $timeout is missing from the Docblock of setTimeout()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/cookies.php" hash="8f0a1af49c148bc41194c6028285f0ab" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: cookies.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="23" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleCookie</name>
      <full_name>\SimpleCookie</full_name>
      <docblock line="15">
        <description>Cookie data holder.</description>
        <long-description>&lt;p&gt;Cookie rules are full of pretty
   arbitary stuff. I have used...
   http://wp.netscape.com/newsref/std/cookie_spec.html
   http://www.cookiecentral.com/faq/&lt;/p&gt;</long-description>
        <tag line="15" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="24" namespace="global" package="Default">
        <name>$host</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="25" namespace="global" package="Default">
        <name>$name</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="27" namespace="global" package="Default">
        <name>$path</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="28" namespace="global" package="Default">
        <name>$expiry</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="29" namespace="global" package="Default">
        <name>$is_secure</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="31">
          <description>Constructor.</description>
          <long-description>&lt;p&gt;Sets the stored values.&lt;/p&gt;</long-description>
          <tag line="31" name="param" description="Cookie key. @param string $value Value of cookie. @param string $path Cookie path if not host wide. @param string $expiry Expiry date as string. @param boolean $is_secure Currently ignored." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="39">
          <name>$value</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="39">
          <name>$path</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="39">
          <name>$expiry</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="39">
          <name>$is_secure</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="63" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setHost</name>
        <full_name>setHost</full_name>
        <docblock line="53">
          <description>Sets the host.</description>
          <long-description>&lt;p&gt;The cookie rules determine
   that the first two parts are taken for
   certain TLDs and three for others. If the
   new host does not match these rules then the
   call will fail.&lt;/p&gt;</long-description>
          <tag line="53" name="param" description="New hostname. @return boolean True if hostname is valid. @access public" type="string" variable="$host">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="77" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getHost</name>
        <full_name>getHost</full_name>
        <docblock line="71">
          <description>Accessor for the truncated host to which this
   cookie applies.</description>
          <long-description>&lt;p&gt;@return string       Truncated hostname.&lt;/p&gt;</long-description>
          <tag line="71" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isValidHost</name>
        <full_name>isValidHost</full_name>
        <docblock line="81">
          <description>Test for a cookie being valid for a host name.</description>
          <long-description>&lt;p&gt;@param string $host    Host to test against.&lt;/p&gt;</long-description>
          <tag line="81" name="return" description="True if the cookie would be valid&#10;                          here." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="98" package="SimpleTest&#10;   @subpackage WebTester">
        <name>truncateHost</name>
        <full_name>truncateHost</full_name>
        <docblock line="91">
          <description>Extracts just the domain part that determines a
   cookie's host validity.</description>
          <long-description>&lt;p&gt;@param string $host    Host name to truncate.&lt;/p&gt;</long-description>
          <tag line="91" name="return" description="Domain or false on a bad host.&#10;   @access private" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="113" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="108">
          <description>Accessor for name.</description>
          <long-description>&lt;p&gt;@return string       Cookie key.&lt;/p&gt;</long-description>
          <tag line="108" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="123" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="117">
          <description>Accessor for value.</description>
          <long-description>&lt;p&gt;A deleted cookie will
   have an empty string for this.&lt;/p&gt;</long-description>
          <tag line="117" name="return" description="Cookie value.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getPath</name>
        <full_name>getPath</full_name>
        <docblock line="127">
          <description>Accessor for path.</description>
          <long-description>&lt;p&gt;@return string       Valid cookie path.&lt;/p&gt;</long-description>
          <tag line="127" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="144" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isValidPath</name>
        <full_name>isValidPath</full_name>
        <docblock line="136">
          <description>Tests a path to see if the cookie applies
   there.</description>
          <long-description>&lt;p&gt;The test path must be longer or
   equal to the cookie path.&lt;/p&gt;</long-description>
          <tag line="136" name="param" description="Path to test against. @return boolean True if cookie valid here. @access public" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="156" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getExpiry</name>
        <full_name>getExpiry</full_name>
        <docblock line="151">
          <description>Accessor for expiry.</description>
          <long-description>&lt;p&gt;@return string       Expiry string.&lt;/p&gt;</long-description>
          <tag line="151" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="174" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isExpired</name>
        <full_name>isExpired</full_name>
        <docblock line="163">
          <description>Test to see if cookie is expired against
   the cookie format time or timestamp.</description>
          <long-description>&lt;p&gt;Will give true for a session cookie.&lt;/p&gt;</long-description>
          <tag line="163" name="param" description="Time to test against. Result will be false if this time is later than the cookie expiry. Can be either a timestamp integer or a cookie format date. @access public" type="\integer/string" variable="$now">
            <type by_reference="false">\integer/string</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$now</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="190" package="SimpleTest&#10;   @subpackage WebTester">
        <name>agePrematurely</name>
        <full_name>agePrematurely</full_name>
        <docblock line="184">
          <description>Ages the cookie by the specified number of
   seconds.</description>
          <long-description>&lt;p&gt;@param integer $interval   In seconds.&lt;/p&gt;</long-description>
          <tag line="184" name="public" description=""/>
        </docblock>
        <argument line="190">
          <name>$interval</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="201" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isSecure</name>
        <full_name>isSecure</full_name>
        <docblock line="196">
          <description>Accessor for the secure flag.</description>
          <long-description>&lt;p&gt;@return boolean       True if cookie needs SSL.&lt;/p&gt;</long-description>
          <tag line="196" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="211" package="SimpleTest&#10;   @subpackage WebTester">
        <name>fixPath</name>
        <full_name>fixPath</full_name>
        <docblock line="205">
          <description>Adds a trailing and leading slash to the path
   if missing.</description>
          <long-description>&lt;p&gt;@param string $path            Path to fix.&lt;/p&gt;</long-description>
          <tag line="205" name="access" description="private"/>
        </docblock>
        <argument line="211">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="228" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleCookieJar</name>
      <full_name>\SimpleCookieJar</full_name>
      <docblock line="222">
        <description>Repository for cookies.</description>
        <long-description>&lt;p&gt;This stuff is a
   tiny bit browser dependent.&lt;/p&gt;</long-description>
        <tag line="222" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="229" namespace="global" package="Default">
        <name>$cookies</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="235" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="231">
          <description>Constructor.</description>
          <long-description>&lt;p&gt;Jar starts empty.&lt;/p&gt;</long-description>
          <tag line="231" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="245" package="SimpleTest&#10;   @subpackage WebTester">
        <name>restartSession</name>
        <full_name>restartSession</full_name>
        <docblock line="239">
          <description>Removes expired and temporary cookies as if
   the browser was closed and re-opened.</description>
          <long-description>&lt;p&gt;@param string/integer $now   Time to test expiry against.&lt;/p&gt;</long-description>
          <tag line="239" name="access" description="public"/>
        </docblock>
        <argument line="245">
          <name>$date</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="270" package="SimpleTest&#10;   @subpackage WebTester">
        <name>agePrematurely</name>
        <full_name>agePrematurely</full_name>
        <docblock line="262">
          <description>Ages all cookies in the cookie jar.</description>
          <long-description>&lt;p&gt;@param integer $interval     The old session is moved
                                into the past by this number
                                of seconds. Cookies now over
                                age will be removed.&lt;/p&gt;</long-description>
          <tag line="262" name="access" description="public"/>
        </docblock>
        <argument line="270">
          <name>$interval</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="286" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setCookie</name>
        <full_name>setCookie</full_name>
        <docblock line="276">
          <description>Sets an additional cookie.</description>
          <long-description>&lt;p&gt;If a cookie has
   the same name and path it is replaced.&lt;/p&gt;</long-description>
          <tag line="276" name="param" description="Cookie key. @param string $value Value of cookie. @param string $host Host upon which the cookie is valid. @param string $path Cookie path if not host wide. @param string $expiry Expiry date. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="286">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="286">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="286">
          <name>$host</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="286">
          <name>$path</name>
          <default>'/'</default>
          <type/>
        </argument>
        <argument line="286">
          <name>$expiry</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="301" package="SimpleTest&#10;   @subpackage WebTester">
        <name>findFirstMatch</name>
        <full_name>findFirstMatch</full_name>
        <docblock line="294">
          <description>Finds a matching cookie to write over or the
   first empty slot if none.</description>
          <long-description>&lt;p&gt;@param SimpleCookie $cookie    Cookie to write into jar.&lt;/p&gt;</long-description>
          <tag line="294" name="return" description="Available slot.&#10;   @access private" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="301">
          <name>$cookie</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="326" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getCookieValue</name>
        <full_name>getCookieValue</full_name>
        <docblock line="315">
          <description>Reads the most specific cookie value from the
   browser cookies.</description>
          <long-description>&lt;p&gt;Looks for the longest path that
   matches.&lt;/p&gt;</long-description>
          <tag line="315" name="param" description="Host to search. @param string $path Applicable path. @param string $name Name of cookie to read. @return string False if not present, else the value as a string. @access public" type="string" variable="$host">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="326">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="326">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="326">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="350" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isMatch</name>
        <full_name>isMatch</full_name>
        <docblock line="339">
          <description>Tests cookie for matching against search
   criteria.</description>
          <long-description>&lt;p&gt;@param SimpleTest $cookie    Cookie to test.&lt;/p&gt;</long-description>
          <tag line="339" name="param" description="Host must match. @param string $path Cookie path must be shorter than this path. @param string $name Name must match. @return boolean True if matched. @access private" type="string" variable="$host">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="350">
          <name>$cookie</name>
          <default></default>
          <type/>
        </argument>
        <argument line="350">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="350">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="350">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="370" package="SimpleTest&#10;   @subpackage WebTester">
        <name>selectAsPairs</name>
        <full_name>selectAsPairs</full_name>
        <docblock line="363">
          <description>Uses a URL to sift relevant cookies by host and
   path.</description>
          <long-description>&lt;p&gt;Results are list of strings of form "name=value".&lt;/p&gt;</long-description>
          <tag line="363" name="param" description="Url to select by. @return array Valid name and value pairs. @access public" type="\SimpleUrl" variable="$url">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="370">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/cookies.php</error>
      <error line="24" code="50018">No DocBlock was found for property $host</error>
      <error line="25" code="50018">No DocBlock was found for property $name</error>
      <error line="26" code="50018">No DocBlock was found for property $value</error>
      <error line="27" code="50018">No DocBlock was found for property $path</error>
      <error line="28" code="50018">No DocBlock was found for property $expiry</error>
      <error line="29" code="50018">No DocBlock was found for property $is_secure</error>
      <error line="31" code="50015">Argument $value is missing from the Docblock of __construct()</error>
      <error line="31" code="50015">Argument $path is missing from the Docblock of __construct()</error>
      <error line="31" code="50015">Argument $expiry is missing from the Docblock of __construct()</error>
      <error line="31" code="50015">Argument $is_secure is missing from the Docblock of __construct()</error>
      <error line="81" code="50015">Argument $host is missing from the Docblock of isValidHost()</error>
      <error line="91" code="50015">Argument $host is missing from the Docblock of truncateHost()</error>
      <error line="184" code="50015">Argument $interval is missing from the Docblock of agePrematurely()</error>
      <error line="205" code="50015">Argument $path is missing from the Docblock of fixPath()</error>
      <error line="229" code="50018">No DocBlock was found for property $cookies</error>
      <error line="239" code="50015">Argument $date is missing from the Docblock of restartSession()</error>
      <error line="262" code="50015">Argument $interval is missing from the Docblock of agePrematurely()</error>
      <error line="276" code="50015">Argument $value is missing from the Docblock of setCookie()</error>
      <error line="276" code="50015">Argument $host is missing from the Docblock of setCookie()</error>
      <error line="276" code="50015">Argument $path is missing from the Docblock of setCookie()</error>
      <error line="276" code="50015">Argument $expiry is missing from the Docblock of setCookie()</error>
      <error line="294" code="50015">Argument $cookie is missing from the Docblock of findFirstMatch()</error>
      <error line="315" code="50015">Argument $path is missing from the Docblock of getCookieValue()</error>
      <error line="315" code="50015">Argument $name is missing from the Docblock of getCookieValue()</error>
      <error line="339" code="50014">Name of argument $cookie does not match with the DocBlock's name $host in isMatch()</error>
      <error line="339" code="50015">Argument $host is missing from the Docblock of isMatch()</error>
      <error line="339" code="50015">Argument $path is missing from the Docblock of isMatch()</error>
      <error line="339" code="50015">Argument $name is missing from the Docblock of isMatch()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/default_reporter.php" hash="2527cc9a628fb838370a18663a62a28e" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Optional include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: default_reporter.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="25" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends/>
      <name>SimpleCommandLineParser</name>
      <full_name>\SimpleCommandLineParser</full_name>
      <docblock line="18">
        <description>Parser for command line arguments.</description>
        <long-description>&lt;p&gt;Extracts
   the a specific test to run and engages XML
   reporting when necessary.&lt;/p&gt;</long-description>
        <tag line="18" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$to_property</name>
        <default>array('case' =&gt; 'case', 'c' =&gt; 'case', 'test' =&gt; 'test', 't' =&gt; 'test')</default>
      </property>
      <property final="false" static="false" visibility="private" line="30" namespace="global" package="Default">
        <name>$case</name>
        <default>''</default>
      </property>
      <property final="false" static="false" visibility="private" line="31" namespace="global" package="Default">
        <name>$test</name>
        <default>''</default>
      </property>
      <property final="false" static="false" visibility="private" line="32" namespace="global" package="Default">
        <name>$xml</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="33" namespace="global" package="Default">
        <name>$help</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="34" namespace="global" package="Default">
        <name>$no_skips</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="40" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="36">
          <description>Parses raw command line arguments into object properties.</description>
          <long-description>&lt;p&gt;@param string $arguments        Raw commend line arguments.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="40">
          <name>$arguments</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="67" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getTest</name>
        <full_name>getTest</full_name>
        <docblock line="63">
          <description>Run only this test.</description>
          <long-description>&lt;p&gt;@return string        Test name to run.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getTestCase</name>
        <full_name>getTestCase</full_name>
        <docblock line="71">
          <description>Run only this test suite.</description>
          <long-description>&lt;p&gt;@return string        Test class name to run.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="83" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>isXml</name>
        <full_name>isXml</full_name>
        <docblock line="79">
          <description>Output should be XML or not.</description>
          <long-description>&lt;p&gt;@return boolean        True if XML desired.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="91" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>noSkips</name>
        <full_name>noSkips</full_name>
        <docblock line="87">
          <description>Output should suppress skip messages.</description>
          <long-description>&lt;p&gt;@return boolean        True for no skips.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="99" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>help</name>
        <full_name>help</full_name>
        <docblock line="95">
          <description>Output should be a help message.</description>
          <long-description>&lt;p&gt;Disabled during XML mode.&lt;/p&gt;</long-description>
          <tag line="95" name="return" description="True if help message desired." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="107" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getHelpText</name>
        <full_name>getHelpText</full_name>
        <docblock line="103">
          <description>Returns plain-text help message for command line runner.</description>
          <long-description>&lt;p&gt;@return string         String help message&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="130" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends>\SimpleReporterDecorator</extends>
      <name>DefaultReporter</name>
      <full_name>\DefaultReporter</full_name>
      <docblock line="123">
        <description>The default reporter used by SimpleTest's autorun
   feature.</description>
        <long-description>&lt;p&gt;The actual reporters used are dependency
   injected and can be overridden.&lt;/p&gt;</long-description>
        <tag line="123" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="135" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="132">
          <description>Assembles the appropriate reporter for the environment.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/default_reporter.php</error>
      <error line="26" code="50018">No DocBlock was found for property $to_property</error>
      <error line="30" code="50018">No DocBlock was found for property $case</error>
      <error line="31" code="50018">No DocBlock was found for property $test</error>
      <error line="32" code="50018">No DocBlock was found for property $xml</error>
      <error line="33" code="50018">No DocBlock was found for property $help</error>
      <error line="34" code="50018">No DocBlock was found for property $no_skips</error>
      <error line="36" code="50015">Argument $arguments is missing from the Docblock of __construct()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/detached.php" hash="ed7bb5df90a58f3535ee327929047623" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: detached.php 1784 2008-04-26 13:07:14Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="21" package="Default">
      <extends/>
      <name>DetachedTestCase</name>
      <full_name>\DetachedTestCase</full_name>
      <docblock line="16">
        <description>Runs an XML formated test in a separate process.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="16" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$command</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="23" namespace="global" package="Default">
        <name>$dry_command</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="24" namespace="global" package="Default">
        <name>$size</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="26">
          <description>Sets the location of the remote test.</description>
          <long-description>&lt;p&gt;@param string $command       Test script.&lt;/p&gt;</long-description>
          <tag line="26" name="param" description="Script for dry run. @access public" type="string" variable="$dry_command">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$command</name>
          <default></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$dry_command</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="43" package="Default">
        <name>getLabel</name>
        <full_name>getLabel</full_name>
        <docblock line="38">
          <description>Accessor for the test name for subclasses.</description>
          <long-description>&lt;p&gt;@return string       Name of the test.&lt;/p&gt;</long-description>
          <tag line="38" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="55" package="Default">
        <name>run</name>
        <full_name>run</full_name>
        <docblock line="47">
          <description>Runs the top level test for this class.</description>
          <long-description>&lt;p&gt;Currently
   reads the data as a single chunk. I'll fix this
   once I have added iteration to the browser.&lt;/p&gt;</long-description>
          <tag line="47" name="param" description="Target of test results. @returns boolean True if no failures. @access public" type="\SimpleReporter" variable="$reporter">
            <type by_reference="false">\SimpleReporter</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$reporter</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="Default">
        <name>getSize</name>
        <full_name>getSize</full_name>
        <docblock line="66">
          <description>Accessor for the number of subtests.</description>
          <long-description>&lt;p&gt;@return integer       Number of test cases.&lt;/p&gt;</long-description>
          <tag line="66" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="92" package="Default">
        <name>createParser</name>
        <full_name>createParser</full_name>
        <docblock line="86">
          <description>Creates the XML parser.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $reporter    Target of test results.&lt;/p&gt;</long-description>
          <tag line="86" name="return" description="XML reader.&#10;   @access protected" type="\SimpleTestXmlListener">
            <type by_reference="false">\SimpleTestXmlListener</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$reporter</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/detached.php</error>
      <critical line="16" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="22" code="50018">No DocBlock was found for property $command</error>
      <error line="23" code="50018">No DocBlock was found for property $dry_command</error>
      <error line="24" code="50018">No DocBlock was found for property $size</error>
      <error line="26" code="50014">Name of argument $command does not match with the DocBlock's name $dry_command in __construct()</error>
      <error line="26" code="50015">Argument $dry_command is missing from the Docblock of __construct()</error>
      <error line="86" code="50015">Argument $reporter is missing from the Docblock of createParser()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/dumper.php" hash="c4ee7db3b1d2a12fae66a2aa3d5b0416" package="Default">
    <docblock line="2">
      <description>base include file for SimpleTest</description>
      <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
      <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: dumper.php 1909 2009-07-29 15:58:11Z dgheath $"/>
    </docblock>
    <constant namespace="global" line="12" package="Default">
      <name>TYPE_MATTERS</name>
      <full_name>\TYPE_MATTERS</full_name>
      <value>true</value>
    </constant>
    <class final="false" abstract="false" namespace="global" line="20" package="Default">
      <extends/>
      <name>SimpleDumper</name>
      <full_name>\SimpleDumper</full_name>
      <docblock line="15">
        <description>Displays variables as text and does diffs.</description>
        <long-description>&lt;p&gt;@package  SimpleTest&lt;/p&gt;</long-description>
        <tag line="15" name="subpackage" description="UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Default">
        <name>describeValue</name>
        <full_name>describeValue</full_name>
        <docblock line="22">
          <description>Renders a variable in a shorter form than print_r().</description>
          <long-description>&lt;p&gt;@param mixed $value      Variable to render as a string.&lt;/p&gt;</long-description>
          <tag line="22" name="return" description="Human readable string form.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="53" package="Default">
        <name>getType</name>
        <full_name>getType</full_name>
        <docblock line="47">
          <description>Gets the string representation of a type.</description>
          <long-description>&lt;p&gt;@param mixed $value    Variable to check against.&lt;/p&gt;</long-description>
          <tag line="47" name="return" description="Type.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="Default">
        <name>describeDifference</name>
        <full_name>describeDifference</full_name>
        <docblock line="74">
          <description>Creates a human readable description of the
   difference between two variables.</description>
          <long-description>&lt;p&gt;Uses a
   dynamic call.&lt;/p&gt;</long-description>
          <tag line="74" name="param" description="First variable. @param mixed $second Value to compare with. @param boolean $identical If true then type anomolies count. @return string Description of difference. @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$identical</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="106" package="Default">
        <name>isTypeMatch</name>
        <full_name>isTypeMatch</full_name>
        <docblock line="99">
          <description>Tests to see if types match.</description>
          <long-description>&lt;p&gt;@param mixed $first        First variable.&lt;/p&gt;</long-description>
          <tag line="99" name="param" description="Value to compare with. @return boolean True if matches. @access private" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="106">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="118" package="Default">
        <name>clipString</name>
        <full_name>clipString</full_name>
        <docblock line="110">
          <description>Clips a string to a maximum length.</description>
          <long-description>&lt;p&gt;@param string $value         String to truncate.&lt;/p&gt;</long-description>
          <tag line="110" name="param" description="Minimum string size to show. @param integer $position Centre of string section. @return string Shortened version. @access public" type="integer" variable="$size">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="118">
          <name>$size</name>
          <default></default>
          <type/>
        </argument>
        <argument line="118">
          <name>$position</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="141" package="Default">
        <name>describeGenericDifference</name>
        <full_name>describeGenericDifference</full_name>
        <docblock line="132">
          <description>Creates a human readable description of the
   difference between two variables.</description>
          <long-description>&lt;p&gt;The minimal
   version.&lt;/p&gt;</long-description>
          <tag line="132" name="param" description="First value. @param mixed $second Value to compare with. @return string Human readable description. @access private" type="null" variable="$first">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="141">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="141">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="156" package="Default">
        <name>describeNullDifference</name>
        <full_name>describeNullDifference</full_name>
        <docblock line="147">
          <description>Creates a human readable description of the
   difference between a null and another variable.</description>
          <long-description>&lt;p&gt;@param null $first          First null.&lt;/p&gt;</long-description>
          <tag line="147" name="param" description="Null to compare with. @param boolean $identical If true then type anomolies count. @return string Human readable description. @access private" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="156">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="156">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="156">
          <name>$identical</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="169" package="Default">
        <name>describeBooleanDifference</name>
        <full_name>describeBooleanDifference</full_name>
        <docblock line="160">
          <description>Creates a human readable description of the
   difference between a boolean and another variable.</description>
          <long-description>&lt;p&gt;@param boolean $first       First boolean.&lt;/p&gt;</long-description>
          <tag line="160" name="param" description="Boolean to compare with. @param boolean $identical If true then type anomolies count. @return string Human readable description. @access private" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="169">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="169">
          <name>$identical</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="182" package="Default">
        <name>describeStringDifference</name>
        <full_name>describeStringDifference</full_name>
        <docblock line="173">
          <description>Creates a human readable description of the
   difference between a string and another variable.</description>
          <long-description>&lt;p&gt;@param string $first        First string.&lt;/p&gt;</long-description>
          <tag line="173" name="param" description="String to compare with. @param boolean $identical If true then type anomolies count. @return string Human readable description. @access private" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="182">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="182">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="182">
          <name>$identical</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="203" package="Default">
        <name>describeIntegerDifference</name>
        <full_name>describeIntegerDifference</full_name>
        <docblock line="194">
          <description>Creates a human readable description of the
   difference between an integer and another variable.</description>
          <long-description>&lt;p&gt;@param integer $first       First number.&lt;/p&gt;</long-description>
          <tag line="194" name="param" description="Number to compare with. @param boolean $identical If true then type anomolies count. @return string Human readable description. @access private" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="203">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="203">
          <name>$identical</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="222" package="Default">
        <name>describeFloatDifference</name>
        <full_name>describeFloatDifference</full_name>
        <docblock line="213">
          <description>Creates a human readable description of the
   difference between two floating point numbers.</description>
          <long-description>&lt;p&gt;@param float $first         First float.&lt;/p&gt;</long-description>
          <tag line="213" name="param" description="Float to compare with. @param boolean $identical If true then type anomolies count. @return string Human readable description. @access private" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="222">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="222">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="222">
          <name>$identical</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="241" package="Default">
        <name>describeArrayDifference</name>
        <full_name>describeArrayDifference</full_name>
        <docblock line="232">
          <description>Creates a human readable description of the
   difference between two arrays.</description>
          <long-description>&lt;p&gt;@param array $first         First array.&lt;/p&gt;</long-description>
          <tag line="232" name="param" description="Array to compare with. @param boolean $identical If true then type anomolies count. @return string Human readable description. @access private" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="241">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="241">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="241">
          <name>$identical</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="275" package="Default">
        <name>isMatchingKeys</name>
        <full_name>isMatchingKeys</full_name>
        <docblock line="265">
          <description>Compares two arrays to see if their key lists match.</description>
          <long-description>&lt;p&gt;For an identical match, the ordering and types of the keys
   is significant.&lt;/p&gt;</long-description>
          <tag line="265" name="param" description="First array. @param array $second Array to compare with. @param boolean $identical If true then type anomolies count. @return boolean True if matching. @access private" type="array" variable="$first">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="275">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="275">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="275">
          <name>$identical</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="295" package="Default">
        <name>describeResourceDifference</name>
        <full_name>describeResourceDifference</full_name>
        <docblock line="286">
          <description>Creates a human readable description of the
   difference between a resource and another variable.</description>
          <long-description>&lt;p&gt;@param resource $first       First resource.&lt;/p&gt;</long-description>
          <tag line="286" name="param" description="Resource to compare with. @param boolean $identical If true then type anomolies count. @return string Human readable description. @access private" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="295">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="295">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="295">
          <name>$identical</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="307" package="Default">
        <name>describeObjectDifference</name>
        <full_name>describeObjectDifference</full_name>
        <docblock line="299">
          <description>Creates a human readable description of the
   difference between two objects.</description>
          <long-description>&lt;p&gt;@param object $first        First object.&lt;/p&gt;</long-description>
          <tag line="299" name="param" description="Object to compare with. @param boolean $identical If true then type anomolies count. @return string Human readable description." type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="307">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="307">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="307">
          <name>$identical</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="324" package="Default">
        <name>getMembers</name>
        <full_name>getMembers</full_name>
        <docblock line="317">
          <description>Get all members of an object including private and protected ones.</description>
          <long-description>&lt;p&gt;A safer form of casting to an array.&lt;/p&gt;</long-description>
          <tag line="317" name="param" description="Object to list members of, including private ones. @return array Names and values in the object." type="object" variable="$object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="324">
          <name>$object</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="347" package="Default">
        <name>getPrivatePropertyNoMatterWhat</name>
        <full_name>getPrivatePropertyNoMatterWhat</full_name>
        <docblock line="341">
          <description>Extracts a private member's value when reflection won't play ball.</description>
          <long-description>&lt;p&gt;@param string $name        Property name.&lt;/p&gt;</long-description>
          <tag line="341" name="param" description="Object to read. @return mixed Value of property." type="object" variable="$object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="347">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="347">
          <name>$object</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="361" package="Default">
        <name>unmangle</name>
        <full_name>unmangle</full_name>
        <docblock line="355">
          <description>Removes crud from property name after it's been converted
   to an array.</description>
          <long-description>&lt;p&gt;@param string $mangled     Name from array cast.&lt;/p&gt;</long-description>
          <tag line="355" name="return" description="Cleaned up name." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="361">
          <name>$mangled</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="375" package="Default">
        <name>stringDiffersAt</name>
        <full_name>stringDiffersAt</full_name>
        <docblock line="366">
          <description>Find the first character position that differs
   in two strings by binary chop.</description>
          <long-description>&lt;p&gt;@param string $first        First string.&lt;/p&gt;</long-description>
          <tag line="366" name="param" description="String to compare with. @return integer Position of first differing character. @access private" type="string" variable="$second">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="375">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="375">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="399" package="Default">
        <name>dump</name>
        <full_name>dump</full_name>
        <docblock line="393">
          <description>Sends a formatted dump of a variable to a string.</description>
          <long-description>&lt;p&gt;@param mixed $variable    Variable to display.&lt;/p&gt;</long-description>
          <tag line="393" name="return" description="Output from print_r().&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="399">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <critical line="15" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="22" code="50015">Argument $value is missing from the Docblock of describeValue()</error>
      <error line="47" code="50015">Argument $value is missing from the Docblock of getType()</error>
      <error line="74" code="50015">Argument $second is missing from the Docblock of describeDifference()</error>
      <error line="74" code="50015">Argument $identical is missing from the Docblock of describeDifference()</error>
      <error line="99" code="50014">Name of argument $first does not match with the DocBlock's name $second in isTypeMatch()</error>
      <error line="99" code="50015">Argument $second is missing from the Docblock of isTypeMatch()</error>
      <error line="110" code="50014">Name of argument $value does not match with the DocBlock's name $size in clipString()</error>
      <error line="110" code="50015">Argument $size is missing from the Docblock of clipString()</error>
      <error line="110" code="50015">Argument $position is missing from the Docblock of clipString()</error>
      <error line="132" code="50015">Argument $second is missing from the Docblock of describeGenericDifference()</error>
      <error line="147" code="50014">Name of argument $first does not match with the DocBlock's name $second in describeNullDifference()</error>
      <error line="147" code="50015">Argument $second is missing from the Docblock of describeNullDifference()</error>
      <error line="147" code="50015">Argument $identical is missing from the Docblock of describeNullDifference()</error>
      <error line="160" code="50014">Name of argument $first does not match with the DocBlock's name $second in describeBooleanDifference()</error>
      <error line="160" code="50015">Argument $second is missing from the Docblock of describeBooleanDifference()</error>
      <error line="160" code="50015">Argument $identical is missing from the Docblock of describeBooleanDifference()</error>
      <error line="173" code="50014">Name of argument $first does not match with the DocBlock's name $second in describeStringDifference()</error>
      <error line="173" code="50015">Argument $second is missing from the Docblock of describeStringDifference()</error>
      <error line="173" code="50015">Argument $identical is missing from the Docblock of describeStringDifference()</error>
      <error line="194" code="50014">Name of argument $first does not match with the DocBlock's name $second in describeIntegerDifference()</error>
      <error line="194" code="50015">Argument $second is missing from the Docblock of describeIntegerDifference()</error>
      <error line="194" code="50015">Argument $identical is missing from the Docblock of describeIntegerDifference()</error>
      <error line="213" code="50014">Name of argument $first does not match with the DocBlock's name $second in describeFloatDifference()</error>
      <error line="213" code="50015">Argument $second is missing from the Docblock of describeFloatDifference()</error>
      <error line="213" code="50015">Argument $identical is missing from the Docblock of describeFloatDifference()</error>
      <error line="232" code="50014">Name of argument $first does not match with the DocBlock's name $second in describeArrayDifference()</error>
      <error line="232" code="50015">Argument $second is missing from the Docblock of describeArrayDifference()</error>
      <error line="232" code="50015">Argument $identical is missing from the Docblock of describeArrayDifference()</error>
      <error line="265" code="50015">Argument $second is missing from the Docblock of isMatchingKeys()</error>
      <error line="265" code="50015">Argument $identical is missing from the Docblock of isMatchingKeys()</error>
      <error line="286" code="50014">Name of argument $first does not match with the DocBlock's name $second in describeResourceDifference()</error>
      <error line="286" code="50015">Argument $second is missing from the Docblock of describeResourceDifference()</error>
      <error line="286" code="50015">Argument $identical is missing from the Docblock of describeResourceDifference()</error>
      <error line="299" code="50014">Name of argument $first does not match with the DocBlock's name $second in describeObjectDifference()</error>
      <error line="299" code="50015">Argument $second is missing from the Docblock of describeObjectDifference()</error>
      <error line="299" code="50015">Argument $identical is missing from the Docblock of describeObjectDifference()</error>
      <error line="341" code="50014">Name of argument $name does not match with the DocBlock's name $object in getPrivatePropertyNoMatterWhat()</error>
      <error line="341" code="50015">Argument $object is missing from the Docblock of getPrivatePropertyNoMatterWhat()</error>
      <error line="355" code="50015">Argument $mangled is missing from the Docblock of unmangle()</error>
      <error line="366" code="50014">Name of argument $first does not match with the DocBlock's name $second in stringDiffersAt()</error>
      <error line="366" code="50015">Argument $second is missing from the Docblock of stringDiffersAt()</error>
      <error line="393" code="50015">Argument $variable is missing from the Docblock of dump()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/eclipse.php" hash="266f6bed8198de2c6bcff94b411a1161" package="Default">
    <include line="11" type="Include Once" package="Default">
      <name>unit_tester.php</name>
      <docblock line="2">
        <description>base include file for eclipse plugin</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="Eclipse&#10; @version    $Id: eclipse.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <include line="12" type="Include Once" package="Default">
      <name>test_case.php</name>
    </include>
    <include line="13" type="Include Once" package="Default">
      <name>invoker.php</name>
    </include>
    <include line="14" type="Include Once" package="Default">
      <name>socket.php</name>
    </include>
    <include line="15" type="Include Once" package="Default">
      <name>mock_objects.php</name>
    </include>
    <class final="false" abstract="false" namespace="global" line="23" package="Default">
      <extends>\SimpleScorer</extends>
      <name>EclipseReporter</name>
      <full_name>\EclipseReporter</full_name>
      <docblock line="18">
        <description>base reported class for eclipse plugin</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="18" name="subpackage" description="Eclipse"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="30" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="25">
          <description>Reporter to be run inside of Eclipse interface.</description>
          <long-description>&lt;p&gt;@param object $listener   Eclipse listener (?).&lt;/p&gt;</long-description>
          <tag line="25" name="param" description="Whether to include test coverage." type="boolean" variable="$cc">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$listener</name>
          <default></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$cc</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Default">
        <name>getDumper</name>
        <full_name>getDumper</full_name>
        <docblock line="41">
          <description>Means to display human readable object comparisons.</description>
          <long-description>&lt;p&gt;@return SimpleDumper        Visual comparer.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="55" package="Default">
        <name>createListener</name>
        <full_name>createListener</full_name>
        <docblock line="49">
          <description>Localhost connection from Eclipse.</description>
          <long-description>&lt;p&gt;@param integer $port      Port to connect to Eclipse.&lt;/p&gt;</long-description>
          <tag line="49" name="param" description="Normally localhost. @return SimpleSocket Connection to Eclipse." type="string" variable="$host">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$host</name>
          <default>"127.0.0.1"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="Default">
        <name>createInvoker</name>
        <full_name>createInvoker</full_name>
        <docblock line="60">
          <description>Wraps the test in an output buffer.</description>
          <long-description>&lt;p&gt;@param SimpleInvoker $invoker     Current test runner.&lt;/p&gt;</long-description>
          <tag line="60" name="return" description="Decorator with output buffering.&#10;   @access public" type="\EclipseInvoker">
            <type by_reference="false">\EclipseInvoker</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$invoker</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Default">
        <name>escapeVal</name>
        <full_name>escapeVal</full_name>
        <docblock line="71">
          <description>C style escaping.</description>
          <long-description>&lt;p&gt;@param string $raw    String with backslashes, quotes and whitespace.&lt;/p&gt;</long-description>
          <tag line="71" name="return" description="Replaced with C backslashed tokens." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$raw</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="88" package="Default">
        <name>paintPass</name>
        <full_name>paintPass</full_name>
        <docblock line="82">
          <description>Stash the first passing item.</description>
          <long-description>&lt;p&gt;Clicking the test
   item goes to first pass.&lt;/p&gt;</long-description>
          <tag line="82" name="param" description="Test message, but we only wnat the first. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="101" package="Default">
        <name>paintFail</name>
        <full_name>paintFail</full_name>
        <docblock line="95">
          <description>Stash the first failing item.</description>
          <long-description>&lt;p&gt;Clicking the test
   item goes to first fail.&lt;/p&gt;</long-description>
          <tag line="95" name="param" description="Test message, but we only wnat the first. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="116" package="Default">
        <name>paintError</name>
        <full_name>paintError</full_name>
        <docblock line="110">
          <description>Stash the first error.</description>
          <long-description>&lt;p&gt;Clicking the test
   item goes to first error.&lt;/p&gt;</long-description>
          <tag line="110" name="param" description="Test message, but we only wnat the first. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="131" package="Default">
        <name>paintException</name>
        <full_name>paintException</full_name>
        <docblock line="125">
          <description>Stash the first exception.</description>
          <long-description>&lt;p&gt;Clicking the test
   item goes to first message.&lt;/p&gt;</long-description>
          <tag line="125" name="param" description="Test message, but we only wnat the first. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$exception</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="152" package="Default">
        <name>paintHeader</name>
        <full_name>paintHeader</full_name>
        <docblock line="146">
          <description>We don't display any special header.</description>
          <long-description>&lt;p&gt;@param string $test_name     First test top level
                                to start.&lt;/p&gt;</long-description>
          <tag line="146" name="access" description="public"/>
        </docblock>
        <argument line="152">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="160" package="Default">
        <name>paintFooter</name>
        <full_name>paintFooter</full_name>
        <docblock line="155">
          <description>We don't display any special footer.</description>
          <long-description>&lt;p&gt;@param string $test_name        The top level test.&lt;/p&gt;</long-description>
          <tag line="155" name="access" description="public"/>
        </docblock>
        <argument line="160">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="169" package="Default">
        <name>paintMethodStart</name>
        <full_name>paintMethodStart</full_name>
        <docblock line="163">
          <description>Paints nothing at the start of a test method, but stash
   the method name for later.</description>
          <long-description>&lt;p&gt;@param string $test_name   Name of test that is starting.&lt;/p&gt;</long-description>
          <tag line="163" name="access" description="public"/>
        </docblock>
        <argument line="169">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="182" package="Default">
        <name>paintMethodEnd</name>
        <full_name>paintMethodEnd</full_name>
        <docblock line="176">
          <description>Only send one message if the test passes, after that
   suppress the message.</description>
          <long-description>&lt;p&gt;@param string $test_name   Name of test that is ending.&lt;/p&gt;</long-description>
          <tag line="176" name="access" description="public"/>
        </docblock>
        <argument line="182">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="197" package="Default">
        <name>paintCaseStart</name>
        <full_name>paintCaseStart</full_name>
        <docblock line="192">
          <description>Stashes the test case name for the later failure message.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="192" name="access" description="public"/>
        </docblock>
        <argument line="197">
          <name>$case</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="206" package="Default">
        <name>paintCaseEnd</name>
        <full_name>paintCaseEnd</full_name>
        <docblock line="201">
          <description>Drops the name.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="201" name="access" description="public"/>
        </docblock>
        <argument line="206">
          <name>$case</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="217" package="Default">
        <name>paintGroupStart</name>
        <full_name>paintGroupStart</full_name>
        <docblock line="210">
          <description>Stashes the name of the test suite.</description>
          <long-description>&lt;p&gt;Starts test coverage
   if enabled.&lt;/p&gt;</long-description>
          <tag line="210" name="param" description="Name of test or other label. @param integer $size Number of test cases starting. @access public" type="string" variable="$group">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="217">
          <name>$group</name>
          <default></default>
          <type/>
        </argument>
        <argument line="217">
          <name>$size</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="231" package="Default">
        <name>paintGroupEnd</name>
        <full_name>paintGroupEnd</full_name>
        <docblock line="226">
          <description>Paints coverage report if enabled.</description>
          <long-description>&lt;p&gt;@param string $group     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="226" name="access" description="public"/>
        </docblock>
        <argument line="231">
          <name>$group</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="275" package="SimpleTest&#10; @subpackage Eclipse">
      <extends>\SimpleInvokerDecorator</extends>
      <name>EclipseInvoker</name>
      <full_name>\EclipseInvoker</full_name>
      <docblock line="269">
        <description>Invoker decorator for Eclipse.</description>
        <long-description>&lt;p&gt;Captures output until
 the end of the test.&lt;/p&gt;</long-description>
        <tag line="269" name="package" description="SimpleTest&#10; @subpackage Eclipse"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="276" package="SimpleTest&#10; @subpackage Eclipse">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="276">
          <name>$invoker</name>
          <default></default>
          <type/>
        </argument>
        <argument line="276">
          <name>$listener</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="286" package="SimpleTest&#10; @subpackage Eclipse">
        <name>before</name>
        <full_name>before</full_name>
        <docblock line="281">
          <description>Starts output buffering.</description>
          <long-description>&lt;p&gt;@param string $method    Test method to call.&lt;/p&gt;</long-description>
          <tag line="281" name="access" description="public"/>
        </docblock>
        <argument line="286">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="297" package="SimpleTest&#10; @subpackage Eclipse">
        <name>after</name>
        <full_name>after</full_name>
        <docblock line="291">
          <description>Stops output buffering and send the captured output
   to the listener.</description>
          <long-description>&lt;p&gt;@param string $method    Test method to call.&lt;/p&gt;</long-description>
          <tag line="291" name="access" description="public"/>
        </docblock>
        <argument line="297">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/eclipse.php</error>
      <critical line="18" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="25" code="50014">Name of argument $listener does not match with the DocBlock's name $cc in __construct()</error>
      <error line="25" code="50015">Argument $cc is missing from the Docblock of __construct()</error>
      <error line="49" code="50014">Name of argument $port does not match with the DocBlock's name $host in createListener()</error>
      <error line="49" code="50015">Argument $host is missing from the Docblock of createListener()</error>
      <error line="60" code="50015">Argument $invoker is missing from the Docblock of createInvoker()</error>
      <error line="71" code="50015">Argument $raw is missing from the Docblock of escapeVal()</error>
      <error line="125" code="50014">Name of argument $exception does not match with the DocBlock's name $message in paintException()</error>
      <notice line="125" code="50013">Parameter $message could not be found in paintException()</notice>
      <error line="146" code="50015">Argument $test_name is missing from the Docblock of paintHeader()</error>
      <error line="155" code="50015">Argument $test_name is missing from the Docblock of paintFooter()</error>
      <error line="163" code="50015">Argument $method is missing from the Docblock of paintMethodStart()</error>
      <error line="176" code="50015">Argument $method is missing from the Docblock of paintMethodEnd()</error>
      <error line="192" code="50015">Argument $case is missing from the Docblock of paintCaseStart()</error>
      <error line="201" code="50015">Argument $case is missing from the Docblock of paintCaseEnd()</error>
      <error line="210" code="50015">Argument $size is missing from the Docblock of paintGroupStart()</error>
      <error line="226" code="50015">Argument $group is missing from the Docblock of paintGroupEnd()</error>
      <error line="276" code="50010">No DocBlock was found for method __construct()</error>
      <error line="281" code="50015">Argument $method is missing from the Docblock of before()</error>
      <error line="291" code="50015">Argument $method is missing from the Docblock of after()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/encoding.php" hash="744c19ced7fc56fa0b68654b06a0b410" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: encoding.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="20" package="Default">
      <extends/>
      <name>SimpleEncodedPair</name>
      <full_name>\SimpleEncodedPair</full_name>
      <docblock line="15">
        <description>Single post parameter.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="15" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="21" namespace="global" package="Default">
        <name>$key</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="29" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="24">
          <description>Stashes the data for rendering later.</description>
          <long-description>&lt;p&gt;@param string $key       Form element name.&lt;/p&gt;</long-description>
          <tag line="24" name="param" description="Data to send." type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="29">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="Default">
        <name>asRequest</name>
        <full_name>asRequest</full_name>
        <docblock line="34">
          <description>The pair as a single string.</description>
          <long-description>&lt;p&gt;@return string        Encoded pair.&lt;/p&gt;</long-description>
          <tag line="34" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="Default">
        <name>asMime</name>
        <full_name>asMime</full_name>
        <docblock line="43">
          <description>The MIME part as a string.</description>
          <long-description>&lt;p&gt;@return string        MIME part encoding.&lt;/p&gt;</long-description>
          <tag line="43" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="61" package="Default">
        <name>isKey</name>
        <full_name>isKey</full_name>
        <docblock line="55">
          <description>Is this the value we are looking for?</description>
          <long-description>&lt;p&gt;@param string $key    Identifier.&lt;/p&gt;</long-description>
          <tag line="55" name="return" description="True if matched.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="70" package="Default">
        <name>getKey</name>
        <full_name>getKey</full_name>
        <docblock line="65">
          <description>Is this the value we are looking for?</description>
          <long-description>&lt;p&gt;@return string       Identifier.&lt;/p&gt;</long-description>
          <tag line="65" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="79" package="Default">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="74">
          <description>Is this the value we are looking for?</description>
          <long-description>&lt;p&gt;@return string       Content.&lt;/p&gt;</long-description>
          <tag line="74" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="89" package="Default">
      <extends/>
      <name>SimpleAttachment</name>
      <full_name>\SimpleAttachment</full_name>
      <docblock line="84">
        <description>Single post parameter.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="84" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="90" namespace="global" package="Default">
        <name>$key</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="91" namespace="global" package="Default">
        <name>$content</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="92" namespace="global" package="Default">
        <name>$filename</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="100" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="94">
          <description>Stashes the data for rendering later.</description>
          <long-description>&lt;p&gt;@param string $key          Key to add value to.&lt;/p&gt;</long-description>
          <tag line="94" name="param" description="Raw data. @param hash $filename Original filename." type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="100">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
        <argument line="100">
          <name>$filename</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="111" package="Default">
        <name>asRequest</name>
        <full_name>asRequest</full_name>
        <docblock line="106">
          <description>The pair as a single string.</description>
          <long-description>&lt;p&gt;@return string        Encoded pair.&lt;/p&gt;</long-description>
          <tag line="106" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="120" package="Default">
        <name>asMime</name>
        <full_name>asMime</full_name>
        <docblock line="115">
          <description>The MIME part as a string.</description>
          <long-description>&lt;p&gt;@return string        MIME part encoding.&lt;/p&gt;</long-description>
          <tag line="115" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="135" package="Default">
        <name>deduceMimeType</name>
        <full_name>deduceMimeType</full_name>
        <docblock line="129">
          <description>Attempts to figure out the MIME type from the
   file extension and the content.</description>
          <long-description>&lt;p&gt;@return string        MIME type.&lt;/p&gt;</long-description>
          <tag line="129" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="147" package="Default">
        <name>isOnlyAscii</name>
        <full_name>isOnlyAscii</full_name>
        <docblock line="142">
          <description>Tests each character is in the range 0-127.</description>
          <long-description>&lt;p&gt;@param string $ascii    String to test.&lt;/p&gt;</long-description>
          <tag line="142" name="access" description="private"/>
        </docblock>
        <argument line="147">
          <name>$ascii</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="162" package="Default">
        <name>isKey</name>
        <full_name>isKey</full_name>
        <docblock line="156">
          <description>Is this the value we are looking for?</description>
          <long-description>&lt;p&gt;@param string $key    Identifier.&lt;/p&gt;</long-description>
          <tag line="156" name="return" description="True if matched.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="171" package="Default">
        <name>getKey</name>
        <full_name>getKey</full_name>
        <docblock line="166">
          <description>Is this the value we are looking for?</description>
          <long-description>&lt;p&gt;@return string       Identifier.&lt;/p&gt;</long-description>
          <tag line="166" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="180" package="Default">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="175">
          <description>Is this the value we are looking for?</description>
          <long-description>&lt;p&gt;@return string       Content.&lt;/p&gt;</long-description>
          <tag line="175" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="191" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleEncoding</name>
      <full_name>\SimpleEncoding</full_name>
      <docblock line="185">
        <description>Bundle of GET/POST parameters.</description>
        <long-description>&lt;p&gt;Can include
   repeated parameters.&lt;/p&gt;</long-description>
        <tag line="185" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="192" namespace="global" package="Default">
        <name>$request</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="201" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="194">
          <description>Starts empty.</description>
          <long-description>&lt;p&gt;@param array $query       Hash of parameters.
                             Multiple values are
                             as lists on a single key.&lt;/p&gt;</long-description>
          <tag line="194" name="access" description="public"/>
        </docblock>
        <argument line="201">
          <name>$query</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="213" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clear</name>
        <full_name>clear</full_name>
        <docblock line="209">
          <description>Empties the request of parameters.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="223" package="SimpleTest&#10;   @subpackage WebTester">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="217">
          <description>Adds a parameter to the query.</description>
          <long-description>&lt;p&gt;@param string $key            Key to add value to.&lt;/p&gt;</long-description>
          <tag line="217" name="param" description="New data. @access public" type="\string/array" variable="$value">
            <type by_reference="false">\string/array</type>
          </tag>
        </docblock>
        <argument line="223">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="223">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="242" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addPair</name>
        <full_name>addPair</full_name>
        <docblock line="236">
          <description>Adds a new value into the request.</description>
          <long-description>&lt;p&gt;@param string $key            Key to add value to.&lt;/p&gt;</long-description>
          <tag line="236" name="param" description="New data. @access private" type="\string/array" variable="$value">
            <type by_reference="false">\string/array</type>
          </tag>
        </docblock>
        <argument line="242">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="242">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="254" package="SimpleTest&#10;   @subpackage WebTester">
        <name>attach</name>
        <full_name>attach</full_name>
        <docblock line="246">
          <description>Adds a MIME part to the query.</description>
          <long-description>&lt;p&gt;Does nothing for a
   form encoded packet.&lt;/p&gt;</long-description>
          <tag line="246" name="param" description="Key to add value to. @param string $content Raw data. @param hash $filename Original filename. @access public" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="254">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="254">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
        <argument line="254">
          <name>$filename</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="264" package="SimpleTest&#10;   @subpackage WebTester">
        <name>merge</name>
        <full_name>merge</full_name>
        <docblock line="258">
          <description>Adds a set of parameters to this query.</description>
          <long-description>&lt;p&gt;@param array/SimpleQueryString $query  Multiple values are
                                          as lists on a single key.&lt;/p&gt;</long-description>
          <tag line="258" name="access" description="public"/>
        </docblock>
        <argument line="264">
          <name>$query</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="281" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="274">
          <description>Accessor for single value.</description>
          <long-description>&lt;p&gt;@return string/array    False if missing, string
                           if present and array if
                           multiple entries.&lt;/p&gt;</long-description>
          <tag line="274" name="access" description="public"/>
        </docblock>
        <argument line="281">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="302" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getAll</name>
        <full_name>getAll</full_name>
        <docblock line="297">
          <description>Accessor for listing of pairs.</description>
          <long-description>&lt;p&gt;@return array        All pair objects.&lt;/p&gt;</long-description>
          <tag line="297" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="312" package="SimpleTest&#10;   @subpackage WebTester">
        <name>encode</name>
        <full_name>encode</full_name>
        <docblock line="306">
          <description>Renders the query string as a URL encoded
   request part.</description>
          <long-description>&lt;p&gt;@return string        Part of URL.&lt;/p&gt;</long-description>
          <tag line="306" name="access" description="protected"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="329" package="SimpleTest&#10;   @subpackage WebTester">
      <extends>\SimpleEncoding</extends>
      <name>SimpleGetEncoding</name>
      <full_name>\SimpleGetEncoding</full_name>
      <docblock line="323">
        <description>Bundle of GET parameters.</description>
        <long-description>&lt;p&gt;Can include
   repeated parameters.&lt;/p&gt;</long-description>
        <tag line="323" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="338" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="331">
          <description>Starts empty.</description>
          <long-description>&lt;p&gt;@param array $query       Hash of parameters.
                             Multiple values are
                             as lists on a single key.&lt;/p&gt;</long-description>
          <tag line="331" name="access" description="public"/>
        </docblock>
        <argument line="338">
          <name>$query</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="347" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="342">
          <description>HTTP request method.</description>
          <long-description>&lt;p&gt;@return string        Always GET.&lt;/p&gt;</long-description>
          <tag line="342" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="356" package="SimpleTest&#10;   @subpackage WebTester">
        <name>writeHeadersTo</name>
        <full_name>writeHeadersTo</full_name>
        <docblock line="351">
          <description>Writes no extra headers.</description>
          <long-description>&lt;p&gt;@param SimpleSocket $socket        Socket to write to.&lt;/p&gt;</long-description>
          <tag line="351" name="access" description="public"/>
        </docblock>
        <argument line="356">
          <name>$socket</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="365" package="SimpleTest&#10;   @subpackage WebTester">
        <name>writeTo</name>
        <full_name>writeTo</full_name>
        <docblock line="359">
          <description>No data is sent to the socket as the data is encoded into
   the URL.</description>
          <long-description>&lt;p&gt;@param SimpleSocket $socket        Socket to write to.&lt;/p&gt;</long-description>
          <tag line="359" name="access" description="public"/>
        </docblock>
        <argument line="365">
          <name>$socket</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="374" package="SimpleTest&#10;   @subpackage WebTester">
        <name>asUrlRequest</name>
        <full_name>asUrlRequest</full_name>
        <docblock line="368">
          <description>Renders the query string as a URL encoded
   request part for attaching to a URL.</description>
          <long-description>&lt;p&gt;@return string        Part of URL.&lt;/p&gt;</long-description>
          <tag line="368" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="384" package="Default">
      <extends>\SimpleGetEncoding</extends>
      <name>SimpleHeadEncoding</name>
      <full_name>\SimpleHeadEncoding</full_name>
      <docblock line="379">
        <description>Bundle of URL parameters for a HEAD request.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="379" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="393" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="386">
          <description>Starts empty.</description>
          <long-description>&lt;p&gt;@param array $query       Hash of parameters.
                             Multiple values are
                             as lists on a single key.&lt;/p&gt;</long-description>
          <tag line="386" name="access" description="public"/>
        </docblock>
        <argument line="393">
          <name>$query</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="402" package="Default">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="397">
          <description>HTTP request method.</description>
          <long-description>&lt;p&gt;@return string        Always HEAD.&lt;/p&gt;</long-description>
          <tag line="397" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="412" package="Default">
      <extends>\SimpleGetEncoding</extends>
      <name>SimpleDeleteEncoding</name>
      <full_name>\SimpleDeleteEncoding</full_name>
      <docblock line="407">
        <description>Bundle of URL parameters for a DELETE request.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="407" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="421" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="414">
          <description>Starts empty.</description>
          <long-description>&lt;p&gt;@param array $query       Hash of parameters.
                             Multiple values are
                             as lists on a single key.&lt;/p&gt;</long-description>
          <tag line="414" name="access" description="public"/>
        </docblock>
        <argument line="421">
          <name>$query</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="430" package="Default">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="425">
          <description>HTTP request method.</description>
          <long-description>&lt;p&gt;@return string        Always DELETE.&lt;/p&gt;</long-description>
          <tag line="425" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="441" package="Default">
      <extends>\SimpleEncoding</extends>
      <name>SimpleEntityEncoding</name>
      <full_name>\SimpleEntityEncoding</full_name>
      <docblock line="435">
        <description>Bundles an entity-body for transporting
   a raw content payload with the request.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="435" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="442" namespace="global" package="Default">
        <name>$content_type</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="443" namespace="global" package="Default">
        <name>$body</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="445" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="445">
          <name>$query</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="445">
          <name>$content_type</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="460" package="Default">
        <name>getContentType</name>
        <full_name>getContentType</full_name>
        <docblock line="455">
          <description>Returns the media type of the entity body</description>
          <long-description>&lt;p&gt;@return string&lt;/p&gt;</long-description>
          <tag line="455" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="472" package="Default">
        <name>writeHeadersTo</name>
        <full_name>writeHeadersTo</full_name>
        <docblock line="467">
          <description>Dispatches the form headers down the socket.</description>
          <long-description>&lt;p&gt;@param SimpleSocket $socket        Socket to write to.&lt;/p&gt;</long-description>
          <tag line="467" name="access" description="public"/>
        </docblock>
        <argument line="472">
          <name>$socket</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="482" package="Default">
        <name>writeTo</name>
        <full_name>writeTo</full_name>
        <docblock line="477">
          <description>Dispatches the form data down the socket.</description>
          <long-description>&lt;p&gt;@param SimpleSocket $socket        Socket to write to.&lt;/p&gt;</long-description>
          <tag line="477" name="access" description="public"/>
        </docblock>
        <argument line="482">
          <name>$socket</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="491" package="Default">
        <name>encode</name>
        <full_name>encode</full_name>
        <docblock line="486">
          <description>Renders the request body</description>
          <long-description>&lt;p&gt;@return Encoded entity body&lt;/p&gt;</long-description>
          <tag line="486" name="access" description="protected"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="502" package="SimpleTest&#10;   @subpackage WebTester">
      <extends>\SimpleEntityEncoding</extends>
      <name>SimplePostEncoding</name>
      <full_name>\SimplePostEncoding</full_name>
      <docblock line="496">
        <description>Bundle of POST parameters.</description>
        <long-description>&lt;p&gt;Can include
   repeated parameters.&lt;/p&gt;</long-description>
        <tag line="496" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="511" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="504">
          <description>Starts empty.</description>
          <long-description>&lt;p&gt;@param array $query       Hash of parameters.
                             Multiple values are
                             as lists on a single key.&lt;/p&gt;</long-description>
          <tag line="504" name="access" description="public"/>
        </docblock>
        <argument line="511">
          <name>$query</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="511">
          <name>$content_type</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="518" package="SimpleTest&#10;   @subpackage WebTester">
        <name>hasMoreThanOneLevel</name>
        <full_name>hasMoreThanOneLevel</full_name>
        <argument line="518">
          <name>$query</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="527" package="SimpleTest&#10;   @subpackage WebTester">
        <name>rewriteArrayWithMultipleLevels</name>
        <full_name>rewriteArrayWithMultipleLevels</full_name>
        <argument line="527">
          <name>$query</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="550" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="545">
          <description>HTTP request method.</description>
          <long-description>&lt;p&gt;@return string        Always POST.&lt;/p&gt;</long-description>
          <tag line="545" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="560" package="SimpleTest&#10;   @subpackage WebTester">
        <name>asUrlRequest</name>
        <full_name>asUrlRequest</full_name>
        <docblock line="554">
          <description>Renders the query string as a URL encoded
   request part for attaching to a URL.</description>
          <long-description>&lt;p&gt;@return string        Part of URL.&lt;/p&gt;</long-description>
          <tag line="554" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="570" package="Default">
      <extends>\SimpleEntityEncoding</extends>
      <name>SimplePutEncoding</name>
      <full_name>\SimplePutEncoding</full_name>
      <docblock line="565">
        <description>Encoded entity body for a PUT request.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="565" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="579" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="572">
          <description>Starts empty.</description>
          <long-description>&lt;p&gt;@param array $query       Hash of parameters.
                             Multiple values are
                             as lists on a single key.&lt;/p&gt;</long-description>
          <tag line="572" name="access" description="public"/>
        </docblock>
        <argument line="579">
          <name>$query</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="579">
          <name>$content_type</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="588" package="Default">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="583">
          <description>HTTP request method.</description>
          <long-description>&lt;p&gt;@return string        Always PUT.&lt;/p&gt;</long-description>
          <tag line="583" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="599" package="SimpleTest&#10;   @subpackage WebTester">
      <extends>\SimplePostEncoding</extends>
      <name>SimpleMultipartEncoding</name>
      <full_name>\SimpleMultipartEncoding</full_name>
      <docblock line="593">
        <description>Bundle of POST parameters in the multipart
   format.</description>
        <long-description>&lt;p&gt;Can include file uploads.&lt;/p&gt;</long-description>
        <tag line="593" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="600" namespace="global" package="Default">
        <name>$boundary</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="609" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="602">
          <description>Starts empty.</description>
          <long-description>&lt;p&gt;@param array $query       Hash of parameters.
                             Multiple values are
                             as lists on a single key.&lt;/p&gt;</long-description>
          <tag line="602" name="access" description="public"/>
        </docblock>
        <argument line="609">
          <name>$query</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="609">
          <name>$boundary</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="619" package="SimpleTest&#10;   @subpackage WebTester">
        <name>writeHeadersTo</name>
        <full_name>writeHeadersTo</full_name>
        <docblock line="614">
          <description>Dispatches the form headers down the socket.</description>
          <long-description>&lt;p&gt;@param SimpleSocket $socket        Socket to write to.&lt;/p&gt;</long-description>
          <tag line="614" name="access" description="public"/>
        </docblock>
        <argument line="619">
          <name>$socket</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="629" package="SimpleTest&#10;   @subpackage WebTester">
        <name>writeTo</name>
        <full_name>writeTo</full_name>
        <docblock line="624">
          <description>Dispatches the form data down the socket.</description>
          <long-description>&lt;p&gt;@param SimpleSocket $socket        Socket to write to.&lt;/p&gt;</long-description>
          <tag line="624" name="access" description="public"/>
        </docblock>
        <argument line="629">
          <name>$socket</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="639" package="SimpleTest&#10;   @subpackage WebTester">
        <name>encode</name>
        <full_name>encode</full_name>
        <docblock line="633">
          <description>Renders the query string as a URL encoded
   request part.</description>
          <long-description>&lt;p&gt;@return string        Part of URL.&lt;/p&gt;</long-description>
          <tag line="633" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/encoding.php</error>
      <critical line="15" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="21" code="50018">No DocBlock was found for property $key</error>
      <error line="22" code="50018">No DocBlock was found for property $value</error>
      <error line="24" code="50014">Name of argument $key does not match with the DocBlock's name $value in __construct()</error>
      <error line="24" code="50015">Argument $value is missing from the Docblock of __construct()</error>
      <error line="55" code="50015">Argument $key is missing from the Docblock of isKey()</error>
      <critical line="84" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="90" code="50018">No DocBlock was found for property $key</error>
      <error line="91" code="50018">No DocBlock was found for property $content</error>
      <error line="92" code="50018">No DocBlock was found for property $filename</error>
      <error line="94" code="50014">Name of argument $key does not match with the DocBlock's name $content in __construct()</error>
      <error line="94" code="50015">Argument $content is missing from the Docblock of __construct()</error>
      <error line="94" code="50015">Argument $filename is missing from the Docblock of __construct()</error>
      <error line="142" code="50015">Argument $ascii is missing from the Docblock of isOnlyAscii()</error>
      <error line="156" code="50015">Argument $key is missing from the Docblock of isKey()</error>
      <error line="192" code="50018">No DocBlock was found for property $request</error>
      <error line="194" code="50015">Argument $query is missing from the Docblock of __construct()</error>
      <error line="217" code="50014">Name of argument $key does not match with the DocBlock's name $value in add()</error>
      <error line="217" code="50015">Argument $value is missing from the Docblock of add()</error>
      <error line="236" code="50014">Name of argument $key does not match with the DocBlock's name $value in addPair()</error>
      <error line="236" code="50015">Argument $value is missing from the Docblock of addPair()</error>
      <error line="246" code="50015">Argument $content is missing from the Docblock of attach()</error>
      <error line="246" code="50015">Argument $filename is missing from the Docblock of attach()</error>
      <error line="258" code="50015">Argument $query is missing from the Docblock of merge()</error>
      <error line="274" code="50015">Argument $key is missing from the Docblock of getValue()</error>
      <error line="331" code="50015">Argument $query is missing from the Docblock of __construct()</error>
      <error line="351" code="50015">Argument $socket is missing from the Docblock of writeHeadersTo()</error>
      <error line="359" code="50015">Argument $socket is missing from the Docblock of writeTo()</error>
      <critical line="379" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="386" code="50015">Argument $query is missing from the Docblock of __construct()</error>
      <critical line="407" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="414" code="50015">Argument $query is missing from the Docblock of __construct()</error>
      <critical line="435" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="442" code="50018">No DocBlock was found for property $content_type</error>
      <error line="443" code="50018">No DocBlock was found for property $body</error>
      <error line="445" code="50010">No DocBlock was found for method __construct()</error>
      <error line="467" code="50015">Argument $socket is missing from the Docblock of writeHeadersTo()</error>
      <error line="477" code="50015">Argument $socket is missing from the Docblock of writeTo()</error>
      <error line="504" code="50015">Argument $query is missing from the Docblock of __construct()</error>
      <error line="504" code="50015">Argument $content_type is missing from the Docblock of __construct()</error>
      <error line="518" code="50010">No DocBlock was found for method hasMoreThanOneLevel()</error>
      <error line="527" code="50010">No DocBlock was found for method rewriteArrayWithMultipleLevels()</error>
      <critical line="565" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="572" code="50015">Argument $query is missing from the Docblock of __construct()</error>
      <error line="572" code="50015">Argument $content_type is missing from the Docblock of __construct()</error>
      <error line="600" code="50018">No DocBlock was found for property $boundary</error>
      <error line="602" code="50015">Argument $query is missing from the Docblock of __construct()</error>
      <error line="602" code="50015">Argument $boundary is missing from the Docblock of __construct()</error>
      <error line="614" code="50015">Argument $socket is missing from the Docblock of writeHeadersTo()</error>
      <error line="624" code="50015">Argument $socket is missing from the Docblock of writeTo()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/errors.php" hash="ac194c30cbd0540656ed9a10c6311f81" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: errors.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <function namespace="global" line="231" package="Default">
      <name>SimpleTestErrorHandler</name>
      <full_name>\SimpleTestErrorHandler</full_name>
      <docblock line="220">
        <description>Error handler that simply stashes any errors into the global
   error queue.</description>
        <long-description>&lt;p&gt;Simulates the existing behaviour with respect to
   logging errors, but this feature may be removed in future.&lt;/p&gt;</long-description>
        <tag line="220" name="param" description="PHP error code. @param $message Text of error. @param $filename File error occoured in. @param $line Line number of error. @param $super_globals Hash of PHP super global arrays. @access public" type="\global\" variable="$severity"/>
      </docblock>
      <argument line="231">
        <name>$severity</name>
        <default></default>
        <type/>
      </argument>
      <argument line="231">
        <name>$message</name>
        <default></default>
        <type/>
      </argument>
      <argument line="231">
        <name>$filename</name>
        <default>null</default>
        <type/>
      </argument>
      <argument line="231">
        <name>$line</name>
        <default>null</default>
        <type/>
      </argument>
      <argument line="231">
        <name>$super_globals</name>
        <default>null</default>
        <type/>
      </argument>
      <argument line="231">
        <name>$mask</name>
        <default>null</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="254" package="Default">
      <name>IsNotCausedBySimpleTest</name>
      <full_name>\IsNotCausedBySimpleTest</full_name>
      <docblock line="248">
        <description>Certain messages can be caused by the unit tester itself.</description>
        <long-description>&lt;p&gt;These have to be filtered.&lt;/p&gt;</long-description>
        <tag line="248" name="param" description="Message to filter. @return boolean True if genuine failure." type="string" variable="$message">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="254">
        <name>$message</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="264" package="Default">
      <name>IsNotTimeZoneNag</name>
      <full_name>\IsNotTimeZoneNag</full_name>
      <docblock line="258">
        <description>Certain messages caused by PHP are just noise.</description>
        <long-description>&lt;p&gt;These have to be filtered.&lt;/p&gt;</long-description>
        <tag line="258" name="param" description="Message to filter. @return boolean True if genuine failure." type="string" variable="$message">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="264">
        <name>$message</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <class final="false" abstract="false" namespace="global" line="22" package="Default">
      <extends>\SimpleInvokerDecorator</extends>
      <name>SimpleErrorTrappingInvoker</name>
      <full_name>\SimpleErrorTrappingInvoker</full_name>
      <docblock line="17">
        <description>Extension that traps errors into an error queue.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="17" name="subpackage" description="UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="24">
          <description>Stores the invoker to wrap.</description>
          <long-description>&lt;p&gt;@param SimpleInvoker $invoker  Test method runner.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="28">
          <name>$invoker</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="Default">
        <name>invoke</name>
        <full_name>invoke</full_name>
        <docblock line="32">
          <description>Invokes a test method and dispatches any
   untrapped errors.</description>
          <long-description>&lt;p&gt;Called back from
   the visiting runner.&lt;/p&gt;</long-description>
          <tag line="32" name="param" description="Test method to call. @access public" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="52" package="Default">
        <name>createErrorQueue</name>
        <full_name>createErrorQueue</full_name>
        <docblock line="47">
          <description>Wires up the error queue for a single test.</description>
          <long-description>&lt;p&gt;@return SimpleErrorQueue    Queue connected to the test.&lt;/p&gt;</long-description>
          <tag line="47" name="access" description="private"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="67" package="Default">
      <extends/>
      <name>SimpleErrorQueue</name>
      <full_name>\SimpleErrorQueue</full_name>
      <docblock line="61">
        <description>Error queue used to record trapped
   errors.</description>
        <long-description>&lt;p&gt;@package  SimpleTest&lt;/p&gt;</long-description>
        <tag line="61" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="68" namespace="global" package="Default">
        <name>$queue</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="69" namespace="global" package="Default">
        <name>$expectation_queue</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="70" namespace="global" package="Default">
        <name>$test</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="71" namespace="global" package="Default">
        <name>$using_expect_style</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="73">
          <description>Starts with an empty queue.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="Default">
        <name>clear</name>
        <full_name>clear</full_name>
        <docblock line="80">
          <description>Discards the contents of the error queue.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Default">
        <name>setTestCase</name>
        <full_name>setTestCase</full_name>
        <docblock line="89">
          <description>Sets the currently running test case.</description>
          <long-description>&lt;p&gt;@param SimpleTestCase $test    Test case to send messages to.&lt;/p&gt;</long-description>
          <tag line="89" name="access" description="public"/>
        </docblock>
        <argument line="94">
          <name>$test</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="107" package="Default">
        <name>expectError</name>
        <full_name>expectError</full_name>
        <docblock line="98">
          <description>Sets up an expectation of an error.</description>
          <long-description>&lt;p&gt;If this is
   not fulfilled at the end of the test, a failure
   will occour. If the error does happen, then this
   will cancel it out and send a pass message.&lt;/p&gt;</long-description>
          <tag line="98" name="param" description="Expected error match. @param string $message Message to display. @access public" type="\SimpleExpectation" variable="$expected">
            <type by_reference="false">\SimpleExpectation</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
        <argument line="107">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="119" package="Default">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="111">
          <description>Adds an error to the front of the queue.</description>
          <long-description>&lt;p&gt;@param integer $severity       PHP error code.&lt;/p&gt;</long-description>
          <tag line="111" name="param" description="Text of error. @param string $filename File error occoured in. @param integer $line Line number of error. @access public" type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$severity</name>
          <default></default>
          <type/>
        </argument>
        <argument line="119">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
        <argument line="119">
          <name>$filename</name>
          <default></default>
          <type/>
        </argument>
        <argument line="119">
          <name>$line</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="129" package="Default">
        <name>tally</name>
        <full_name>tally</full_name>
        <docblock line="124">
          <description>Any errors still in the queue are sent to the test
   case.</description>
          <long-description>&lt;p&gt;Any unfulfilled expectations trigger failures.&lt;/p&gt;</long-description>
          <tag line="124" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="148" package="Default">
        <name>testLatestError</name>
        <full_name>testLatestError</full_name>
        <docblock line="139">
          <description>Tests the error against the most recent expected
   error.</description>
          <long-description>&lt;p&gt;@param integer $severity       PHP error code.&lt;/p&gt;</long-description>
          <tag line="139" name="param" description="Text of error. @param string $filename File error occoured in. @param integer $line Line number of error. @access private" type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="148">
          <name>$severity</name>
          <default></default>
          <type/>
        </argument>
        <argument line="148">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
        <argument line="148">
          <name>$filename</name>
          <default></default>
          <type/>
        </argument>
        <argument line="148">
          <name>$line</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="170" package="Default">
        <name>extract</name>
        <full_name>extract</full_name>
        <docblock line="161">
          <description>Pulls the earliest error from the queue.</description>
          <long-description>&lt;p&gt;@return  mixed    False if none, or a list of error
                     information. Elements are: severity
                     as the PHP error code, the error message,
                     the file with the error, the line number
                     and a list of PHP super global arrays.&lt;/p&gt;</long-description>
          <tag line="161" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="182" package="Default">
        <name>extractExpectation</name>
        <full_name>extractExpectation</full_name>
        <docblock line="177">
          <description>Pulls the earliest expectation from the queue.</description>
          <long-description>&lt;p&gt;@return     SimpleExpectation    False if none.&lt;/p&gt;</long-description>
          <tag line="177" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="196" package="Default">
        <name>getSeverityAsString</name>
        <full_name>getSeverityAsString</full_name>
        <docblock line="189">
          <description>Converts an error code into it's string
   representation.</description>
          <long-description>&lt;p&gt;@param $severity  PHP integer error code.&lt;/p&gt;</long-description>
          <tag line="189" name="return" description="version of error code.&#10;   @access public" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="196">
          <name>$severity</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/errors.php</error>
      <error line="220" code="50015">Argument $message is missing from the Docblock of \SimpleTestErrorHandler()</error>
      <error line="220" code="50015">Argument $filename is missing from the Docblock of \SimpleTestErrorHandler()</error>
      <error line="220" code="50015">Argument $line is missing from the Docblock of \SimpleTestErrorHandler()</error>
      <error line="220" code="50015">Argument $super_globals is missing from the Docblock of \SimpleTestErrorHandler()</error>
      <error line="220" code="50015">Argument $mask is missing from the Docblock of \SimpleTestErrorHandler()</error>
      <critical line="17" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="24" code="50015">Argument $invoker is missing from the Docblock of __construct()</error>
      <critical line="61" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="68" code="50018">No DocBlock was found for property $queue</error>
      <error line="69" code="50018">No DocBlock was found for property $expectation_queue</error>
      <error line="70" code="50018">No DocBlock was found for property $test</error>
      <error line="71" code="50018">No DocBlock was found for property $using_expect_style</error>
      <error line="89" code="50015">Argument $test is missing from the Docblock of setTestCase()</error>
      <error line="98" code="50015">Argument $message is missing from the Docblock of expectError()</error>
      <error line="111" code="50014">Name of argument $severity does not match with the DocBlock's name $content in add()</error>
      <error line="111" code="50015">Argument $content is missing from the Docblock of add()</error>
      <error line="111" code="50015">Argument $filename is missing from the Docblock of add()</error>
      <error line="111" code="50015">Argument $line is missing from the Docblock of add()</error>
      <error line="139" code="50014">Name of argument $severity does not match with the DocBlock's name $content in testLatestError()</error>
      <error line="139" code="50015">Argument $content is missing from the Docblock of testLatestError()</error>
      <error line="139" code="50015">Argument $filename is missing from the Docblock of testLatestError()</error>
      <error line="139" code="50015">Argument $line is missing from the Docblock of testLatestError()</error>
      <error line="189" code="50015">Argument $severity is missing from the Docblock of getSeverityAsString()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/exceptions.php" hash="0f525c7dbc1aea0dd673102623aec69e" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: exceptions.php 1882 2009-07-01 14:30:05Z lastcraft $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="22" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends>\SimpleInvokerDecorator</extends>
      <name>SimpleExceptionTrappingInvoker</name>
      <full_name>\SimpleExceptionTrappingInvoker</full_name>
      <docblock line="16">
        <description>Extension that traps exceptions and turns them into
   an error message.</description>
        <long-description>&lt;p&gt;PHP5 only.&lt;/p&gt;</long-description>
        <tag line="16" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="24">
          <description>Stores the invoker to be wrapped.</description>
          <long-description>&lt;p&gt;@param SimpleInvoker $invoker   Test method runner.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="28">
          <name>$invoker</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="38" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>invoke</name>
        <full_name>invoke</full_name>
        <docblock line="32">
          <description>Invokes a test method whilst trapping expected
   exceptions.</description>
          <long-description>&lt;p&gt;Any left over unthrown exceptions
   are then reported as failures.&lt;/p&gt;</long-description>
          <tag line="32" name="param" description="Test method to call." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="70" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends>\SimpleExpectation</extends>
      <name>ExceptionExpectation</name>
      <full_name>\ExceptionExpectation</full_name>
      <docblock line="62">
        <description>Tests exceptions either by type or the exact
   exception.</description>
        <long-description>&lt;p&gt;This could be improved to accept
   a pattern expectation to test the error
   message, but that will have to come later.&lt;/p&gt;</long-description>
        <tag line="62" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="71" namespace="global" package="Default">
        <name>$expected</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="73">
          <description>Sets up the conditions to test against.</description>
          <long-description>&lt;p&gt;If the expected value is a string, then
   it will act as a test of the class name.
   An exception as the comparison will
   trigger an identical match. Writing this
   down now makes it look doubly dumb. I hope
   come up with a better scheme later.&lt;/p&gt;</long-description>
          <tag line="73" name="param" description="A class name or an actual exception to compare with. @param string $message Message to display." type="mixed" variable="$expected">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
        <argument line="85">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="95" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="90">
          <description>Carry out the test.</description>
          <long-description>&lt;p&gt;@param Exception $compare    Value to check.&lt;/p&gt;</long-description>
          <tag line="90" name="return" description="True if matched." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="110" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="105">
          <description>Create the message to display describing the test.</description>
          <long-description>&lt;p&gt;@param Exception $compare     Exception to match.&lt;/p&gt;</long-description>
          <tag line="105" name="return" description="Final message." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="125" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>describeException</name>
        <full_name>describeException</full_name>
        <docblock line="120">
          <description>Summary of an Exception object.</description>
          <long-description>&lt;p&gt;@param Exception $compare     Exception to describe.&lt;/p&gt;</long-description>
          <tag line="120" name="return" description="Text description." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$exception</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="137" package="SimpleTest&#10;   @subpackage   UnitTester">
      <extends/>
      <name>SimpleExceptionTrap</name>
      <full_name>\SimpleExceptionTrap</full_name>
      <docblock line="130">
        <description>Stores expected exceptions for when they
   get thrown.</description>
        <long-description>&lt;p&gt;Saves the irritating try...catch
   block.&lt;/p&gt;</long-description>
        <tag line="130" name="package" description="SimpleTest&#10;   @subpackage   UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="138" namespace="global" package="Default">
        <name>$expected</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="139" namespace="global" package="Default">
        <name>$ignored</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="140" namespace="global" package="Default">
        <name>$message</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="145" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="142">
          <description>Clears down the queue ready for action.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="157" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>expectException</name>
        <full_name>expectException</full_name>
        <docblock line="149">
          <description>Sets up an expectation of an exception.</description>
          <long-description>&lt;p&gt;This has the effect of intercepting an
   exception that matches.&lt;/p&gt;</long-description>
          <tag line="149" name="param" description="Expected exception to match. @param string $message Message to display. @access public" type="\SimpleExpectation" variable="$expected">
            <type by_reference="false">\SimpleExpectation</type>
          </tag>
        </docblock>
        <argument line="157">
          <name>$expected</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="157">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="168" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>ignoreException</name>
        <full_name>ignoreException</full_name>
        <docblock line="162">
          <description>Adds an exception to the ignore list.</description>
          <long-description>&lt;p&gt;This is the list
   of exceptions that when thrown do not affect the test.&lt;/p&gt;</long-description>
          <tag line="162" name="param" description="Exception to skip. @access public" type="\SimpleExpectation" variable="$ignored">
            <type by_reference="false">\SimpleExpectation</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$ignored</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="180" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>isExpected</name>
        <full_name>isExpected</full_name>
        <docblock line="172">
          <description>Compares the expected exception with any
   in the queue.</description>
          <long-description>&lt;p&gt;Issues a pass or fail and
   returns the state of the test.&lt;/p&gt;</long-description>
          <tag line="172" name="param" description="Test case to send messages to. @param Exception $exception Exception to compare. @return boolean False on no match." type="\SimpleTestCase" variable="$test">
            <type by_reference="false">\SimpleTestCase</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$test</name>
          <default></default>
          <type/>
        </argument>
        <argument line="180">
          <name>$exception</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="199" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>coerceToExpectation</name>
        <full_name>coerceToExpectation</full_name>
        <docblock line="192">
          <description>Turns an expected exception into a SimpleExpectation object.</description>
          <long-description>&lt;p&gt;@param mixed $exception      Exception, expectation or
                                class name of exception.&lt;/p&gt;</long-description>
          <tag line="192" name="return" description="Expectation that will match the&#10;                                exception." type="\SimpleExpectation">
            <type by_reference="false">\SimpleExpectation</type>
          </tag>
        </docblock>
        <argument line="199">
          <name>$exception</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="213" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getOutstanding</name>
        <full_name>getOutstanding</full_name>
        <docblock line="209">
          <description>Tests for any left over exception.</description>
          <long-description>&lt;p&gt;@return string/false     The failure message or false if none.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="220" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>clear</name>
        <full_name>clear</full_name>
        <docblock line="217">
          <description>Discards the contents of the error queue.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/exceptions.php</error>
      <error line="24" code="50015">Argument $invoker is missing from the Docblock of __construct()</error>
      <error line="71" code="50018">No DocBlock was found for property $expected</error>
      <error line="73" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="90" code="50015">Argument $compare is missing from the Docblock of test()</error>
      <error line="105" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <error line="120" code="50015">Argument $exception is missing from the Docblock of describeException()</error>
      <error line="138" code="50018">No DocBlock was found for property $expected</error>
      <error line="139" code="50018">No DocBlock was found for property $ignored</error>
      <error line="140" code="50018">No DocBlock was found for property $message</error>
      <error line="149" code="50015">Argument $message is missing from the Docblock of expectException()</error>
      <error line="172" code="50015">Argument $exception is missing from the Docblock of isExpected()</error>
      <error line="192" code="50015">Argument $exception is missing from the Docblock of coerceToExpectation()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/expectation.php" hash="5b80c2e54e316d5f803562909a0d83e5" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10;   @version    $Id: expectation.php 2009 2011-04-28 08:57:25Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="23" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
      <extends/>
      <name>SimpleExpectation</name>
      <full_name>\SimpleExpectation</full_name>
      <docblock line="16">
        <description>Assertion that can display failure information.</description>
        <long-description>&lt;p&gt;Also includes various helper methods.&lt;/p&gt;</long-description>
        <tag line="16" name="package" description="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" namespace="global" package="Default">
        <name>$dumper</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="25" namespace="global" package="Default">
        <name>$message</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="27">
          <description>Creates a dumper for displaying values and sets
   the test message.</description>
          <long-description>&lt;p&gt;@param string $message    Customised message on failure.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="32">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="43" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="36">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if correct.&lt;/p&gt;</long-description>
          <tag line="36" name="param" description="Comparison value. @return boolean True if correct. @access public @abstract" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="54" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="46">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="46" name="return" description="Description of success&#10;                              or failure.&#10;   @access public&#10;   @abstract" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>overlayMessage</name>
        <full_name>overlayMessage</full_name>
        <docblock line="57">
          <description>Overlays the generated message onto the stored user
   message.</description>
          <long-description>&lt;p&gt;An additional message can be interjected.&lt;/p&gt;</long-description>
          <tag line="57" name="param" description="Comparison value. @param SimpleDumper $dumper For formatting the results. @return string Description of success or failure. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
        <argument line="66">
          <name>$dumper</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="76" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>getDumper</name>
        <full_name>getDumper</full_name>
        <docblock line="71">
          <description>Accessor for the dumper.</description>
          <long-description>&lt;p&gt;@return SimpleDumper    Current value dumper.&lt;/p&gt;</long-description>
          <tag line="71" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="93" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>isExpectation</name>
        <full_name>isExpectation</full_name>
        <docblock line="84">
          <description>Test to see if a value is an expectation object.</description>
          <long-description>&lt;p&gt;A useful utility method.&lt;/p&gt;</long-description>
          <tag line="84" name="param" description="Hopefully an Expectation class. @return boolean True if descended from this class. @access public" type="mixed" variable="$expectation">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$expectation</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="104" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>AnythingExpectation</name>
      <full_name>\AnythingExpectation</full_name>
      <docblock line="99">
        <description>A wildcard expectation always matches.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="99" name="subpackage" description="MockObjects"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="106">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;Always true.&lt;/p&gt;</long-description>
          <tag line="106" name="param" description="Ignored. @return boolean True. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="123" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="116">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="116" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="134" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>FailedExpectation</name>
      <full_name>\FailedExpectation</full_name>
      <docblock line="129">
        <description>An expectation that never matches.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="129" name="subpackage" description="MockObjects"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="142" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="136">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;Always false.&lt;/p&gt;</long-description>
          <tag line="136" name="param" description="Ignored. @return boolean True. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="152" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="146">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="146" name="return" description="Description of failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="163" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>TrueExpectation</name>
      <full_name>\TrueExpectation</full_name>
      <docblock line="158">
        <description>An expectation that passes on boolean true.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="158" name="subpackage" description="MockObjects"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="171" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="165">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;@param mixed $compare  Should be true.&lt;/p&gt;</long-description>
          <tag line="165" name="return" description="True on match.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="171">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="182" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="175">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="175" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="182">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="193" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>FalseExpectation</name>
      <full_name>\FalseExpectation</full_name>
      <docblock line="188">
        <description>An expectation that passes on boolean false.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="188" name="subpackage" description="MockObjects"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="201" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="195">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;@param mixed $compare  Should be false.&lt;/p&gt;</long-description>
          <tag line="195" name="return" description="True on match.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="212" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="205">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="205" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="212">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="223" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>EqualExpectation</name>
      <full_name>\EqualExpectation</full_name>
      <docblock line="218">
        <description>Test for equality.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="218" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="224" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="232" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="226">
          <description>Sets the value to compare against.</description>
          <long-description>&lt;p&gt;@param mixed $value        Test value to match.&lt;/p&gt;</long-description>
          <tag line="226" name="param" description="Customised message on failure. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="232">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="232">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="244" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="237">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if it matches the
   held value.&lt;/p&gt;</long-description>
          <tag line="237" name="param" description="Comparison value. @return boolean True if correct. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="244">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="255" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="248">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="248" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="255">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="269" package="Default">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="264">
          <description>Accessor for comparison value.</description>
          <long-description>&lt;p&gt;@return mixed       Held value to compare with.&lt;/p&gt;</long-description>
          <tag line="264" name="access" description="protected"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="279" package="Default">
      <extends>\EqualExpectation</extends>
      <name>NotEqualExpectation</name>
      <full_name>\NotEqualExpectation</full_name>
      <docblock line="274">
        <description>Test for inequality.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="274" name="subpackage" description="UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="287" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="281">
          <description>Sets the value to compare against.</description>
          <long-description>&lt;p&gt;@param mixed $value       Test value to match.&lt;/p&gt;</long-description>
          <tag line="281" name="param" description="Customised message on failure. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="287">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="287">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="298" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="291">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if it differs from the
   held value.&lt;/p&gt;</long-description>
          <tag line="291" name="param" description="Comparison value. @return boolean True if correct. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="298">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="309" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="302">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="302" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="309">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="327" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>WithinMarginExpectation</name>
      <full_name>\WithinMarginExpectation</full_name>
      <docblock line="322">
        <description>Test for being within a range.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="322" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="328" namespace="global" package="Default">
        <name>$upper</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="329" namespace="global" package="Default">
        <name>$lower</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="339" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="331">
          <description>Sets the value to compare against and the fuzziness of
   the match.</description>
          <long-description>&lt;p&gt;Used for comparing floating point values.&lt;/p&gt;</long-description>
          <tag line="331" name="param" description="Test value to match. @param mixed $margin Fuzziness of match. @param string $message Customised message on failure. @access public" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="339">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="339">
          <name>$margin</name>
          <default></default>
          <type/>
        </argument>
        <argument line="339">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="352" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="345">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if it matches the
   held value.&lt;/p&gt;</long-description>
          <tag line="345" name="param" description="Comparison value. @return boolean True if correct. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="352">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="363" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="356">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="356" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="363">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="376" package="Default">
        <name>withinMessage</name>
        <full_name>withinMessage</full_name>
        <docblock line="371">
          <description>Creates a the message for being within the range.</description>
          <long-description>&lt;p&gt;@param mixed $compare        Value being tested.&lt;/p&gt;</long-description>
          <tag line="371" name="access" description="private"/>
        </docblock>
        <argument line="376">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="386" package="Default">
        <name>outsideMessage</name>
        <full_name>outsideMessage</full_name>
        <docblock line="381">
          <description>Creates a the message for being within the range.</description>
          <long-description>&lt;p&gt;@param mixed $compare        Value being tested.&lt;/p&gt;</long-description>
          <tag line="381" name="access" description="private"/>
        </docblock>
        <argument line="386">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="402" package="Default">
      <extends>\WithinMarginExpectation</extends>
      <name>OutsideMarginExpectation</name>
      <full_name>\OutsideMarginExpectation</full_name>
      <docblock line="397">
        <description>Test for being outside of a range.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="397" name="subpackage" description="UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="412" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="404">
          <description>Sets the value to compare against and the fuzziness of
   the match.</description>
          <long-description>&lt;p&gt;Used for comparing floating point values.&lt;/p&gt;</long-description>
          <tag line="404" name="param" description="Test value to not match. @param mixed $margin Fuzziness of match. @param string $message Customised message on failure. @access public" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="412">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="412">
          <name>$margin</name>
          <default></default>
          <type/>
        </argument>
        <argument line="412">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="423" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="416">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if it matches the
   held value.&lt;/p&gt;</long-description>
          <tag line="416" name="param" description="Comparison value. @return boolean True if correct. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="423">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="434" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="427">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="427" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="434">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="448" package="Default">
      <extends/>
      <name>ReferenceExpectation</name>
      <full_name>\ReferenceExpectation</full_name>
      <docblock line="443">
        <description>Test for reference.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="443" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="449" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="457" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="451">
          <description>Sets the reference value to compare against.</description>
          <long-description>&lt;p&gt;@param mixed $value       Test reference to match.&lt;/p&gt;</long-description>
          <tag line="451" name="param" description="Customised message on failure. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="457">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="457">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="469" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="462">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if it exactly
   references the held value.&lt;/p&gt;</long-description>
          <tag line="462" name="param" description="Comparison reference. @return boolean True if correct. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="469">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="480" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="473">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="473" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="480">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="498" package="Default">
        <name>overlayMessage</name>
        <full_name>overlayMessage</full_name>
        <docblock line="489">
          <description>Overlays the generated message onto the stored user
   message.</description>
          <long-description>&lt;p&gt;An additional message can be interjected.&lt;/p&gt;</long-description>
          <tag line="489" name="param" description="Comparison value. @param SimpleDumper $dumper For formatting the results. @return string Description of success or failure. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="498">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
        <argument line="498">
          <name>$dumper</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="508" package="Default">
        <name>getDumper</name>
        <full_name>getDumper</full_name>
        <docblock line="503">
          <description>Accessor for the dumper.</description>
          <long-description>&lt;p&gt;@return SimpleDumper    Current value dumper.&lt;/p&gt;</long-description>
          <tag line="503" name="access" description="protected"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="522" package="Default">
      <extends>\EqualExpectation</extends>
      <name>IdenticalExpectation</name>
      <full_name>\IdenticalExpectation</full_name>
      <docblock line="517">
        <description>Test for identity.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="517" name="subpackage" description="UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="530" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="524">
          <description>Sets the value to compare against.</description>
          <long-description>&lt;p&gt;@param mixed $value       Test value to match.&lt;/p&gt;</long-description>
          <tag line="524" name="param" description="Customised message on failure. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="530">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="530">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="541" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="534">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if it exactly
   matches the held value.&lt;/p&gt;</long-description>
          <tag line="534" name="param" description="Comparison value. @return boolean True if correct. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="541">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="552" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="545">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="545" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="552">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="570" package="Default">
      <extends>\IdenticalExpectation</extends>
      <name>NotIdenticalExpectation</name>
      <full_name>\NotIdenticalExpectation</full_name>
      <docblock line="565">
        <description>Test for non-identity.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="565" name="subpackage" description="UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="578" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="572">
          <description>Sets the value to compare against.</description>
          <long-description>&lt;p&gt;@param mixed $value        Test value to match.&lt;/p&gt;</long-description>
          <tag line="572" name="param" description="Customised message on failure. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="578">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="578">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="589" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="582">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if it differs from the
   held value.&lt;/p&gt;</long-description>
          <tag line="582" name="param" description="Comparison value. @return boolean True if correct. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="589">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="600" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="593">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="593" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="600">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="616" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>PatternExpectation</name>
      <full_name>\PatternExpectation</full_name>
      <docblock line="611">
        <description>Test for a pattern using Perl regex rules.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="611" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="617" namespace="global" package="Default">
        <name>$pattern</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="625" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="619">
          <description>Sets the value to compare against.</description>
          <long-description>&lt;p&gt;@param string $pattern    Pattern to search for.&lt;/p&gt;</long-description>
          <tag line="619" name="param" description="Customised message on failure. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="625">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="625">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="635" package="Default">
        <name>getPattern</name>
        <full_name>getPattern</full_name>
        <docblock line="630">
          <description>Accessor for the pattern.</description>
          <long-description>&lt;p&gt;@return string       Perl regex as string.&lt;/p&gt;</long-description>
          <tag line="630" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="646" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="639">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if the Perl regex
   matches the comparison value.&lt;/p&gt;</long-description>
          <tag line="639" name="param" description="Comparison value. @return boolean True if correct. @access public" type="string" variable="$compare">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="646">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="657" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="650">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="650" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="657">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="675" package="Default">
        <name>describePatternMatch</name>
        <full_name>describePatternMatch</full_name>
        <docblock line="668">
          <description>Describes a pattern match including the string
   found and it's position.</description>
          <long-description>&lt;p&gt;@param string $pattern        Regex to match against.&lt;/p&gt;</long-description>
          <tag line="668" name="param" description="Subject to search. @access protected" type="string" variable="$subject">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="675">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="675">
          <name>$subject</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="692" package="Default">
      <extends>\PatternExpectation</extends>
      <name>NoPatternExpectation</name>
      <full_name>\NoPatternExpectation</full_name>
      <docblock line="686">
        <description>Fail if a pattern is detected within the
   comparison.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="686" name="subpackage" description="UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="700" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="694">
          <description>Sets the reject pattern</description>
          <long-description>&lt;p&gt;@param string $pattern    Pattern to search for.&lt;/p&gt;</long-description>
          <tag line="694" name="param" description="Customised message on failure. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="700">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="700">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="711" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="704">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;False if the Perl regex
   matches the comparison value.&lt;/p&gt;</long-description>
          <tag line="704" name="param" description="Comparison value. @return boolean True if correct. @access public" type="string" variable="$compare">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="711">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="722" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="715">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param string $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="715" name="return" description="Description of success&#10;                               or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="722">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="739" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>IsAExpectation</name>
      <full_name>\IsAExpectation</full_name>
      <docblock line="734">
        <description>Tests either type or class name if it's an object.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="734" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="740" namespace="global" package="Default">
        <name>$type</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="748" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="742">
          <description>Sets the type to compare with.</description>
          <long-description>&lt;p&gt;@param string $type       Type or class name.&lt;/p&gt;</long-description>
          <tag line="742" name="param" description="Customised message on failure. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="748">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="748">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="758" package="Default">
        <name>getType</name>
        <full_name>getType</full_name>
        <docblock line="753">
          <description>Accessor for type to check against.</description>
          <long-description>&lt;p&gt;@return string    Type or class name.&lt;/p&gt;</long-description>
          <tag line="753" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="769" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="762">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if the type or
   class matches the string value.&lt;/p&gt;</long-description>
          <tag line="762" name="param" description="Comparison value. @return boolean True if correct. @access public" type="string" variable="$compare">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="769">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="787" package="Default">
        <name>canonicalType</name>
        <full_name>canonicalType</full_name>
        <docblock line="781">
          <description>Coerces type name into a is_*() match.</description>
          <long-description>&lt;p&gt;@param string $type        User type.&lt;/p&gt;</long-description>
          <tag line="781" name="return" description="Simpler type.&#10;   @access private" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="787">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="803" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="796">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="796" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="803">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="816" package="SimpleTest&#10;     @subpackage UnitTester">
      <extends>\IsAExpectation</extends>
      <name>NotAExpectation</name>
      <full_name>\NotAExpectation</full_name>
      <docblock line="810">
        <description>Tests either type or class name if it's an object.</description>
        <long-description>&lt;p&gt;Will succeed if the type does not match.&lt;/p&gt;</long-description>
        <tag line="810" name="package" description="SimpleTest&#10;     @subpackage UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="817" namespace="global" package="Default">
        <name>$type</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="825" package="SimpleTest&#10;     @subpackage UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="819">
          <description>Sets the type to compare with.</description>
          <long-description>&lt;p&gt;@param string $type       Type or class name.&lt;/p&gt;</long-description>
          <tag line="819" name="param" description="Customised message on failure. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="825">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="825">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="836" package="SimpleTest&#10;     @subpackage UnitTester">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="829">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;False if the type or
   class matches the string value.&lt;/p&gt;</long-description>
          <tag line="829" name="param" description="Comparison value. @return boolean True if different. @access public" type="string" variable="$compare">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="836">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="847" package="SimpleTest&#10;     @subpackage UnitTester">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="840">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="840" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="847">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="859" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>MethodExistsExpectation</name>
      <full_name>\MethodExistsExpectation</full_name>
      <docblock line="854">
        <description>Tests for existance of a method in an object</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="854" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="860" namespace="global" package="Default">
        <name>$method</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="868" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="862">
          <description>Sets the value to compare against.</description>
          <long-description>&lt;p&gt;@param string $method     Method to check.&lt;/p&gt;</long-description>
          <tag line="862" name="param" description="Customised message on failure. @return void" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="868">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="868">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="878" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="873">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if the method exists in the test object.&lt;/p&gt;</long-description>
          <tag line="873" name="param" description="Comparison method name. @return boolean True if correct." type="string" variable="$compare">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="878">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="888" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="882">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="882" name="return" description="Description of success&#10;                              or failure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="888">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="904" package="Default">
      <extends>\IdenticalExpectation</extends>
      <name>MemberExpectation</name>
      <full_name>\MemberExpectation</full_name>
      <docblock line="899">
        <description>Compares an object member's value even if private.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="899" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="905" namespace="global" package="Default">
        <name>$name</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="913" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="907">
          <description>Sets the value to compare against.</description>
          <long-description>&lt;p&gt;@param string $method     Method to check.&lt;/p&gt;</long-description>
          <tag line="907" name="param" description="Customised message on failure. @return void" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="913">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="913">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="923" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="918">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if the property value is identical.&lt;/p&gt;</long-description>
          <tag line="918" name="param" description="Comparison object. @return boolean True if identical." type="object" variable="$actual">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="923">
          <name>$actual</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="936" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="930">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="930" name="return" description="Description of success&#10;                              or failure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="936">
          <name>$actual</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="946" package="Default">
        <name>getProperty</name>
        <full_name>getProperty</full_name>
        <docblock line="940">
          <description>Extracts the member value even if private using reflection.</description>
          <long-description>&lt;p&gt;@param string $name        Property name.&lt;/p&gt;</long-description>
          <tag line="940" name="param" description="Object to read. @return mixed Value of property." type="object" variable="$object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="946">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="946">
          <name>$object</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="965" package="Default">
        <name>getPrivatePropertyNoMatterWhat</name>
        <full_name>getPrivatePropertyNoMatterWhat</full_name>
        <docblock line="959">
          <description>Extracts a private member's value when reflection won't play ball.</description>
          <long-description>&lt;p&gt;@param string $name        Property name.&lt;/p&gt;</long-description>
          <tag line="959" name="param" description="Object to read. @return mixed Value of property." type="object" variable="$object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="965">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="965">
          <name>$object</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="979" package="Default">
        <name>unmangle</name>
        <full_name>unmangle</full_name>
        <docblock line="973">
          <description>Removes crud from property name after it's been converted
   to an array.</description>
          <long-description>&lt;p&gt;@param string $mangled     Name from array cast.&lt;/p&gt;</long-description>
          <tag line="973" name="return" description="Cleaned up name." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="979">
          <name>$mangled</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/expectation.php</error>
      <error line="24" code="50018">No DocBlock was found for property $dumper</error>
      <error line="25" code="50018">No DocBlock was found for property $message</error>
      <error line="27" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="46" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <error line="57" code="50015">Argument $dumper is missing from the Docblock of overlayMessage()</error>
      <critical line="99" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="116" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="129" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="146" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="158" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="165" code="50015">Argument $compare is missing from the Docblock of test()</error>
      <error line="175" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="188" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="195" code="50015">Argument $compare is missing from the Docblock of test()</error>
      <error line="205" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="218" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="224" code="50018">No DocBlock was found for property $value</error>
      <error line="226" code="50014">Name of argument $value does not match with the DocBlock's name $message in __construct()</error>
      <error line="226" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="248" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="274" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="281" code="50014">Name of argument $value does not match with the DocBlock's name $message in __construct()</error>
      <error line="281" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="302" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="322" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="328" code="50018">No DocBlock was found for property $upper</error>
      <error line="329" code="50018">No DocBlock was found for property $lower</error>
      <error line="331" code="50015">Argument $margin is missing from the Docblock of __construct()</error>
      <error line="331" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="356" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <error line="371" code="50015">Argument $compare is missing from the Docblock of withinMessage()</error>
      <error line="381" code="50015">Argument $compare is missing from the Docblock of outsideMessage()</error>
      <critical line="397" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="404" code="50015">Argument $margin is missing from the Docblock of __construct()</error>
      <error line="404" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="427" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="443" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="449" code="50018">No DocBlock was found for property $value</error>
      <error line="451" code="50014">Name of argument $value does not match with the DocBlock's name $message in __construct()</error>
      <error line="451" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="473" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <error line="489" code="50015">Argument $dumper is missing from the Docblock of overlayMessage()</error>
      <critical line="517" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="524" code="50014">Name of argument $value does not match with the DocBlock's name $message in __construct()</error>
      <error line="524" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="545" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="565" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="572" code="50014">Name of argument $value does not match with the DocBlock's name $message in __construct()</error>
      <error line="572" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="593" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="611" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="617" code="50018">No DocBlock was found for property $pattern</error>
      <error line="619" code="50014">Name of argument $pattern does not match with the DocBlock's name $message in __construct()</error>
      <error line="619" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="650" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <error line="668" code="50014">Name of argument $pattern does not match with the DocBlock's name $subject in describePatternMatch()</error>
      <error line="668" code="50015">Argument $subject is missing from the Docblock of describePatternMatch()</error>
      <critical line="686" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="694" code="50014">Name of argument $pattern does not match with the DocBlock's name $message in __construct()</error>
      <error line="694" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="715" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="734" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="740" code="50018">No DocBlock was found for property $type</error>
      <error line="742" code="50014">Name of argument $type does not match with the DocBlock's name $message in __construct()</error>
      <error line="742" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="781" code="50015">Argument $type is missing from the Docblock of canonicalType()</error>
      <error line="796" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <error line="817" code="50018">No DocBlock was found for property $type</error>
      <error line="819" code="50014">Name of argument $type does not match with the DocBlock's name $message in __construct()</error>
      <error line="819" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="840" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="854" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="860" code="50018">No DocBlock was found for property $method</error>
      <error line="862" code="50014">Name of argument $method does not match with the DocBlock's name $message in __construct()</error>
      <error line="862" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="882" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="899" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="905" code="50018">No DocBlock was found for property $name</error>
      <error line="907" code="50014">Name of argument $name does not match with the DocBlock's name $message in __construct()</error>
      <error line="907" code="50015">Argument $expected is missing from the Docblock of __construct()</error>
      <notice line="907" code="50013">Parameter $message could not be found in __construct()</notice>
      <error line="930" code="50015">Argument $actual is missing from the Docblock of testMessage()</error>
      <error line="940" code="50014">Name of argument $name does not match with the DocBlock's name $object in getProperty()</error>
      <error line="940" code="50015">Argument $object is missing from the Docblock of getProperty()</error>
      <error line="959" code="50014">Name of argument $name does not match with the DocBlock's name $object in getPrivatePropertyNoMatterWhat()</error>
      <error line="959" code="50015">Argument $object is missing from the Docblock of getPrivatePropertyNoMatterWhat()</error>
      <error line="973" code="50015">Argument $mangled is missing from the Docblock of unmangle()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/extensions/pear_test_case.php" hash="a836802c0bc67c47aee179979e847a6c" package="SimpleTest\Extensions">
    <docblock line="2">
      <description>adapter for SimpleTest to use PEAR PHPUnit test cases</description>
      <long-description></long-description>
      <tag line="2" name="package" description="SimpleTest"/>
      <tag line="2" name="subpackage" description="Extensions"/>
      <tag line="2" name="version" description="$Id: pear_test_case.php 1836 2008-12-21 00:02:26Z edwardzyang $"/>
    </docblock>
    <include line="12" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="24" package="Default">
      <extends>\SimpleTestCase</extends>
      <name>PHPUnit_TestCase</name>
      <full_name>\PHPUnit_TestCase</full_name>
      <docblock line="18">
        <description>Adapter for PEAR PHPUnit test case to allow
   legacy PEAR test cases to be used with SimpleTest.</description>
        <long-description>&lt;p&gt;@package      SimpleTest&lt;/p&gt;</long-description>
        <tag line="18" name="subpackage" description="Extensions"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="25" namespace="global" package="Default">
        <name>$_loosely_typed</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="27">
          <description>Constructor.</description>
          <long-description>&lt;p&gt;Sets the test name.&lt;/p&gt;</long-description>
          <tag line="27" name="param" description="Test name to display. @public" type="\global\" variable="$label"/>
        </docblock>
        <argument line="32">
          <name>$label</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Default">
        <name>assertEquals</name>
        <full_name>assertEquals</full_name>
        <docblock line="37">
          <description>Will test straight equality if set to loose
   typing, or identity if not.</description>
          <long-description>&lt;p&gt;@param $first          First value.&lt;/p&gt;</long-description>
          <tag line="37" name="param" description="Comparison value. @param $message Message to display. @public" type="\global\" variable="$second"/>
        </docblock>
        <argument line="45">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
        <argument line="45">
          <name>$delta</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="60" package="Default">
        <name>assertNotNull</name>
        <full_name>assertNotNull</full_name>
        <docblock line="54">
          <description>Passes if the value tested is not null.</description>
          <long-description>&lt;p&gt;@param $value          Value to test against.&lt;/p&gt;</long-description>
          <tag line="54" name="param" description="Message to display. @public" type="\global\" variable="$message"/>
        </docblock>
        <argument line="60">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="60">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="70" package="Default">
        <name>assertNull</name>
        <full_name>assertNull</full_name>
        <docblock line="64">
          <description>Passes if the value tested is null.</description>
          <long-description>&lt;p&gt;@param $value          Value to test against.&lt;/p&gt;</long-description>
          <tag line="64" name="param" description="Message to display. @public" type="\global\" variable="$message"/>
        </docblock>
        <argument line="70">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="70">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="81" package="Default">
        <name>assertSame</name>
        <full_name>assertSame</full_name>
        <docblock line="74">
          <description>Identity test tests for the same object.</description>
          <long-description>&lt;p&gt;@param $first          First object handle.&lt;/p&gt;</long-description>
          <tag line="74" name="param" description="Hopefully the same handle. @param $message Message to display. @public" type="\global\" variable="$second"/>
        </docblock>
        <argument line="81">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="81">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="81">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="101" package="Default">
        <name>assertNotSame</name>
        <full_name>assertNotSame</full_name>
        <docblock line="94">
          <description>Inverted identity test.</description>
          <long-description>&lt;p&gt;@param $first          First object handle.&lt;/p&gt;</long-description>
          <tag line="94" name="param" description="Hopefully a different handle. @param $message Message to display. @public" type="\global\" variable="$second"/>
        </docblock>
        <argument line="101">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="101">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="101">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="Default">
        <name>assertTrue</name>
        <full_name>assertTrue</full_name>
        <docblock line="114">
          <description>Sends pass if the test condition resolves true,
   a fail otherwise.</description>
          <long-description>&lt;p&gt;@param $condition      Condition to test true.&lt;/p&gt;</long-description>
          <tag line="114" name="param" description="Message to display. @public" type="\global\" variable="$message"/>
        </docblock>
        <argument line="121">
          <name>$condition</name>
          <default></default>
          <type/>
        </argument>
        <argument line="121">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="Default">
        <name>assertFalse</name>
        <full_name>assertFalse</full_name>
        <docblock line="125">
          <description>Sends pass if the test condition resolves false,
   a fail otherwise.</description>
          <long-description>&lt;p&gt;@param $condition      Condition to test false.&lt;/p&gt;</long-description>
          <tag line="125" name="param" description="Message to display. @public" type="\global\" variable="$message"/>
        </docblock>
        <argument line="132">
          <name>$condition</name>
          <default></default>
          <type/>
        </argument>
        <argument line="132">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="143" package="Default">
        <name>assertRegExp</name>
        <full_name>assertRegExp</full_name>
        <docblock line="136">
          <description>Tests a regex match.</description>
          <long-description>&lt;p&gt;Needs refactoring.&lt;/p&gt;</long-description>
          <tag line="136" name="param" description="Regex to match. @param $subject String to search in. @param $message Message to display. @public" type="\global\" variable="$pattern"/>
        </docblock>
        <argument line="143">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="143">
          <name>$subject</name>
          <default></default>
          <type/>
        </argument>
        <argument line="143">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="Default">
        <name>assertType</name>
        <full_name>assertType</full_name>
        <docblock line="147">
          <description>Tests the type of a value.</description>
          <long-description>&lt;p&gt;@param $value          Value to take type of.&lt;/p&gt;</long-description>
          <tag line="147" name="param" description="Hoped for type. @param $message Message to display. @public" type="\global\" variable="$type"/>
        </docblock>
        <argument line="154">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="154">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="154">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="165" package="Default">
        <name>setLooselyTyped</name>
        <full_name>setLooselyTyped</full_name>
        <docblock line="158">
          <description>Sets equality operation to act as a simple equal
   comparison only, allowing a broader range of
   matches.</description>
          <long-description>&lt;p&gt;@param $loosely_typed     True for broader comparison.&lt;/p&gt;</long-description>
          <tag line="158" name="public" description=""/>
        </docblock>
        <argument line="165">
          <name>$loosely_typed</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="175" package="Default">
        <name>countTestCases</name>
        <full_name>countTestCases</full_name>
        <docblock line="169">
          <description>For progress indication during
   a test amongst other things.</description>
          <long-description>&lt;p&gt;@return            Usually one.&lt;/p&gt;</long-description>
          <tag line="169" name="public" description=""/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="184" package="Default">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="179">
          <description>Accessor for name, normally just the class
   name.</description>
          <long-description>&lt;p&gt;@public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="193" package="Default">
        <name>setName</name>
        <full_name>setName</full_name>
        <docblock line="188">
          <description>Does nothing.</description>
          <long-description>&lt;p&gt;For compatibility only.&lt;/p&gt;</long-description>
          <tag line="188" name="param" description="Dummy @public" type="\global\" variable="$name"/>
        </docblock>
        <argument line="193">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="18" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="25" code="50018">No DocBlock was found for property $_loosely_typed</error>
      <error line="37" code="50014">Name of argument $first does not match with the DocBlock's name $second in assertEquals()</error>
      <error line="37" code="50015">Argument $second is missing from the Docblock of assertEquals()</error>
      <error line="37" code="50015">Argument $message is missing from the Docblock of assertEquals()</error>
      <error line="37" code="50015">Argument $delta is missing from the Docblock of assertEquals()</error>
      <error line="54" code="50014">Name of argument $value does not match with the DocBlock's name $message in assertNotNull()</error>
      <error line="54" code="50015">Argument $message is missing from the Docblock of assertNotNull()</error>
      <error line="64" code="50014">Name of argument $value does not match with the DocBlock's name $message in assertNull()</error>
      <error line="64" code="50015">Argument $message is missing from the Docblock of assertNull()</error>
      <error line="74" code="50014">Name of argument $first does not match with the DocBlock's name $second in assertSame()</error>
      <error line="74" code="50015">Argument $second is missing from the Docblock of assertSame()</error>
      <error line="74" code="50015">Argument $message is missing from the Docblock of assertSame()</error>
      <error line="94" code="50014">Name of argument $first does not match with the DocBlock's name $second in assertNotSame()</error>
      <error line="94" code="50015">Argument $second is missing from the Docblock of assertNotSame()</error>
      <error line="94" code="50015">Argument $message is missing from the Docblock of assertNotSame()</error>
      <error line="114" code="50014">Name of argument $condition does not match with the DocBlock's name $message in assertTrue()</error>
      <error line="114" code="50015">Argument $message is missing from the Docblock of assertTrue()</error>
      <error line="125" code="50014">Name of argument $condition does not match with the DocBlock's name $message in assertFalse()</error>
      <error line="125" code="50015">Argument $message is missing from the Docblock of assertFalse()</error>
      <error line="136" code="50015">Argument $subject is missing from the Docblock of assertRegExp()</error>
      <error line="136" code="50015">Argument $message is missing from the Docblock of assertRegExp()</error>
      <error line="147" code="50014">Name of argument $value does not match with the DocBlock's name $type in assertType()</error>
      <error line="147" code="50015">Argument $type is missing from the Docblock of assertType()</error>
      <error line="147" code="50015">Argument $message is missing from the Docblock of assertType()</error>
      <error line="158" code="50015">Argument $loosely_typed is missing from the Docblock of setLooselyTyped()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/extensions/testdox/test.php" hash="3fe0659667ff8bc054fefdd334a6ce58" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="9" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfTestDoxReporter</name>
      <full_name>\TestOfTestDoxReporter</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="11" package="Default">
        <name>testIsAnInstanceOfSimpleScorerAndReporter</name>
        <full_name>testIsAnInstanceOfSimpleScorerAndReporter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="17" package="Default">
        <name>testOutputsNameOfTestCase</name>
        <full_name>testOutputsNameOfTestCase</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="25" package="Default">
        <name>testOutputOfTestCaseNameFilteredByConstructParameter</name>
        <full_name>testOutputOfTestCaseNameFilteredByConstructParameter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Default">
        <name>testIfTest_case_patternIsEmptyAssumeEverythingMatches</name>
        <full_name>testIfTest_case_patternIsEmptyAssumeEverythingMatches</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Default">
        <name>testEmptyLineInsertedWhenCaseEnds</name>
        <full_name>testEmptyLineInsertedWhenCaseEnds</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="49" package="Default">
        <name>testPaintsTestMethodInTestDoxFormat</name>
        <full_name>testPaintsTestMethodInTestDoxFormat</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="64" package="Default">
        <name>testDoesNotOutputAnythingOnNoneTestMethods</name>
        <full_name>testDoesNotOutputAnythingOnNoneTestMethods</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="72" package="Default">
        <name>testPaintMethodAddLineBreak</name>
        <full_name>testPaintMethodAddLineBreak</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="Default">
        <name>testProperlySpacesSingleLettersInMethodName</name>
        <full_name>testProperlySpacesSingleLettersInMethodName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="88" package="Default">
        <name>testOnFailureThisPrintsFailureNotice</name>
        <full_name>testOnFailureThisPrintsFailureNotice</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="96" package="Default">
        <name>testWhenMatchingMethodNamesTestPrefixIsCaseInsensitive</name>
        <full_name>testWhenMatchingMethodNamesTestPrefixIsCaseInsensitive</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/extensions/testdox/test.php</error>
      <error line="9" code="50000">No DocBlock was found for \TestOfTestDoxReporter</error>
      <error line="11" code="50010">No DocBlock was found for method testIsAnInstanceOfSimpleScorerAndReporter()</error>
      <error line="17" code="50010">No DocBlock was found for method testOutputsNameOfTestCase()</error>
      <error line="25" code="50010">No DocBlock was found for method testOutputOfTestCaseNameFilteredByConstructParameter()</error>
      <error line="33" code="50010">No DocBlock was found for method testIfTest_case_patternIsEmptyAssumeEverythingMatches()</error>
      <error line="41" code="50010">No DocBlock was found for method testEmptyLineInsertedWhenCaseEnds()</error>
      <error line="49" code="50010">No DocBlock was found for method testPaintsTestMethodInTestDoxFormat()</error>
      <error line="64" code="50010">No DocBlock was found for method testDoesNotOutputAnythingOnNoneTestMethods()</error>
      <error line="72" code="50010">No DocBlock was found for method testPaintMethodAddLineBreak()</error>
      <error line="80" code="50010">No DocBlock was found for method testProperlySpacesSingleLettersInMethodName()</error>
      <error line="88" code="50010">No DocBlock was found for method testOnFailureThisPrintsFailureNotice()</error>
      <error line="96" code="50010">No DocBlock was found for method testWhenMatchingMethodNamesTestPrefixIsCaseInsensitive()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/extensions/testdox.php" hash="73f11526511d664ea11b3efdd2fc9830" package="SimpleTest\Extensions">
    <docblock line="2">
      <description>Extension for a TestDox reporter</description>
      <long-description></long-description>
      <tag line="2" name="package" description="SimpleTest"/>
      <tag line="2" name="subpackage" description="Extensions"/>
      <tag line="2" name="version" description="$Id: testdox.php 2004 2010-10-31 13:44:14Z jsweat $"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="SimpleTest\Extensions">
      <extends>\SimpleReporter</extends>
      <name>TestDoxReporter</name>
      <full_name>\TestDoxReporter</full_name>
      <docblock line="9">
        <description>TestDox reporter</description>
        <long-description></long-description>
        <tag line="9" name="package" description="SimpleTest"/>
        <tag line="9" name="subpackage" description="Extensions"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="16" namespace="global" package="Default">
        <name>$_test_case_pattern</name>
        <default>'/^TestOf(.*)$/'</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="18" package="SimpleTest\Extensions">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="18">
          <name>$test_case_pattern</name>
          <default>'/^TestOf(.*)$/'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="SimpleTest\Extensions">
        <name>paintCaseStart</name>
        <full_name>paintCaseStart</full_name>
        <argument line="23">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="SimpleTest\Extensions">
        <name>paintCaseEnd</name>
        <full_name>paintCaseEnd</full_name>
        <argument line="32">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="36" package="SimpleTest\Extensions">
        <name>paintMethodStart</name>
        <full_name>paintMethodStart</full_name>
        <argument line="36">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="SimpleTest\Extensions">
        <name>paintMethodEnd</name>
        <full_name>paintMethodEnd</full_name>
        <argument line="45">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="49" package="SimpleTest\Extensions">
        <name>paintFail</name>
        <full_name>paintFail</full_name>
        <argument line="49">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="16" code="50018">No DocBlock was found for property $_test_case_pattern</error>
      <error line="18" code="50010">No DocBlock was found for method __construct()</error>
      <error line="23" code="50010">No DocBlock was found for method paintCaseStart()</error>
      <error line="32" code="50010">No DocBlock was found for method paintCaseEnd()</error>
      <error line="36" code="50010">No DocBlock was found for method paintMethodStart()</error>
      <error line="45" code="50010">No DocBlock was found for method paintMethodEnd()</error>
      <error line="49" code="50010">No DocBlock was found for method paintFail()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/form.php" hash="6e90378af951013b84552d8bfadeba90" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Base include file for SimpleTest.</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: form.php 2013 2011-04-29 09:29:45Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="22" package="Default">
      <extends/>
      <name>SimpleForm</name>
      <full_name>\SimpleForm</full_name>
      <docblock line="17">
        <description>Form tag class to hold widget values.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="17" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="23" namespace="global" package="Default">
        <name>$method</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="24" namespace="global" package="Default">
        <name>$action</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="25" namespace="global" package="Default">
        <name>$encoding</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$default_target</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="27" namespace="global" package="Default">
        <name>$id</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="28" namespace="global" package="Default">
        <name>$buttons</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="29" namespace="global" package="Default">
        <name>$images</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="30" namespace="global" package="Default">
        <name>$widgets</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="31" namespace="global" package="Default">
        <name>$radios</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="32" namespace="global" package="Default">
        <name>$checkboxes</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="34">
          <description>Starts with no held controls/widgets.</description>
          <long-description>&lt;p&gt;@param SimpleTag $tag        Form tag to read.&lt;/p&gt;</long-description>
          <tag line="34" name="param" description="Holding page." type="\SimplePage" variable="$page">
            <type by_reference="false">\SimplePage</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
        <argument line="39">
          <name>$page</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="58" package="Default">
        <name>setEncodingClass</name>
        <full_name>setEncodingClass</full_name>
        <docblock line="52">
          <description>Creates the request packet to be sent by the form.</description>
          <long-description>&lt;p&gt;@param SimpleTag $tag        Form tag to read.&lt;/p&gt;</long-description>
          <tag line="52" name="return" description="Packet class.&#10;   @access private" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="Default">
        <name>setDefaultTarget</name>
        <full_name>setDefaultTarget</full_name>
        <docblock line="68">
          <description>Sets the frame target within a frameset.</description>
          <long-description>&lt;p&gt;@param string $frame        Name of frame.&lt;/p&gt;</long-description>
          <tag line="68" name="access" description="public"/>
        </docblock>
        <argument line="73">
          <name>$frame</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="82" package="Default">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="77">
          <description>Accessor for method of form submission.</description>
          <long-description>&lt;p&gt;@return string           Either get or post.&lt;/p&gt;</long-description>
          <tag line="77" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="93" package="Default">
        <name>createAction</name>
        <full_name>createAction</full_name>
        <docblock line="86">
          <description>Combined action attribute with current location
   to get an absolute form target.</description>
          <long-description>&lt;p&gt;@param string $action    Action attribute from form tag.&lt;/p&gt;</long-description>
          <tag line="86" name="param" description="Page location. @return SimpleUrl Absolute form target." type="\SimpleUrl" variable="$base">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$action</name>
          <default></default>
          <type/>
        </argument>
        <argument line="93">
          <name>$page</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="105" package="Default">
        <name>getAction</name>
        <full_name>getAction</full_name>
        <docblock line="100">
          <description>Absolute URL of the target.</description>
          <long-description>&lt;p&gt;@return SimpleUrl           URL target.&lt;/p&gt;</long-description>
          <tag line="100" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="122" package="Default">
        <name>encode</name>
        <full_name>encode</full_name>
        <docblock line="116">
          <description>Creates the encoding for the current values in the
   form.</description>
          <long-description>&lt;p&gt;@return SimpleFormEncoding    Request to submit.&lt;/p&gt;</long-description>
          <tag line="116" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="136" package="Default">
        <name>getId</name>
        <full_name>getId</full_name>
        <docblock line="131">
          <description>ID field of form for unique identification.</description>
          <long-description>&lt;p&gt;@return string           Unique tag ID.&lt;/p&gt;</long-description>
          <tag line="131" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="144" package="Default">
        <name>addWidget</name>
        <full_name>addWidget</full_name>
        <docblock line="140">
          <description>Adds a tag contents to the form.</description>
          <long-description>&lt;p&gt;@param SimpleWidget $tag        Input tag to add.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="144">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="160" package="Default">
        <name>setWidget</name>
        <full_name>setWidget</full_name>
        <docblock line="154">
          <description>Sets the widget into the form, grouping radio
   buttons if any.</description>
          <long-description>&lt;p&gt;@param SimpleWidget $tag   Incoming form control.&lt;/p&gt;</long-description>
          <tag line="154" name="access" description="private"/>
        </docblock>
        <argument line="160">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="175" package="Default">
        <name>addRadioButton</name>
        <full_name>addRadioButton</full_name>
        <docblock line="170">
          <description>Adds a radio button, building a group if necessary.</description>
          <long-description>&lt;p&gt;@param SimpleRadioButtonTag $tag   Incoming form control.&lt;/p&gt;</long-description>
          <tag line="170" name="access" description="private"/>
        </docblock>
        <argument line="175">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="188" package="Default">
        <name>addCheckbox</name>
        <full_name>addCheckbox</full_name>
        <docblock line="183">
          <description>Adds a checkbox, making it a group on a repeated name.</description>
          <long-description>&lt;p&gt;@param SimpleCheckboxTag $tag   Incoming form control.&lt;/p&gt;</long-description>
          <tag line="183" name="access" description="private"/>
        </docblock>
        <argument line="188">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="210" package="Default">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="203">
          <description>Extracts current value from form.</description>
          <long-description>&lt;p&gt;@param SimpleSelector $selector   Criteria to apply.&lt;/p&gt;</long-description>
          <tag line="203" name="return" description="Value(s) as string or null&#10;                                     if not set.&#10;   @access public" type="\string/array">
            <type by_reference="false">\string/array</type>
          </tag>
        </docblock>
        <argument line="210">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="233" package="Default">
        <name>setField</name>
        <full_name>setField</full_name>
        <docblock line="224">
          <description>Sets a widget value within the form.</description>
          <long-description>&lt;p&gt;@param SimpleSelector $selector   Criteria to apply.&lt;/p&gt;</long-description>
          <tag line="224" name="param" description="Value to input into the widget. @return boolean True if value is legal, false otherwise. If the field is not present, nothing will be set. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="233">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
        <argument line="233">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="233">
          <name>$position</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="255" package="Default">
        <name>attachLabelBySelector</name>
        <full_name>attachLabelBySelector</full_name>
        <docblock line="249">
          <description>Used by the page object to set widgets labels to
   external label tags.</description>
          <long-description>&lt;p&gt;@param SimpleSelector $selector   Criteria to apply.&lt;/p&gt;</long-description>
          <tag line="249" name="access" description="public"/>
        </docblock>
        <argument line="255">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
        <argument line="255">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="272" package="Default">
        <name>hasSubmit</name>
        <full_name>hasSubmit</full_name>
        <docblock line="266">
          <description>Test to see if a form has a submit button.</description>
          <long-description>&lt;p&gt;@param SimpleSelector $selector   Criteria to apply.&lt;/p&gt;</long-description>
          <tag line="266" name="return" description="True if present.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="272">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="287" package="Default">
        <name>hasImage</name>
        <full_name>hasImage</full_name>
        <docblock line="281">
          <description>Test to see if a form has an image control.</description>
          <long-description>&lt;p&gt;@param SimpleSelector $selector   Criteria to apply.&lt;/p&gt;</long-description>
          <tag line="281" name="return" description="True if present.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="287">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="305" package="Default">
        <name>submitButton</name>
        <full_name>submitButton</full_name>
        <docblock line="296">
          <description>Gets the submit values for a selected button.</description>
          <long-description>&lt;p&gt;@param SimpleSelector $selector   Criteria to apply.&lt;/p&gt;</long-description>
          <tag line="296" name="param" description="Additional data for the form. @return SimpleEncoding Submitted values or false if there is no such button in the form. @access public" type="\hash" variable="$additional">
            <type by_reference="false">\hash</type>
          </tag>
        </docblock>
        <argument line="305">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
        <argument line="305">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="331" package="Default">
        <name>submitImage</name>
        <full_name>submitImage</full_name>
        <docblock line="320">
          <description>Gets the submit values for an image.</description>
          <long-description>&lt;p&gt;@param SimpleSelector $selector   Criteria to apply.&lt;/p&gt;</long-description>
          <tag line="320" name="param" description="X-coordinate of click. @param integer $y Y-coordinate of click. @param hash $additional Additional data for the form. @return SimpleEncoding Submitted values or false if there is no such button in the form. @access public" type="integer" variable="$x">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="331">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
        <argument line="331">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
        <argument line="331">
          <name>$y</name>
          <default></default>
          <type/>
        </argument>
        <argument line="331">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="353" package="Default">
        <name>submit</name>
        <full_name>submit</full_name>
        <docblock line="346">
          <description>Simply submits the form without the submit button
   value.</description>
          <long-description>&lt;p&gt;Used when there is only one button or it
   is unimportant.&lt;/p&gt;</long-description>
          <tag line="346" name="return" description="Submitted values.&#10;   @access public" type="\hash">
            <type by_reference="false">\hash</type>
          </tag>
        </docblock>
        <argument line="353">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/form.php</error>
      <critical line="17" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="23" code="50018">No DocBlock was found for property $method</error>
      <error line="24" code="50018">No DocBlock was found for property $action</error>
      <error line="25" code="50018">No DocBlock was found for property $encoding</error>
      <error line="26" code="50018">No DocBlock was found for property $default_target</error>
      <error line="27" code="50018">No DocBlock was found for property $id</error>
      <error line="28" code="50018">No DocBlock was found for property $buttons</error>
      <error line="29" code="50018">No DocBlock was found for property $images</error>
      <error line="30" code="50018">No DocBlock was found for property $widgets</error>
      <error line="31" code="50018">No DocBlock was found for property $radios</error>
      <error line="32" code="50018">No DocBlock was found for property $checkboxes</error>
      <error line="34" code="50014">Name of argument $tag does not match with the DocBlock's name $page in __construct()</error>
      <error line="34" code="50015">Argument $page is missing from the Docblock of __construct()</error>
      <error line="52" code="50015">Argument $tag is missing from the Docblock of setEncodingClass()</error>
      <error line="68" code="50015">Argument $frame is missing from the Docblock of setDefaultTarget()</error>
      <error line="86" code="50014">Name of argument $action does not match with the DocBlock's name $base in createAction()</error>
      <error line="86" code="50015">Argument $page is missing from the Docblock of createAction()</error>
      <notice line="86" code="50013">Parameter $base could not be found in createAction()</notice>
      <error line="140" code="50015">Argument $tag is missing from the Docblock of addWidget()</error>
      <error line="154" code="50015">Argument $tag is missing from the Docblock of setWidget()</error>
      <error line="170" code="50015">Argument $tag is missing from the Docblock of addRadioButton()</error>
      <error line="183" code="50015">Argument $tag is missing from the Docblock of addCheckbox()</error>
      <error line="203" code="50015">Argument $selector is missing from the Docblock of getValue()</error>
      <error line="224" code="50014">Name of argument $selector does not match with the DocBlock's name $value in setField()</error>
      <error line="224" code="50015">Argument $value is missing from the Docblock of setField()</error>
      <error line="224" code="50015">Argument $position is missing from the Docblock of setField()</error>
      <error line="249" code="50015">Argument $selector is missing from the Docblock of attachLabelBySelector()</error>
      <error line="249" code="50015">Argument $label is missing from the Docblock of attachLabelBySelector()</error>
      <error line="266" code="50015">Argument $selector is missing from the Docblock of hasSubmit()</error>
      <error line="281" code="50015">Argument $selector is missing from the Docblock of hasImage()</error>
      <error line="296" code="50014">Name of argument $selector does not match with the DocBlock's name $additional in submitButton()</error>
      <error line="296" code="50015">Argument $additional is missing from the Docblock of submitButton()</error>
      <error line="320" code="50014">Name of argument $selector does not match with the DocBlock's name $x in submitImage()</error>
      <error line="320" code="50015">Argument $x is missing from the Docblock of submitImage()</error>
      <error line="320" code="50015">Argument $y is missing from the Docblock of submitImage()</error>
      <error line="320" code="50015">Argument $additional is missing from the Docblock of submitImage()</error>
      <error line="346" code="50015">Argument $additional is missing from the Docblock of submit()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/frames.php" hash="a109bbc8593a89913c0db5b431926dc8" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: frames.php 1784 2008-04-26 13:07:14Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="24" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleFrameset</name>
      <full_name>\SimpleFrameset</full_name>
      <docblock line="16">
        <description>A composite page.</description>
        <long-description>&lt;p&gt;Wraps a frameset page and
   adds subframes. The original page will be
   mostly ignored. Implements the SimplePage
   interface so as to be interchangeable.&lt;/p&gt;</long-description>
        <tag line="16" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="25" namespace="global" package="Default">
        <name>$frameset</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$frames</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="27" namespace="global" package="Default">
        <name>$focus</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="28" namespace="global" package="Default">
        <name>$names</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="35" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="30">
          <description>Stashes the frameset page.</description>
          <long-description>&lt;p&gt;Will make use of the
   browser to fetch the sub frames recursively.&lt;/p&gt;</long-description>
          <tag line="30" name="param" description="Frameset page." type="\SimplePage" variable="$page">
            <type by_reference="false">\SimplePage</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$page</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addFrame</name>
        <full_name>addFrame</full_name>
        <docblock line="42">
          <description>Adds a parsed page to the frameset.</description>
          <long-description>&lt;p&gt;@param SimplePage $page    Frame page.&lt;/p&gt;</long-description>
          <tag line="42" name="param" description="Name of frame in frameset. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$page</name>
          <default></default>
          <type/>
        </argument>
        <argument line="48">
          <name>$name</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="63" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setFrame</name>
        <full_name>setFrame</full_name>
        <docblock line="55">
          <description>Replaces existing frame with another.</description>
          <long-description>&lt;p&gt;If the
   frame is nested, then the call is passed down
   one level.&lt;/p&gt;</long-description>
          <tag line="55" name="param" description="Path of frame in frameset. @param SimplePage $page Frame source. @access public" type="array" variable="$path">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$page</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getFrameFocus</name>
        <full_name>getFrameFocus</full_name>
        <docblock line="77">
          <description>Accessor for current frame focus.</description>
          <long-description>&lt;p&gt;Will be
   false if no frame has focus. Will have the nested
   frame focus if any.&lt;/p&gt;</long-description>
          <tag line="77" name="return" description="Labels or indexes of nested frames.&#10;   @access public" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="101" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getPublicNameFromIndex</name>
        <full_name>getPublicNameFromIndex</full_name>
        <docblock line="93">
          <description>Turns an internal array index into the frames list
   into a public name, or if none, then a one offset
   index.</description>
          <long-description>&lt;p&gt;@param integer $subject    Internal index.&lt;/p&gt;</long-description>
          <tag line="93" name="return" description="Public name.&#10;   @access private" type="\integer/string">
            <type by_reference="false">\integer/string</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$subject</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="118" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setFrameFocusByIndex</name>
        <full_name>setFrameFocusByIndex</full_name>
        <docblock line="110">
          <description>Sets the focus by index.</description>
          <long-description>&lt;p&gt;The integer index starts from 1.
   If already focused and the target frame also has frames,
   then the nested frame will be focused.&lt;/p&gt;</long-description>
          <tag line="110" name="param" description="Chosen frame. @return boolean True if frame exists. @access public" type="integer" variable="$choice">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$choice</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setFrameFocus</name>
        <full_name>setFrameFocus</full_name>
        <docblock line="131">
          <description>Sets the focus by name.</description>
          <long-description>&lt;p&gt;If already focused and the
   target frame also has frames, then the nested frame
   will be focused.&lt;/p&gt;</long-description>
          <tag line="131" name="param" description="Chosen frame. @return boolean True if frame exists. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="156" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clearFrameFocus</name>
        <full_name>clearFrameFocus</full_name>
        <docblock line="152">
          <description>Clears the frame focus.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="165" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clearNestedFramesFocus</name>
        <full_name>clearNestedFramesFocus</full_name>
        <docblock line="161">
          <description>Clears the frame focus for any nested frames.</description>
          <long-description>&lt;p&gt;@access private&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="176" package="SimpleTest&#10;   @subpackage WebTester">
        <name>hasFrames</name>
        <full_name>hasFrames</full_name>
        <docblock line="171">
          <description>Test for the presence of a frameset.</description>
          <long-description>&lt;p&gt;@return boolean        Always true.&lt;/p&gt;</long-description>
          <tag line="171" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="187" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getFrames</name>
        <full_name>getFrames</full_name>
        <docblock line="180">
          <description>Accessor for frames information.</description>
          <long-description>&lt;p&gt;@return array/string      Recursive hash of frame URL strings.
                             The key is either a numerical
                             index or the name attribute.&lt;/p&gt;</long-description>
          <tag line="180" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="202" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getRaw</name>
        <full_name>getRaw</full_name>
        <docblock line="196">
          <description>Accessor for raw text of either all the pages or
   the frame in focus.</description>
          <long-description>&lt;p&gt;@return string        Raw unparsed content.&lt;/p&gt;</long-description>
          <tag line="196" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="219" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getText</name>
        <full_name>getText</full_name>
        <docblock line="213">
          <description>Accessor for plain text of either all the pages or
   the frame in focus.</description>
          <long-description>&lt;p&gt;@return string        Plain text content.&lt;/p&gt;</long-description>
          <tag line="213" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="235" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getTransportError</name>
        <full_name>getTransportError</full_name>
        <docblock line="230">
          <description>Accessor for last error.</description>
          <long-description>&lt;p&gt;@return string        Error from last response.&lt;/p&gt;</long-description>
          <tag line="230" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="247" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="242">
          <description>Request method used to fetch this frame.</description>
          <long-description>&lt;p&gt;@return string      GET, POST or HEAD.&lt;/p&gt;</long-description>
          <tag line="242" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="259" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getUrl</name>
        <full_name>getUrl</full_name>
        <docblock line="254">
          <description>Original resource name.</description>
          <long-description>&lt;p&gt;@return SimpleUrl        Current url.&lt;/p&gt;</long-description>
          <tag line="254" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="274" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getBaseUrl</name>
        <full_name>getBaseUrl</full_name>
        <docblock line="269">
          <description>Page base URL.</description>
          <long-description>&lt;p&gt;@return SimpleUrl        Current url.&lt;/p&gt;</long-description>
          <tag line="269" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="290" package="SimpleTest&#10;   @subpackage WebTester">
        <name>expandUrl</name>
        <full_name>expandUrl</full_name>
        <docblock line="283">
          <description>Expands expandomatic URLs into fully qualified
   URLs for the frameset page.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url        Relative URL.&lt;/p&gt;</long-description>
          <tag line="283" name="return" description="Absolute URL.&#10;   @access public" type="\SimpleUrl">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="290">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="299" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getRequestData</name>
        <full_name>getRequestData</full_name>
        <docblock line="294">
          <description>Original request data.</description>
          <long-description>&lt;p&gt;@return mixed              Sent content.&lt;/p&gt;</long-description>
          <tag line="294" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="311" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getMimeType</name>
        <full_name>getMimeType</full_name>
        <docblock line="306">
          <description>Accessor for current MIME type.</description>
          <long-description>&lt;p&gt;@return string    MIME type as string; e.g. 'text/html'&lt;/p&gt;</long-description>
          <tag line="306" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="323" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getResponseCode</name>
        <full_name>getResponseCode</full_name>
        <docblock line="318">
          <description>Accessor for last response code.</description>
          <long-description>&lt;p&gt;@return integer    Last HTTP response code received.&lt;/p&gt;</long-description>
          <tag line="318" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="336" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getAuthentication</name>
        <full_name>getAuthentication</full_name>
        <docblock line="330">
          <description>Accessor for last Authentication type.</description>
          <long-description>&lt;p&gt;Only valid
   straight after a challenge (401).&lt;/p&gt;</long-description>
          <tag line="330" name="return" description="Description of challenge type.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="349" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getRealm</name>
        <full_name>getRealm</full_name>
        <docblock line="343">
          <description>Accessor for last Authentication realm.</description>
          <long-description>&lt;p&gt;Only valid
   straight after a challenge (401).&lt;/p&gt;</long-description>
          <tag line="343" name="return" description="Name of security realm.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="361" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getRequest</name>
        <full_name>getRequest</full_name>
        <docblock line="356">
          <description>Accessor for outgoing header information.</description>
          <long-description>&lt;p&gt;@return string      Header block.&lt;/p&gt;</long-description>
          <tag line="356" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="373" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getHeaders</name>
        <full_name>getHeaders</full_name>
        <docblock line="368">
          <description>Accessor for raw header information.</description>
          <long-description>&lt;p&gt;@return string      Header block.&lt;/p&gt;</long-description>
          <tag line="368" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="385" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getTitle</name>
        <full_name>getTitle</full_name>
        <docblock line="380">
          <description>Accessor for parsed title.</description>
          <long-description>&lt;p&gt;@return string     Title or false if no title is present.&lt;/p&gt;</long-description>
          <tag line="380" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="394" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getUrls</name>
        <full_name>getUrls</full_name>
        <docblock line="389">
          <description>Accessor for a list of all fixed links.</description>
          <long-description>&lt;p&gt;@return array   List of urls as strings.&lt;/p&gt;</long-description>
          <tag line="389" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="412" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getUrlsByLabel</name>
        <full_name>getUrlsByLabel</full_name>
        <docblock line="405">
          <description>Accessor for URLs by the link label.</description>
          <long-description>&lt;p&gt;Label will match
   regardess of whitespace issues and case.&lt;/p&gt;</long-description>
          <tag line="405" name="param" description="Text of link. @return array List of links with that label. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="412">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="438" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getUrlById</name>
        <full_name>getUrlById</full_name>
        <docblock line="429">
          <description>Accessor for a URL by the id attribute.</description>
          <long-description>&lt;p&gt;If in a frameset
   then the first link found with that ID attribute is
   returned only. Focus on a frame if you want one from
   a specific part of the frameset.&lt;/p&gt;</long-description>
          <tag line="429" name="param" description="Id attribute of link. @return string URL with that id. @access public" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="438">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="457" package="SimpleTest&#10;   @subpackage WebTester">
        <name>tagUrlsWithFrame</name>
        <full_name>tagUrlsWithFrame</full_name>
        <docblock line="450">
          <description>Attaches the intended frame index to a list of URLs.</description>
          <long-description>&lt;p&gt;@param array $urls        List of SimpleUrls.&lt;/p&gt;</long-description>
          <tag line="450" name="param" description="Name of frame or index. @return array List of tagged URLs. @access private" type="string" variable="$frame">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="457">
          <name>$urls</name>
          <default></default>
          <type/>
        </argument>
        <argument line="457">
          <name>$frame</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="476" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getFormBySubmit</name>
        <full_name>getFormBySubmit</full_name>
        <docblock line="468">
          <description>Finds a held form by button label.</description>
          <long-description>&lt;p&gt;Will only
   search correctly built forms.&lt;/p&gt;</long-description>
          <tag line="468" name="param" description="Button finder. @return SimpleForm Form object containing the button. @access public" type="\SimpleSelector" variable="$selector">
            <type by_reference="false">\SimpleSelector</type>
          </tag>
        </docblock>
        <argument line="476">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="490" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getFormByImage</name>
        <full_name>getFormByImage</full_name>
        <docblock line="480">
          <description>Finds a held form by image using a selector.</description>
          <long-description>&lt;p&gt;Will only search correctly built forms. The first
   form found either within the focused frame, or
   across frames, will be the one returned.&lt;/p&gt;</long-description>
          <tag line="480" name="param" description="Image finder. @return SimpleForm Form object containing the image. @access public" type="\SimpleSelector" variable="$selector">
            <type by_reference="false">\SimpleSelector</type>
          </tag>
        </docblock>
        <argument line="490">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="504" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getFormById</name>
        <full_name>getFormById</full_name>
        <docblock line="494">
          <description>Finds a held form by the form ID.</description>
          <long-description>&lt;p&gt;A way of
   identifying a specific form when we have control
   of the HTML code. The first form found
   either within the focused frame, or across frames,
   will be the one returned.&lt;/p&gt;</long-description>
          <tag line="494" name="param" description="Form label. @return SimpleForm Form object containing the matching ID. @access public" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="504">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="516" package="SimpleTest&#10;   @subpackage WebTester">
        <name>findForm</name>
        <full_name>findForm</full_name>
        <docblock line="508">
          <description>General form finder.</description>
          <long-description>&lt;p&gt;Will search all the frames or
   just the one in focus.&lt;/p&gt;</long-description>
          <tag line="508" name="param" description="Method to use to find in a page. @param string $attribute Label, name or ID. @return SimpleForm Form object containing the matching ID. @access private" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="516">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="516">
          <name>$attribute</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="548" package="SimpleTest&#10;   @subpackage WebTester">
        <name>findFormInFrame</name>
        <full_name>findFormInFrame</full_name>
        <docblock line="538">
          <description>Finds a form in a page using a form finding method.</description>
          <long-description>&lt;p&gt;Will
   also tag the form with the frame name it belongs in.&lt;/p&gt;</long-description>
          <tag line="538" name="param" description="Page content of frame. @param integer $index Internal frame representation. @param string $method Method to use to find in a page. @param string $attribute Label, name or ID. @return SimpleForm Form object containing the matching ID. @access private" type="\SimplePage" variable="$page">
            <type by_reference="false">\SimplePage</type>
          </tag>
        </docblock>
        <argument line="548">
          <name>$page</name>
          <default></default>
          <type/>
        </argument>
        <argument line="548">
          <name>$index</name>
          <default></default>
          <type/>
        </argument>
        <argument line="548">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="548">
          <name>$attribute</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="564" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setField</name>
        <full_name>setField</full_name>
        <docblock line="556">
          <description>Sets a field on each form in which the field is
   available.</description>
          <long-description>&lt;p&gt;@param SimpleSelector $selector    Field finder.&lt;/p&gt;</long-description>
          <tag line="556" name="param" description="Value to set field to. @return boolean True if value is valid. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="564">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
        <argument line="564">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="582" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getField</name>
        <full_name>getField</full_name>
        <docblock line="574">
          <description>Accessor for a form element value within a page.</description>
          <long-description>&lt;p&gt;@param SimpleSelector $selector    Field finder.&lt;/p&gt;</long-description>
          <tag line="574" name="return" description="A string if the field is&#10;                                      present, false if unchecked&#10;                                      and null if missing.&#10;   @access public" type="\string/boolean">
            <type by_reference="false">\string/boolean</type>
          </tag>
        </docblock>
        <argument line="582">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/frames.php</error>
      <error line="25" code="50018">No DocBlock was found for property $frameset</error>
      <error line="26" code="50018">No DocBlock was found for property $frames</error>
      <error line="27" code="50018">No DocBlock was found for property $focus</error>
      <error line="28" code="50018">No DocBlock was found for property $names</error>
      <error line="42" code="50014">Name of argument $page does not match with the DocBlock's name $name in addFrame()</error>
      <error line="42" code="50015">Argument $name is missing from the Docblock of addFrame()</error>
      <error line="55" code="50015">Argument $page is missing from the Docblock of setFrame()</error>
      <error line="93" code="50015">Argument $subject is missing from the Docblock of getPublicNameFromIndex()</error>
      <error line="283" code="50015">Argument $url is missing from the Docblock of expandUrl()</error>
      <error line="450" code="50014">Name of argument $urls does not match with the DocBlock's name $frame in tagUrlsWithFrame()</error>
      <error line="450" code="50015">Argument $frame is missing from the Docblock of tagUrlsWithFrame()</error>
      <error line="508" code="50015">Argument $attribute is missing from the Docblock of findForm()</error>
      <error line="538" code="50015">Argument $index is missing from the Docblock of findFormInFrame()</error>
      <error line="538" code="50015">Argument $method is missing from the Docblock of findFormInFrame()</error>
      <error line="538" code="50015">Argument $attribute is missing from the Docblock of findFormInFrame()</error>
      <error line="556" code="50014">Name of argument $selector does not match with the DocBlock's name $value in setField()</error>
      <error line="556" code="50015">Argument $value is missing from the Docblock of setField()</error>
      <error line="574" code="50015">Argument $selector is missing from the Docblock of getField()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/http.php" hash="91cd6f254f48b760d39c16525cf30765" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: http.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="23" package="Default">
      <extends/>
      <name>SimpleRoute</name>
      <full_name>\SimpleRoute</full_name>
      <docblock line="17">
        <description>Creates HTTP headers for the end point of
   a HTTP request.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="17" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="24" namespace="global" package="Default">
        <name>$url</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="26">
          <description>Sets the target URL.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url   URL as object.&lt;/p&gt;</long-description>
          <tag line="26" name="access" description="public"/>
        </docblock>
        <argument line="31">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="40" package="Default">
        <name>getUrl</name>
        <full_name>getUrl</full_name>
        <docblock line="35">
          <description>Resource name.</description>
          <long-description>&lt;p&gt;@return SimpleUrl        Current url.&lt;/p&gt;</long-description>
          <tag line="35" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="50" package="Default">
        <name>getRequestLine</name>
        <full_name>getRequestLine</full_name>
        <docblock line="44">
          <description>Creates the first line which is the actual request.</description>
          <long-description>&lt;p&gt;@param string $method   HTTP request method, usually GET.&lt;/p&gt;</long-description>
          <tag line="44" name="return" description="Request line content.&#10;   @access protected" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="60" package="Default">
        <name>getHostLine</name>
        <full_name>getHostLine</full_name>
        <docblock line="55">
          <description>Creates the host part of the request.</description>
          <long-description>&lt;p&gt;@return string          Host line content.&lt;/p&gt;</long-description>
          <tag line="55" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="Default">
        <name>createConnection</name>
        <full_name>createConnection</full_name>
        <docblock line="68">
          <description>Opens a socket to the route.</description>
          <long-description>&lt;p&gt;@param string $method      HTTP request method, usually GET.&lt;/p&gt;</long-description>
          <tag line="68" name="param" description="Connection timeout. @return SimpleSocket New socket. @access public" type="integer" variable="$timeout">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="75">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="99" package="Default">
        <name>createSocket</name>
        <full_name>createSocket</full_name>
        <docblock line="90">
          <description>Factory for socket.</description>
          <long-description>&lt;p&gt;@param string $scheme                   Protocol to use.&lt;/p&gt;</long-description>
          <tag line="90" name="param" description="Hostname to connect to. @param integer $port Remote port. @param integer $timeout Connection timeout. @return SimpleSocket/SimpleSecureSocket New socket. @access protected" type="string" variable="$host">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$scheme</name>
          <default></default>
          <type/>
        </argument>
        <argument line="99">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="99">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="99">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="116" package="Default">
      <extends>\SimpleRoute</extends>
      <name>SimpleProxyRoute</name>
      <full_name>\SimpleProxyRoute</full_name>
      <docblock line="110">
        <description>Creates HTTP headers for the end point of
   a HTTP request via a proxy server.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="110" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="117" namespace="global" package="Default">
        <name>$proxy</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="118" namespace="global" package="Default">
        <name>$username</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="119" namespace="global" package="Default">
        <name>$password</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="129" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="121">
          <description>Stashes the proxy address.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url     URL as object.&lt;/p&gt;</long-description>
          <tag line="121" name="param" description="Proxy URL. @param string $username Username for autentication. @param string $password Password for autentication. @access public" type="string" variable="$proxy">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="129">
          <name>$proxy</name>
          <default></default>
          <type/>
        </argument>
        <argument line="129">
          <name>$username</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="129">
          <name>$password</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="143" package="Default">
        <name>getRequestLine</name>
        <full_name>getRequestLine</full_name>
        <docblock line="136">
          <description>Creates the first line which is the actual request.</description>
          <long-description>&lt;p&gt;@param string $method   HTTP request method, usually GET.&lt;/p&gt;</long-description>
          <tag line="136" name="param" description="URL as object. @return string Request line content. @access protected" type="\SimpleUrl" variable="$url">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="157" package="Default">
        <name>getHostLine</name>
        <full_name>getHostLine</full_name>
        <docblock line="151">
          <description>Creates the host part of the request.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url   URL as object.&lt;/p&gt;</long-description>
          <tag line="151" name="return" description="Host line content.&#10;   @access protected" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="170" package="Default">
        <name>createConnection</name>
        <full_name>createConnection</full_name>
        <docblock line="163">
          <description>Opens a socket to the route.</description>
          <long-description>&lt;p&gt;@param string $method       HTTP request method, usually GET.&lt;/p&gt;</long-description>
          <tag line="163" name="param" description="Connection timeout. @return SimpleSocket New socket. @access public" type="integer" variable="$timeout">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="170">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="170">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="197" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleHttpRequest</name>
      <full_name>\SimpleHttpRequest</full_name>
      <docblock line="191">
        <description>HTTP request for a web page.</description>
        <long-description>&lt;p&gt;Factory for
   HttpResponse object.&lt;/p&gt;</long-description>
        <tag line="191" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="198" namespace="global" package="Default">
        <name>$route</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="199" namespace="global" package="Default">
        <name>$encoding</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="200" namespace="global" package="Default">
        <name>$headers</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="201" namespace="global" package="Default">
        <name>$cookies</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="212" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="203">
          <description>Builds the socket request from the different pieces.</description>
          <long-description>&lt;p&gt;These include proxy information, URL, cookies, headers,
   request method and choice of encoding.&lt;/p&gt;</long-description>
          <tag line="203" name="param" description="Request route. @param SimpleFormEncoding $encoding Content to send with request. @access public" type="\SimpleRoute" variable="$route">
            <type by_reference="false">\SimpleRoute</type>
          </tag>
        </docblock>
        <argument line="212">
          <name>$route</name>
          <default></default>
          <type/>
        </argument>
        <argument line="212">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="227" package="SimpleTest&#10;   @subpackage WebTester">
        <name>fetch</name>
        <full_name>fetch</full_name>
        <docblock line="219">
          <description>Dispatches the content to the route's socket.</description>
          <long-description>&lt;p&gt;@param integer $timeout      Connection timeout.&lt;/p&gt;</long-description>
          <tag line="219" name="return" description="A response which may only have&#10;                                an error, but hopefully has a&#10;                                complete web page.&#10;   @access public" type="\SimpleHttpResponse">
            <type by_reference="false">\SimpleHttpResponse</type>
          </tag>
        </docblock>
        <argument line="227">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="243" package="SimpleTest&#10;   @subpackage WebTester">
        <name>dispatchRequest</name>
        <full_name>dispatchRequest</full_name>
        <docblock line="235">
          <description>Sends the headers.</description>
          <long-description>&lt;p&gt;@param SimpleSocket $socket           Open socket.&lt;/p&gt;</long-description>
          <tag line="235" name="param" description="HTTP request method, usually GET. @param SimpleFormEncoding $encoding Content to send with request. @access private" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="243">
          <name>$socket</name>
          <default></default>
          <type/>
        </argument>
        <argument line="243">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="260" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addHeaderLine</name>
        <full_name>addHeaderLine</full_name>
        <docblock line="255">
          <description>Adds a header line to the request.</description>
          <long-description>&lt;p&gt;@param string $header_line    Text of full header line.&lt;/p&gt;</long-description>
          <tag line="255" name="access" description="public"/>
        </docblock>
        <argument line="260">
          <name>$header_line</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="271" package="SimpleTest&#10;   @subpackage WebTester">
        <name>readCookiesFromJar</name>
        <full_name>readCookiesFromJar</full_name>
        <docblock line="264">
          <description>Reads all the relevant cookies from the
   cookie jar.</description>
          <long-description>&lt;p&gt;@param SimpleCookieJar $jar     Jar to read&lt;/p&gt;</long-description>
          <tag line="264" name="param" description="Url to use for scope. @access public" type="\SimpleUrl" variable="$url">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="271">
          <name>$jar</name>
          <default></default>
          <type/>
        </argument>
        <argument line="271">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="281" package="SimpleTest&#10;   @subpackage WebTester">
        <name>createResponse</name>
        <full_name>createResponse</full_name>
        <docblock line="275">
          <description>Wraps the socket in a response parser.</description>
          <long-description>&lt;p&gt;@param SimpleSocket $socket   Responding socket.&lt;/p&gt;</long-description>
          <tag line="275" name="return" description="Parsed response object.&#10;   @access protected" type="\SimpleHttpResponse">
            <type by_reference="false">\SimpleHttpResponse</type>
          </tag>
        </docblock>
        <argument line="281">
          <name>$socket</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="296" package="Default">
      <extends/>
      <name>SimpleHttpHeaders</name>
      <full_name>\SimpleHttpHeaders</full_name>
      <docblock line="291">
        <description>Collection of header lines in the response.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="291" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="297" namespace="global" package="Default">
        <name>$raw_headers</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="298" namespace="global" package="Default">
        <name>$response_code</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="299" namespace="global" package="Default">
        <name>$http_version</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="300" namespace="global" package="Default">
        <name>$mime_type</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="301" namespace="global" package="Default">
        <name>$location</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="302" namespace="global" package="Default">
        <name>$cookies</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="303" namespace="global" package="Default">
        <name>$authentication</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="304" namespace="global" package="Default">
        <name>$realm</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="311" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="306">
          <description>Parses the incoming header block.</description>
          <long-description>&lt;p&gt;@param string $headers     Header block.&lt;/p&gt;</long-description>
          <tag line="306" name="access" description="public"/>
        </docblock>
        <argument line="311">
          <name>$headers</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="330" package="Default">
        <name>getHttpVersion</name>
        <full_name>getHttpVersion</full_name>
        <docblock line="325">
          <description>Accessor for parsed HTTP protocol version.</description>
          <long-description>&lt;p&gt;@return integer           HTTP error code.&lt;/p&gt;</long-description>
          <tag line="325" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="339" package="Default">
        <name>getRaw</name>
        <full_name>getRaw</full_name>
        <docblock line="334">
          <description>Accessor for raw header block.</description>
          <long-description>&lt;p&gt;@return string        All headers as raw string.&lt;/p&gt;</long-description>
          <tag line="334" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="348" package="Default">
        <name>getResponseCode</name>
        <full_name>getResponseCode</full_name>
        <docblock line="343">
          <description>Accessor for parsed HTTP error code.</description>
          <long-description>&lt;p&gt;@return integer           HTTP error code.&lt;/p&gt;</long-description>
          <tag line="343" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="358" package="Default">
        <name>getLocation</name>
        <full_name>getLocation</full_name>
        <docblock line="352">
          <description>Returns the redirected URL or false if
   no redirection.</description>
          <long-description>&lt;p&gt;@return string      URL or false for none.&lt;/p&gt;</long-description>
          <tag line="352" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="367" package="Default">
        <name>isRedirect</name>
        <full_name>isRedirect</full_name>
        <docblock line="362">
          <description>Test to see if the response is a valid redirect.</description>
          <long-description>&lt;p&gt;@return boolean       True if valid redirect.&lt;/p&gt;</long-description>
          <tag line="362" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="378" package="Default">
        <name>isChallenge</name>
        <full_name>isChallenge</full_name>
        <docblock line="372">
          <description>Test to see if the response is an authentication
   challenge.</description>
          <long-description>&lt;p&gt;@return boolean       True if challenge.&lt;/p&gt;</long-description>
          <tag line="372" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="389" package="Default">
        <name>getMimeType</name>
        <full_name>getMimeType</full_name>
        <docblock line="384">
          <description>Accessor for MIME type header information.</description>
          <long-description>&lt;p&gt;@return string           MIME type.&lt;/p&gt;</long-description>
          <tag line="384" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="398" package="Default">
        <name>getAuthentication</name>
        <full_name>getAuthentication</full_name>
        <docblock line="393">
          <description>Accessor for authentication type.</description>
          <long-description>&lt;p&gt;@return string        Type.&lt;/p&gt;</long-description>
          <tag line="393" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="407" package="Default">
        <name>getRealm</name>
        <full_name>getRealm</full_name>
        <docblock line="402">
          <description>Accessor for security realm.</description>
          <long-description>&lt;p&gt;@return string        Realm.&lt;/p&gt;</long-description>
          <tag line="402" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="417" package="Default">
        <name>writeCookiesToJar</name>
        <full_name>writeCookiesToJar</full_name>
        <docblock line="411">
          <description>Writes new cookies to the cookie jar.</description>
          <long-description>&lt;p&gt;@param SimpleCookieJar $jar   Jar to write to.&lt;/p&gt;</long-description>
          <tag line="411" name="param" description="Host and path to write under. @access public" type="\SimpleUrl" variable="$url">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="417">
          <name>$jar</name>
          <default></default>
          <type/>
        </argument>
        <argument line="417">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="434" package="Default">
        <name>parseHeaderLine</name>
        <full_name>parseHeaderLine</full_name>
        <docblock line="428">
          <description>Called on each header line to accumulate the held
   data within the class.</description>
          <long-description>&lt;p&gt;@param string $header_line        One line of header.&lt;/p&gt;</long-description>
          <tag line="428" name="access" description="protected"/>
        </docblock>
        <argument line="434">
          <name>$header_line</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="460" package="Default">
        <name>parseCookie</name>
        <full_name>parseCookie</full_name>
        <docblock line="454">
          <description>Parse the Set-cookie content.</description>
          <long-description>&lt;p&gt;@param string $cookie_line    Text after "Set-cookie:"&lt;/p&gt;</long-description>
          <tag line="454" name="return" description="New cookie object.&#10;   @access private" type="\SimpleCookie">
            <type by_reference="false">\SimpleCookie</type>
          </tag>
        </docblock>
        <argument line="460">
          <name>$cookie_line</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="482" package="Default">
      <extends>\SimpleStickyError</extends>
      <name>SimpleHttpResponse</name>
      <full_name>\SimpleHttpResponse</full_name>
      <docblock line="477">
        <description>Basic HTTP response.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="477" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="483" namespace="global" package="Default">
        <name>$url</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="484" namespace="global" package="Default">
        <name>$encoding</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="485" namespace="global" package="Default">
        <name>$sent</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="486" namespace="global" package="Default">
        <name>$content</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="487" namespace="global" package="Default">
        <name>$headers</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="498" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="489">
          <description>Constructor.</description>
          <long-description>&lt;p&gt;Reads and parses the incoming
   content and headers.&lt;/p&gt;</long-description>
          <tag line="489" name="param" description="Network connection to fetch response text from. @param SimpleUrl $url Resource name. @param mixed $encoding Record of content sent. @access public" type="\SimpleSocket" variable="$socket">
            <type by_reference="false">\SimpleSocket</type>
          </tag>
        </docblock>
        <argument line="498">
          <name>$socket</name>
          <default></default>
          <type/>
        </argument>
        <argument line="498">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="498">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="517" package="Default">
        <name>parse</name>
        <full_name>parse</full_name>
        <docblock line="512">
          <description>Splits up the headers and the rest of the content.</description>
          <long-description>&lt;p&gt;@param string $raw    Content to parse.&lt;/p&gt;</long-description>
          <tag line="512" name="access" description="private"/>
        </docblock>
        <argument line="517">
          <name>$raw</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="538" package="Default">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="533">
          <description>Original request method.</description>
          <long-description>&lt;p&gt;@return string        GET, POST or HEAD.&lt;/p&gt;</long-description>
          <tag line="533" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="547" package="Default">
        <name>getUrl</name>
        <full_name>getUrl</full_name>
        <docblock line="542">
          <description>Resource name.</description>
          <long-description>&lt;p&gt;@return SimpleUrl        Current url.&lt;/p&gt;</long-description>
          <tag line="542" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="556" package="Default">
        <name>getRequestData</name>
        <full_name>getRequestData</full_name>
        <docblock line="551">
          <description>Original request data.</description>
          <long-description>&lt;p&gt;@return mixed              Sent content.&lt;/p&gt;</long-description>
          <tag line="551" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="565" package="Default">
        <name>getSent</name>
        <full_name>getSent</full_name>
        <docblock line="560">
          <description>Raw request that was sent down the wire.</description>
          <long-description>&lt;p&gt;@return string        Bytes actually sent.&lt;/p&gt;</long-description>
          <tag line="560" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="575" package="Default">
        <name>getContent</name>
        <full_name>getContent</full_name>
        <docblock line="569">
          <description>Accessor for the content after the last
   header line.</description>
          <long-description>&lt;p&gt;@return string           All content.&lt;/p&gt;</long-description>
          <tag line="569" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="585" package="Default">
        <name>getHeaders</name>
        <full_name>getHeaders</full_name>
        <docblock line="579">
          <description>Accessor for header block.</description>
          <long-description>&lt;p&gt;The response is the
   combination of this and the content.&lt;/p&gt;</long-description>
          <tag line="579" name="return" description="Wrapped header block.&#10;   @access public" type="\SimpleHeaders">
            <type by_reference="false">\SimpleHeaders</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="594" package="Default">
        <name>getNewCookies</name>
        <full_name>getNewCookies</full_name>
        <docblock line="589">
          <description>Accessor for any new cookies.</description>
          <long-description>&lt;p&gt;@return array       List of new cookies.&lt;/p&gt;</long-description>
          <tag line="589" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="606" package="Default">
        <name>readAll</name>
        <full_name>readAll</full_name>
        <docblock line="598">
          <description>Reads the whole of the socket output into a
   single string.</description>
          <long-description>&lt;p&gt;@param SimpleSocket $socket  Unread socket.&lt;/p&gt;</long-description>
          <tag line="598" name="return" description="Raw output if successful&#10;                                else false.&#10;   @access private" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="606">
          <name>$socket</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="621" package="Default">
        <name>isLastPacket</name>
        <full_name>isLastPacket</full_name>
        <docblock line="614">
          <description>Test to see if the packet from the socket is the
   last one.</description>
          <long-description>&lt;p&gt;@param string $packet    Chunk to interpret.&lt;/p&gt;</long-description>
          <tag line="614" name="return" description="True if empty or EOF.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="621">
          <name>$packet</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/http.php</error>
      <critical line="17" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="24" code="50018">No DocBlock was found for property $url</error>
      <error line="26" code="50015">Argument $url is missing from the Docblock of __construct()</error>
      <error line="44" code="50015">Argument $method is missing from the Docblock of getRequestLine()</error>
      <error line="68" code="50014">Name of argument $method does not match with the DocBlock's name $timeout in createConnection()</error>
      <error line="68" code="50015">Argument $timeout is missing from the Docblock of createConnection()</error>
      <error line="90" code="50014">Name of argument $scheme does not match with the DocBlock's name $host in createSocket()</error>
      <error line="90" code="50015">Argument $host is missing from the Docblock of createSocket()</error>
      <error line="90" code="50015">Argument $port is missing from the Docblock of createSocket()</error>
      <error line="90" code="50015">Argument $timeout is missing from the Docblock of createSocket()</error>
      <critical line="110" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="117" code="50018">No DocBlock was found for property $proxy</error>
      <error line="118" code="50018">No DocBlock was found for property $username</error>
      <error line="119" code="50018">No DocBlock was found for property $password</error>
      <error line="121" code="50014">Name of argument $url does not match with the DocBlock's name $proxy in __construct()</error>
      <error line="121" code="50015">Argument $proxy is missing from the Docblock of __construct()</error>
      <error line="121" code="50015">Argument $username is missing from the Docblock of __construct()</error>
      <error line="121" code="50015">Argument $password is missing from the Docblock of __construct()</error>
      <error line="136" code="50014">Name of argument $method does not match with the DocBlock's name $url in getRequestLine()</error>
      <notice line="136" code="50013">Parameter $url could not be found in getRequestLine()</notice>
      <error line="163" code="50014">Name of argument $method does not match with the DocBlock's name $timeout in createConnection()</error>
      <error line="163" code="50015">Argument $timeout is missing from the Docblock of createConnection()</error>
      <error line="198" code="50018">No DocBlock was found for property $route</error>
      <error line="199" code="50018">No DocBlock was found for property $encoding</error>
      <error line="200" code="50018">No DocBlock was found for property $headers</error>
      <error line="201" code="50018">No DocBlock was found for property $cookies</error>
      <error line="203" code="50015">Argument $encoding is missing from the Docblock of __construct()</error>
      <error line="219" code="50015">Argument $timeout is missing from the Docblock of fetch()</error>
      <error line="235" code="50014">Name of argument $socket does not match with the DocBlock's name $method in dispatchRequest()</error>
      <error line="235" code="50015">Argument $encoding is missing from the Docblock of dispatchRequest()</error>
      <notice line="235" code="50013">Parameter $method could not be found in dispatchRequest()</notice>
      <error line="255" code="50015">Argument $header_line is missing from the Docblock of addHeaderLine()</error>
      <error line="264" code="50014">Name of argument $jar does not match with the DocBlock's name $url in readCookiesFromJar()</error>
      <error line="264" code="50015">Argument $url is missing from the Docblock of readCookiesFromJar()</error>
      <error line="275" code="50015">Argument $socket is missing from the Docblock of createResponse()</error>
      <critical line="291" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="297" code="50018">No DocBlock was found for property $raw_headers</error>
      <error line="298" code="50018">No DocBlock was found for property $response_code</error>
      <error line="299" code="50018">No DocBlock was found for property $http_version</error>
      <error line="300" code="50018">No DocBlock was found for property $mime_type</error>
      <error line="301" code="50018">No DocBlock was found for property $location</error>
      <error line="302" code="50018">No DocBlock was found for property $cookies</error>
      <error line="303" code="50018">No DocBlock was found for property $authentication</error>
      <error line="304" code="50018">No DocBlock was found for property $realm</error>
      <error line="306" code="50015">Argument $headers is missing from the Docblock of __construct()</error>
      <error line="411" code="50014">Name of argument $jar does not match with the DocBlock's name $url in writeCookiesToJar()</error>
      <error line="411" code="50015">Argument $url is missing from the Docblock of writeCookiesToJar()</error>
      <error line="428" code="50015">Argument $header_line is missing from the Docblock of parseHeaderLine()</error>
      <error line="454" code="50015">Argument $cookie_line is missing from the Docblock of parseCookie()</error>
      <critical line="477" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="483" code="50018">No DocBlock was found for property $url</error>
      <error line="484" code="50018">No DocBlock was found for property $encoding</error>
      <error line="485" code="50018">No DocBlock was found for property $sent</error>
      <error line="486" code="50018">No DocBlock was found for property $content</error>
      <error line="487" code="50018">No DocBlock was found for property $headers</error>
      <error line="489" code="50015">Argument $url is missing from the Docblock of __construct()</error>
      <error line="489" code="50015">Argument $encoding is missing from the Docblock of __construct()</error>
      <error line="512" code="50015">Argument $raw is missing from the Docblock of parse()</error>
      <error line="598" code="50015">Argument $socket is missing from the Docblock of readAll()</error>
      <error line="614" code="50015">Argument $packet is missing from the Docblock of isLastPacket()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/invoker.php" hash="c0859295ddd18852bfa041160c97ba79" package="Default">
    <include line="13" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: invoker.php 1785 2008-04-26 13:56:41Z pp11 $"/>
      </docblock>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="19" package="Default">
      <name>SIMPLE_TEST</name>
      <full_name>\SIMPLE_TEST</full_name>
      <value>dirname(__FILE__) . </value>
    </constant>
    <class final="false" abstract="false" namespace="global" line="30" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends/>
      <name>SimpleInvoker</name>
      <full_name>\SimpleInvoker</full_name>
      <docblock line="23">
        <description>This is called by the class runner to run a
   single test method.</description>
        <long-description>&lt;p&gt;Will also run the setUp()
   and tearDown() methods.&lt;/p&gt;</long-description>
        <tag line="23" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="31" namespace="global" package="Default">
        <name>$test_case</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="37" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="33">
          <description>Stashes the test case for later.</description>
          <long-description>&lt;p&gt;@param SimpleTestCase $test_case  Test case to run.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="37">
          <name>$test_case</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="46" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getTestCase</name>
        <full_name>getTestCase</full_name>
        <docblock line="41">
          <description>Accessor for test case being run.</description>
          <long-description>&lt;p&gt;@return SimpleTestCase    Test case.&lt;/p&gt;</long-description>
          <tag line="41" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>before</name>
        <full_name>before</full_name>
        <docblock line="50">
          <description>Runs test level set up.</description>
          <long-description>&lt;p&gt;Used for changing
   the mechanics of base test cases.&lt;/p&gt;</long-description>
          <tag line="50" name="param" description="Test method to call. @access public" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>invoke</name>
        <full_name>invoke</full_name>
        <docblock line="60">
          <description>Invokes a test method and buffered with setUp()
   and tearDown() calls.</description>
          <long-description>&lt;p&gt;@param string $method    Test method to call.&lt;/p&gt;</long-description>
          <tag line="60" name="access" description="public"/>
        </docblock>
        <argument line="66">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="78" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>after</name>
        <full_name>after</full_name>
        <docblock line="72">
          <description>Runs test level clean up.</description>
          <long-description>&lt;p&gt;Used for changing
   the mechanics of base test cases.&lt;/p&gt;</long-description>
          <tag line="72" name="param" description="Test method to call. @access public" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="89" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends/>
      <name>SimpleInvokerDecorator</name>
      <full_name>\SimpleInvokerDecorator</full_name>
      <docblock line="83">
        <description>Do nothing decorator.</description>
        <long-description>&lt;p&gt;Just passes the invocation
   straight through.&lt;/p&gt;</long-description>
        <tag line="83" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="90" namespace="global" package="Default">
        <name>$invoker</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="96" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="92">
          <description>Stores the invoker to wrap.</description>
          <long-description>&lt;p&gt;@param SimpleInvoker $invoker  Test method runner.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="96">
          <name>$invoker</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="105" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getTestCase</name>
        <full_name>getTestCase</full_name>
        <docblock line="100">
          <description>Accessor for test case being run.</description>
          <long-description>&lt;p&gt;@return SimpleTestCase    Test case.&lt;/p&gt;</long-description>
          <tag line="100" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="115" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>before</name>
        <full_name>before</full_name>
        <docblock line="109">
          <description>Runs test level set up.</description>
          <long-description>&lt;p&gt;Used for changing
   the mechanics of base test cases.&lt;/p&gt;</long-description>
          <tag line="109" name="param" description="Test method to call. @access public" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="125" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>invoke</name>
        <full_name>invoke</full_name>
        <docblock line="119">
          <description>Invokes a test method and buffered with setUp()
   and tearDown() calls.</description>
          <long-description>&lt;p&gt;@param string $method    Test method to call.&lt;/p&gt;</long-description>
          <tag line="119" name="access" description="public"/>
        </docblock>
        <argument line="125">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="135" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>after</name>
        <full_name>after</full_name>
        <docblock line="129">
          <description>Runs test level clean up.</description>
          <long-description>&lt;p&gt;Used for changing
   the mechanics of base test cases.&lt;/p&gt;</long-description>
          <tag line="129" name="param" description="Test method to call. @access public" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="135">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/invoker.php</error>
      <error line="31" code="50018">No DocBlock was found for property $test_case</error>
      <error line="33" code="50015">Argument $test_case is missing from the Docblock of __construct()</error>
      <error line="60" code="50015">Argument $method is missing from the Docblock of invoke()</error>
      <error line="90" code="50018">No DocBlock was found for property $invoker</error>
      <error line="92" code="50015">Argument $invoker is missing from the Docblock of __construct()</error>
      <error line="119" code="50015">Argument $method is missing from the Docblock of invoke()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/mock_objects.php" hash="4243ff3224d3f3f38ccb8c053ed69d3d" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="MockObjects&#10; @version    $Id: mock_objects.php 1973 2009-12-22 01:16:59Z lastcraft $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="22" package="Default">
      <name>MOCK_ANYTHING</name>
      <full_name>\MOCK_ANYTHING</full_name>
      <value></value>
    </constant>
    <class final="false" abstract="false" namespace="global" line="30" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>ParametersExpectation</name>
      <full_name>\ParametersExpectation</full_name>
      <docblock line="25">
        <description>Parameter comparison assertion.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="25" name="subpackage" description="MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="31" namespace="global" package="Default">
        <name>$expected</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="33">
          <description>Sets the expected parameter list.</description>
          <long-description>&lt;p&gt;@param array $parameters  Array of parameters including
                             those that are wildcarded.
                             If the value is not an array
                             then it is considered to match any.&lt;/p&gt;</long-description>
          <tag line="33" name="param" description="Customised message on failure." type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$expected</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="41">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="51" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="46">
          <description>Tests the assertion.</description>
          <long-description>&lt;p&gt;True if correct.&lt;/p&gt;</long-description>
          <tag line="46" name="param" description="Comparison values. @return boolean True if correct." type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="73" package="Default">
        <name>testParameter</name>
        <full_name>testParameter</full_name>
        <docblock line="66">
          <description>Tests an individual parameter.</description>
          <long-description>&lt;p&gt;@param mixed $parameter    Value to test.&lt;/p&gt;</long-description>
          <tag line="66" name="param" description="Comparison value. @return boolean True if expectation fulfilled." type="mixed" variable="$expected">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$parameter</name>
          <default></default>
          <type/>
        </argument>
        <argument line="73">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="78">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param array $comparison   Incoming parameter list.&lt;/p&gt;</long-description>
          <tag line="78" name="return" description="Description of success&#10;                              or failure." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="101" package="Default">
        <name>describeDifference</name>
        <full_name>describeDifference</full_name>
        <docblock line="94">
          <description>Message to display if expectation differs from
   the parameters actually received.</description>
          <long-description>&lt;p&gt;@param array $expected      Expected parameters as list.&lt;/p&gt;</long-description>
          <tag line="94" name="param" description="Actual parameters received. @return string Description of difference." type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
        <argument line="101">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="126" package="Default">
        <name>coerceToExpectation</name>
        <full_name>coerceToExpectation</full_name>
        <docblock line="119">
          <description>Creates an identical expectation if the
   object/value is not already some type
   of expectation.</description>
          <long-description>&lt;p&gt;@param mixed $expected      Expected value.&lt;/p&gt;</long-description>
          <tag line="119" name="return" description="Expectation object." type="\SimpleExpectation">
            <type by_reference="false">\SimpleExpectation</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="139" package="Default">
        <name>renderArguments</name>
        <full_name>renderArguments</full_name>
        <docblock line="133">
          <description>Renders the argument list as a string for
   messages.</description>
          <long-description>&lt;p&gt;@param array $args    Incoming arguments.&lt;/p&gt;</long-description>
          <tag line="133" name="return" description="Simple description of type and value." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="156" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>CallCountExpectation</name>
      <full_name>\CallCountExpectation</full_name>
      <docblock line="151">
        <description>Confirms that the number of calls on a method is as expected.</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="151" name="subpackage" description="MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="157" namespace="global" package="Default">
        <name>$method</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="158" namespace="global" package="Default">
        <name>$count</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="167" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="160">
          <description>Stashes the method and expected count for later
   reporting.</description>
          <long-description>&lt;p&gt;@param string $method    Name of method to confirm against.&lt;/p&gt;</long-description>
          <tag line="160" name="param" description="Expected number of calls. @param string $message Custom error message." type="integer" variable="$count">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="167">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="167">
          <name>$count</name>
          <default></default>
          <type/>
        </argument>
        <argument line="167">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="178" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="173">
          <description>Tests the assertion.</description>
          <long-description>&lt;p&gt;True if correct.&lt;/p&gt;</long-description>
          <tag line="173" name="param" description="Measured call count. @return boolean True if expected." type="integer" variable="$compare">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="187" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="182">
          <description>Reports the comparison.</description>
          <long-description>&lt;p&gt;@param integer $compare     Measured call count.&lt;/p&gt;</long-description>
          <tag line="182" name="return" description="Message to show." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="199" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>MinimumCallCountExpectation</name>
      <full_name>\MinimumCallCountExpectation</full_name>
      <docblock line="194">
        <description>Confirms that the number of calls on a method is as expected.</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="194" name="subpackage" description="MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="200" namespace="global" package="Default">
        <name>$method</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="201" namespace="global" package="Default">
        <name>$count</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="210" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="203">
          <description>Stashes the method and expected count for later
   reporting.</description>
          <long-description>&lt;p&gt;@param string $method    Name of method to confirm against.&lt;/p&gt;</long-description>
          <tag line="203" name="param" description="Minimum number of calls. @param string $message Custom error message." type="integer" variable="$count">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="210">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="210">
          <name>$count</name>
          <default></default>
          <type/>
        </argument>
        <argument line="210">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="221" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="216">
          <description>Tests the assertion.</description>
          <long-description>&lt;p&gt;True if correct.&lt;/p&gt;</long-description>
          <tag line="216" name="param" description="Measured call count. @return boolean True if enough." type="integer" variable="$compare">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="221">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="230" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="225">
          <description>Reports the comparison.</description>
          <long-description>&lt;p&gt;@param integer $compare     Measured call count.&lt;/p&gt;</long-description>
          <tag line="225" name="return" description="Message to show." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="230">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="242" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>MaximumCallCountExpectation</name>
      <full_name>\MaximumCallCountExpectation</full_name>
      <docblock line="237">
        <description>Confirms that the number of calls on a method is as expected.</description>
        <long-description>&lt;p&gt;@package      SimpleTest&lt;/p&gt;</long-description>
        <tag line="237" name="subpackage" description="MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="243" namespace="global" package="Default">
        <name>$method</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="244" namespace="global" package="Default">
        <name>$count</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="253" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="246">
          <description>Stashes the method and expected count for later
   reporting.</description>
          <long-description>&lt;p&gt;@param string $method    Name of method to confirm against.&lt;/p&gt;</long-description>
          <tag line="246" name="param" description="Minimum number of calls. @param string $message Custom error message." type="integer" variable="$count">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="253">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="253">
          <name>$count</name>
          <default></default>
          <type/>
        </argument>
        <argument line="253">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="264" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="259">
          <description>Tests the assertion.</description>
          <long-description>&lt;p&gt;True if correct.&lt;/p&gt;</long-description>
          <tag line="259" name="param" description="Measured call count. @return boolean True if not over." type="integer" variable="$compare">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="264">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="273" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="268">
          <description>Reports the comparison.</description>
          <long-description>&lt;p&gt;@param integer $compare     Measured call count.&lt;/p&gt;</long-description>
          <tag line="268" name="return" description="Message to show." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="273">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="286" package="Default">
      <extends/>
      <name>SimpleSignatureMap</name>
      <full_name>\SimpleSignatureMap</full_name>
      <docblock line="280">
        <description>Retrieves method actions by searching the
   parameter lists until an expected match is found.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="280" name="subpackage" description="MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="287" namespace="global" package="Default">
        <name>$map</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="292" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="289">
          <description>Creates an empty call map.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="301" package="Default">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="296">
          <description>Stashes a reference against a method call.</description>
          <long-description>&lt;p&gt;@param array $parameters    Array of arguments (including wildcards).&lt;/p&gt;</long-description>
          <tag line="296" name="param" description="Reference placed in the map." type="mixed" variable="$action">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="301">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
        <argument line="301">
          <name>$action</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="316" package="Default">
        <name>findFirstAction</name>
        <full_name>findFirstAction</full_name>
        <docblock line="308">
          <description>Searches the call list for a matching parameter
   set.</description>
          <long-description>&lt;p&gt;Returned by reference.&lt;/p&gt;</long-description>
          <tag line="308" name="param" description="Parameters to search by without wildcards. @return object Object held in the first matching slot, otherwise null." type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="316">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="332" package="Default">
        <name>isMatch</name>
        <full_name>isMatch</full_name>
        <docblock line="325">
          <description>Searches the call list for a matching parameter
   set.</description>
          <long-description>&lt;p&gt;True if successful.&lt;/p&gt;</long-description>
          <tag line="325" name="param" description="Parameters to search by without wildcards. @return boolean True if a match is present." type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="332">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="344" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="336">
          <description>Compares the incoming parameters with the
   internal expectation.</description>
          <long-description>&lt;p&gt;Uses the incoming $test
   to dispatch the test message.&lt;/p&gt;</long-description>
          <tag line="336" name="param" description="Test to dispatch to. @param array $parameters The actual calling arguments. @param string $message The message to overlay." type="\SimpleTestCase" variable="$test">
            <type by_reference="false">\SimpleTestCase</type>
          </tag>
        </docblock>
        <argument line="344">
          <name>$test</name>
          <default></default>
          <type/>
        </argument>
        <argument line="344">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
        <argument line="344">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="353" package="Default">
        <name>findFirstSlot</name>
        <full_name>findFirstSlot</full_name>
        <docblock line="347">
          <description>Searches the map for a matching item.</description>
          <long-description>&lt;p&gt;@param array $parameters    Parameters to search by
                               without wildcards.&lt;/p&gt;</long-description>
          <tag line="347" name="return" description="Reference to slot or null." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="353">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="373" package="SimpleTest&#10;   @subpackage MockObjects">
      <extends/>
      <name>SimpleCallSchedule</name>
      <full_name>\SimpleCallSchedule</full_name>
      <docblock line="365">
        <description>Allows setting of actions against call signatures either
   at a specific time, or always.</description>
        <long-description>&lt;p&gt;Specific time settings
   trump lasting ones, otherwise the most recently added
   will mask an earlier match.&lt;/p&gt;</long-description>
        <tag line="365" name="package" description="SimpleTest&#10;   @subpackage MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="374" namespace="global" package="Default">
        <name>$wildcard</name>
        <default>MOCK_ANYTHING</default>
      </property>
      <property final="false" static="false" visibility="private" line="375" namespace="global" package="Default">
        <name>$always</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="376" namespace="global" package="Default">
        <name>$at</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="382" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="378">
          <description>Sets up an empty response schedule.</description>
          <long-description>&lt;p&gt;Creates an empty call map.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="395" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>register</name>
        <full_name>register</full_name>
        <docblock line="387">
          <description>Stores an action against a signature that
   will always fire unless masked by a time
   specific one.</description>
          <long-description>&lt;p&gt;@param string $method        Method name.&lt;/p&gt;</long-description>
          <tag line="387" name="param" description="Calling parameters. @param SimpleAction $action Actually simpleByValue, etc." type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="395">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="395">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
        <argument line="395">
          <name>$action</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="413" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>registerAt</name>
        <full_name>registerAt</full_name>
        <docblock line="404">
          <description>Stores an action against a signature that
   will fire at a specific time in the future.</description>
          <long-description>&lt;p&gt;@param integer $step         delay of calls to this method,
                                0 is next.&lt;/p&gt;</long-description>
          <tag line="404" name="param" description="Method name. @param array $args Calling parameters. @param SimpleAction $action Actually SimpleByValue, etc." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="413">
          <name>$step</name>
          <default></default>
          <type/>
        </argument>
        <argument line="413">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="413">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
        <argument line="413">
          <name>$action</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="432" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>expectArguments</name>
        <full_name>expectArguments</full_name>
        <docblock line="425">
          <description>Sets up an expectation on the argument list.</description>
          <long-description>&lt;p&gt;@param string $method       Method to test.&lt;/p&gt;</long-description>
          <tag line="425" name="param" description="Bare arguments or list of expectation objects. @param string $message Failure message." type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="432">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="432">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
        <argument line="432">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="449" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>respond</name>
        <full_name>respond</full_name>
        <docblock line="440">
          <description>Actually carry out the action stored previously,
   if the parameters match.</description>
          <long-description>&lt;p&gt;@param integer $step      Time of call.&lt;/p&gt;</long-description>
          <tag line="440" name="param" description="Method name. @param array $args The parameters making up the rest of the call. @return mixed The result of the action." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="449">
          <name>$step</name>
          <default></default>
          <type/>
        </argument>
        <argument line="449">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="449">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="476" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>replaceWildcards</name>
        <full_name>replaceWildcards</full_name>
        <docblock line="469">
          <description>Replaces wildcard matches with wildcard
   expectations in the argument list.</description>
          <long-description>&lt;p&gt;@param array $args      Raw argument list.&lt;/p&gt;</long-description>
          <tag line="469" name="return" description="Argument list with&#10;                           expectations." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="476">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="496" package="SimpleTest&#10;   @subpackage MockObjects">
      <extends/>
      <name>SimpleReturn</name>
      <full_name>\SimpleReturn</full_name>
      <docblock line="489">
        <description>A type of SimpleMethodAction.</description>
        <long-description>&lt;p&gt;Stashes a value for returning later. Follows usual
   PHP5 semantics of objects being returned by reference.&lt;/p&gt;</long-description>
        <tag line="489" name="package" description="SimpleTest&#10;   @subpackage MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="497" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="505" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="499">
          <description>Stashes it for later.</description>
          <long-description>&lt;p&gt;@param mixed $value     You need to clone objects
                           if you want copy semantics
                           for these.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="505">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="513" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>act</name>
        <full_name>act</full_name>
        <docblock line="509">
          <description>Returns the value stored earlier.</description>
          <long-description>&lt;p&gt;@return mixed    Whatever was stashed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="524" package="SimpleTest&#10;   @subpackage MockObjects">
      <extends/>
      <name>SimpleByReference</name>
      <full_name>\SimpleByReference</full_name>
      <docblock line="518">
        <description>A type of SimpleMethodAction.</description>
        <long-description>&lt;p&gt;Stashes a reference for returning later.&lt;/p&gt;</long-description>
        <tag line="518" name="package" description="SimpleTest&#10;   @subpackage MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="525" namespace="global" package="Default">
        <name>$reference</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="531" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="527">
          <description>Stashes it for later.</description>
          <long-description>&lt;p&gt;@param mixed $reference     Actual PHP4 style reference.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="531">
          <name>$reference</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="539" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>act</name>
        <full_name>act</full_name>
        <docblock line="535">
          <description>Returns the reference stored earlier.</description>
          <long-description>&lt;p&gt;@return mixed    Whatever was stashed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="550" package="SimpleTest&#10;   @subpackage MockObjects">
      <extends/>
      <name>SimpleByValue</name>
      <full_name>\SimpleByValue</full_name>
      <docblock line="544">
        <description>A type of SimpleMethodAction.</description>
        <long-description>&lt;p&gt;Stashes a value for returning later.&lt;/p&gt;</long-description>
        <tag line="544" name="package" description="SimpleTest&#10;   @subpackage MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="551" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="559" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="553">
          <description>Stashes it for later.</description>
          <long-description>&lt;p&gt;@param mixed $value     You need to clone objects
                           if you want copy semantics
                           for these.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="559">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="567" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>act</name>
        <full_name>act</full_name>
        <docblock line="563">
          <description>Returns the value stored earlier.</description>
          <long-description>&lt;p&gt;@return mixed    Whatever was stashed.&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="579" package="SimpleTest&#10;   @subpackage MockObjects">
      <extends/>
      <name>SimpleThrower</name>
      <full_name>\SimpleThrower</full_name>
      <docblock line="573">
        <description>A type of SimpleMethodAction.</description>
        <long-description>&lt;p&gt;Stashes an exception for throwing later.&lt;/p&gt;</long-description>
        <tag line="573" name="package" description="SimpleTest&#10;   @subpackage MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="580" namespace="global" package="Default">
        <name>$exception</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="586" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="582">
          <description>Stashes it for later.</description>
          <long-description>&lt;p&gt;@param Exception $exception    The exception object to throw.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="586">
          <name>$exception</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="593" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>act</name>
        <full_name>act</full_name>
        <docblock line="590">
          <description>Throws the exceptins stashed earlier.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="604" package="SimpleTest&#10;   @subpackage MockObjects">
      <extends/>
      <name>SimpleErrorThrower</name>
      <full_name>\SimpleErrorThrower</full_name>
      <docblock line="598">
        <description>A type of SimpleMethodAction.</description>
        <long-description>&lt;p&gt;Stashes an error for emitting later.&lt;/p&gt;</long-description>
        <tag line="598" name="package" description="SimpleTest&#10;   @subpackage MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="605" namespace="global" package="Default">
        <name>$error</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="606" namespace="global" package="Default">
        <name>$severity</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="613" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="608">
          <description>Stashes an error to throw later.</description>
          <long-description>&lt;p&gt;@param string $error      Error message.&lt;/p&gt;</long-description>
          <tag line="608" name="param" description="PHP error constant, e.g E_USER_ERROR." type="integer" variable="$severity">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="613">
          <name>$error</name>
          <default></default>
          <type/>
        </argument>
        <argument line="613">
          <name>$severity</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="621" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>act</name>
        <full_name>act</full_name>
        <docblock line="618">
          <description>Triggers the stashed error.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="639" package="SimpleTest&#10;   @subpackage MockObjects">
      <extends/>
      <name>SimpleMock</name>
      <full_name>\SimpleMock</full_name>
      <docblock line="628">
        <description>A base class or delegate that extends an
   empty collection of methods that can have their
   return values set and expectations made of the
   calls upon them.</description>
        <long-description>&lt;p&gt;The mock will assert the
   expectations against it's attached test case in
   addition to the server stub behaviour or returning
   preprogrammed responses.&lt;/p&gt;</long-description>
        <tag line="628" name="package" description="SimpleTest&#10;   @subpackage MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="640" namespace="global" package="Default">
        <name>$actions</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="641" namespace="global" package="Default">
        <name>$expectations</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="642" namespace="global" package="Default">
        <name>$wildcard</name>
        <default>MOCK_ANYTHING</default>
      </property>
      <property final="false" static="false" visibility="private" line="643" namespace="global" package="Default">
        <name>$is_strict</name>
        <default>true</default>
      </property>
      <property final="false" static="false" visibility="private" line="644" namespace="global" package="Default">
        <name>$call_counts</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="645" namespace="global" package="Default">
        <name>$expected_counts</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="646" namespace="global" package="Default">
        <name>$max_counts</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="647" namespace="global" package="Default">
        <name>$expected_args</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="648" namespace="global" package="Default">
        <name>$expected_args_at</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="654" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>SimpleMock</name>
        <full_name>SimpleMock</full_name>
        <docblock line="650">
          <description>Creates an empty action list and expectation list.</description>
          <long-description>&lt;p&gt;All call counts are set to zero.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="669" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>disableExpectationNameChecks</name>
        <full_name>disableExpectationNameChecks</full_name>
        <docblock line="665">
          <description>Disables a name check when setting expectations.</description>
          <long-description>&lt;p&gt;This hack is needed for the partial mocks.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="677" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>getCurrentTestCase</name>
        <full_name>getCurrentTestCase</full_name>
        <docblock line="673">
          <description>Finds currently running test.</description>
          <long-description>&lt;p&gt;@return SimpeTestCase    Current test case.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="687" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>checkArgumentsIsArray</name>
        <full_name>checkArgumentsIsArray</full_name>
        <docblock line="681">
          <description>Die if bad arguments array is passed.</description>
          <long-description>&lt;p&gt;@param mixed $args     The arguments value to be checked.&lt;/p&gt;</long-description>
          <tag line="681" name="param" description="Description of task attempt. @return boolean Valid arguments" type="string" variable="$task">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="687">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
        <argument line="687">
          <name>$task</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="701" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>dieOnNoMethod</name>
        <full_name>dieOnNoMethod</full_name>
        <docblock line="695">
          <description>Triggers a PHP error if the method is not part
   of this object.</description>
          <long-description>&lt;p&gt;@param string $method        Name of method.&lt;/p&gt;</long-description>
          <tag line="695" name="param" description="Description of task attempt." type="string" variable="$task">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="701">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="701">
          <name>$task</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="716" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>replaceWildcards</name>
        <full_name>replaceWildcards</full_name>
        <docblock line="709">
          <description>Replaces wildcard matches with wildcard
   expectations in the argument list.</description>
          <long-description>&lt;p&gt;@param array $args      Raw argument list.&lt;/p&gt;</long-description>
          <tag line="709" name="return" description="Argument list with&#10;                           expectations." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="716">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="733" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>addCall</name>
        <full_name>addCall</full_name>
        <docblock line="728">
          <description>Adds one to the call count of a method.</description>
          <long-description>&lt;p&gt;@param string $method        Method called.&lt;/p&gt;</long-description>
          <tag line="728" name="param" description="Arguments as an array." type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="733">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="733">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="745" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>getCallCount</name>
        <full_name>getCallCount</full_name>
        <docblock line="740">
          <description>Fetches the call count of a method so far.</description>
          <long-description>&lt;p&gt;@param string $method        Method name called.&lt;/p&gt;</long-description>
          <tag line="740" name="return" description="Number of calls so far." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="745">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="762" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>returns</name>
        <full_name>returns</full_name>
        <docblock line="754">
          <description>Sets a return for a parameter list that will
   be passed on by all calls to this method that match.</description>
          <long-description>&lt;p&gt;@param string $method       Method name.&lt;/p&gt;</long-description>
          <tag line="754" name="param" description="Result of call by value/handle. @param array $args List of parameters to match including wildcards." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="762">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="762">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="762">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="780" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>returnsAt</name>
        <full_name>returnsAt</full_name>
        <docblock line="767">
          <description>Sets a return for a parameter list that will
   be passed only when the required call count
   is reached.</description>
          <long-description>&lt;p&gt;@param integer $timing   Number of calls in the future
                            to which the result applies. If
                            not set then all calls will return
                            the value.&lt;/p&gt;</long-description>
          <tag line="767" name="param" description="Method name. @param mixed $value Result of call passed. @param array $args List of parameters to match including wildcards." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="780">
          <name>$timing</name>
          <default></default>
          <type/>
        </argument>
        <argument line="780">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="780">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="780">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="793" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>returnsByValue</name>
        <full_name>returnsByValue</full_name>
        <docblock line="785">
          <description>Sets a return for a parameter list that will
   be passed by value for all calls to this method.</description>
          <long-description>&lt;p&gt;@param string $method       Method name.&lt;/p&gt;</long-description>
          <tag line="785" name="param" description="Result of call passed by value. @param array $args List of parameters to match including wildcards." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="793">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="793">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="793">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="799" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>setReturnValue</name>
        <full_name>setReturnValue</full_name>
        <docblock line="798">
          <description></description>
          <long-description></long-description>
          <tag line="798" name="deprecated" description=""/>
        </docblock>
        <argument line="799">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="799">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="799">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="816" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>returnsByValueAt</name>
        <full_name>returnsByValueAt</full_name>
        <docblock line="803">
          <description>Sets a return for a parameter list that will
   be passed by value only when the required call count
   is reached.</description>
          <long-description>&lt;p&gt;@param integer $timing   Number of calls in the future
                            to which the result applies. If
                            not set then all calls will return
                            the value.&lt;/p&gt;</long-description>
          <tag line="803" name="param" description="Method name. @param mixed $value Result of call passed by value. @param array $args List of parameters to match including wildcards." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="816">
          <name>$timing</name>
          <default></default>
          <type/>
        </argument>
        <argument line="816">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="816">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="816">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="822" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>setReturnValueAt</name>
        <full_name>setReturnValueAt</full_name>
        <docblock line="821">
          <description></description>
          <long-description></long-description>
          <tag line="821" name="deprecated" description=""/>
        </docblock>
        <argument line="822">
          <name>$timing</name>
          <default></default>
          <type/>
        </argument>
        <argument line="822">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="822">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="822">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="834" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>returnsByReference</name>
        <full_name>returnsByReference</full_name>
        <docblock line="826">
          <description>Sets a return for a parameter list that will
   be passed by reference for all calls.</description>
          <long-description>&lt;p&gt;@param string $method       Method name.&lt;/p&gt;</long-description>
          <tag line="826" name="param" description="Result of the call will be this object. @param array $args List of parameters to match including wildcards." type="mixed" variable="$reference">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="834">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="834">
          <name>$reference</name>
          <default></default>
          <type/>
        </argument>
        <argument line="834">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="840" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>setReturnReference</name>
        <full_name>setReturnReference</full_name>
        <docblock line="839">
          <description></description>
          <long-description></long-description>
          <tag line="839" name="deprecated" description=""/>
        </docblock>
        <argument line="840">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="840">
          <name>$reference</name>
          <default></default>
          <type/>
        </argument>
        <argument line="840">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="857" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>returnsByReferenceAt</name>
        <full_name>returnsByReferenceAt</full_name>
        <docblock line="844">
          <description>Sets a return for a parameter list that will
   be passed by value only when the required call count
   is reached.</description>
          <long-description>&lt;p&gt;@param integer $timing    Number of calls in the future
                             to which the result applies. If
                             not set then all calls will return
                             the value.&lt;/p&gt;</long-description>
          <tag line="844" name="param" description="Method name. @param mixed $reference Result of the call will be this object. @param array $args List of parameters to match including wildcards." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="857">
          <name>$timing</name>
          <default></default>
          <type/>
        </argument>
        <argument line="857">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="857">
          <name>$reference</name>
          <default></default>
          <type/>
        </argument>
        <argument line="857">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="863" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>setReturnReferenceAt</name>
        <full_name>setReturnReferenceAt</full_name>
        <docblock line="862">
          <description></description>
          <long-description></long-description>
          <tag line="862" name="deprecated" description=""/>
        </docblock>
        <argument line="863">
          <name>$timing</name>
          <default></default>
          <type/>
        </argument>
        <argument line="863">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="863">
          <name>$reference</name>
          <default></default>
          <type/>
        </argument>
        <argument line="863">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="877" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>expect</name>
        <full_name>expect</full_name>
        <docblock line="867">
          <description>Sets up an expected call with a set of
   expected parameters in that call.</description>
          <long-description>&lt;p&gt;All
   calls will be compared to these expectations
   regardless of when the call is made.&lt;/p&gt;</long-description>
          <tag line="867" name="param" description="Method call to test. @param array $args Expected parameters for the call including wildcards. @param string $message Overridden message." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="877">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="877">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
        <argument line="877">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="899" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>expectAt</name>
        <full_name>expectAt</full_name>
        <docblock line="887">
          <description>Sets up an expected call with a set of
   expected parameters in that call.</description>
          <long-description>&lt;p&gt;The
   expected call count will be adjusted if it
   is set too low to reach this call.&lt;/p&gt;</long-description>
          <tag line="887" name="param" description="Number of calls in the future at which to test. Next call is 0. @param string $method Method call to test. @param array $args Expected parameters for the call including wildcards. @param string $message Overridden message." type="integer" variable="$timing">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="899">
          <name>$timing</name>
          <default></default>
          <type/>
        </argument>
        <argument line="899">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="899">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
        <argument line="899">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="921" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>expectCallCount</name>
        <full_name>expectCallCount</full_name>
        <docblock line="912">
          <description>Sets an expectation for the number of times
   a method will be called.</description>
          <long-description>&lt;p&gt;The tally method
   is used to check this.&lt;/p&gt;</long-description>
          <tag line="912" name="param" description="Method call to test. @param integer $count Number of times it should have been called at tally. @param string $message Overridden message." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="921">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="921">
          <name>$count</name>
          <default></default>
          <type/>
        </argument>
        <argument line="921">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="936" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>expectMaximumCallCount</name>
        <full_name>expectMaximumCallCount</full_name>
        <docblock line="928">
          <description>Sets the number of times a method may be called
   before a test failure is triggered.</description>
          <long-description>&lt;p&gt;@param string $method        Method call to test.&lt;/p&gt;</long-description>
          <tag line="928" name="param" description="Most number of times it should have been called. @param string $message Overridden message." type="integer" variable="$count">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="936">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="936">
          <name>$count</name>
          <default></default>
          <type/>
        </argument>
        <argument line="936">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="951" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>expectMinimumCallCount</name>
        <full_name>expectMinimumCallCount</full_name>
        <docblock line="943">
          <description>Sets the number of times to call a method to prevent
   a failure on the tally.</description>
          <long-description>&lt;p&gt;@param string $method      Method call to test.&lt;/p&gt;</long-description>
          <tag line="943" name="param" description="Least number of times it should have been called. @param string $message Overridden message." type="integer" variable="$count">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="951">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="951">
          <name>$count</name>
          <default></default>
          <type/>
        </argument>
        <argument line="951">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="964" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>expectNever</name>
        <full_name>expectNever</full_name>
        <docblock line="958">
          <description>Convenience method for barring a method
   call.</description>
          <long-description>&lt;p&gt;@param string $method        Method call to ban.&lt;/p&gt;</long-description>
          <tag line="958" name="param" description="Overridden message." type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="964">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="964">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="976" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>expectOnce</name>
        <full_name>expectOnce</full_name>
        <docblock line="968">
          <description>Convenience method for a single method
   call.</description>
          <long-description>&lt;p&gt;@param string $method     Method call to track.&lt;/p&gt;</long-description>
          <tag line="968" name="param" description="Expected argument list or false for any arguments. @param string $message Overridden message." type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="976">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="976">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="976">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="991" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>expectAtLeastOnce</name>
        <full_name>expectAtLeastOnce</full_name>
        <docblock line="983">
          <description>Convenience method for requiring a method
   call.</description>
          <long-description>&lt;p&gt;@param string $method       Method call to track.&lt;/p&gt;</long-description>
          <tag line="983" name="param" description="Expected argument list or false for any arguments. @param string $message Overridden message." type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="991">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="991">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="991">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1010" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>throwOn</name>
        <full_name>throwOn</full_name>
        <docblock line="998">
          <description>Sets up a trigger to throw an exception upon the
   method call.</description>
          <long-description>&lt;p&gt;@param string $method     Method name to throw on.&lt;/p&gt;</long-description>
          <tag line="998" name="param" description="Exception object to throw. If not given then a simple Exception object is thrown. @param array $args Optional argument list filter. If given then the exception will only be thrown if the method call matches the arguments." type="object" variable="$exception">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="1010">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1010">
          <name>$exception</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="1010">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1034" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>throwAt</name>
        <full_name>throwAt</full_name>
        <docblock line="1016">
          <description>Sets up a trigger to throw an exception upon the
   method call.</description>
          <long-description>&lt;p&gt;@param integer $timing    When to throw the exception. A
                             value of 0 throws immediately.
                             A value of 1 actually allows one call
                             to this method before throwing. 2
                             will allow two calls before throwing
                             and so on.&lt;/p&gt;</long-description>
          <tag line="1016" name="param" description="Method name to throw on. @param object $exception Exception object to throw. If not given then a simple Exception object is thrown. @param array $args Optional argument list filter. If given then the exception will only be thrown if the method call matches the arguments." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1034">
          <name>$timing</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1034">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1034">
          <name>$exception</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="1034">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1052" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>errorOn</name>
        <full_name>errorOn</full_name>
        <docblock line="1040">
          <description>Sets up a trigger to throw an error upon the
   method call.</description>
          <long-description>&lt;p&gt;@param string $method     Method name to throw on.&lt;/p&gt;</long-description>
          <tag line="1040" name="param" description="Error message to trigger. @param array $args Optional argument list filter. If given then the exception will only be thrown if the method call matches the arguments. @param integer $severity The PHP severity level. Defaults to E_USER_ERROR." type="object" variable="$error">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="1052">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1052">
          <name>$error</name>
          <default>'A mock error'</default>
          <type/>
        </argument>
        <argument line="1052">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="1052">
          <name>$severity</name>
          <default>E_USER_ERROR</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1075" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>errorAt</name>
        <full_name>errorAt</full_name>
        <docblock line="1057">
          <description>Sets up a trigger to throw an error upon a specific
   method call.</description>
          <long-description>&lt;p&gt;@param integer $timing    When to throw the exception. A
                             value of 0 throws immediately.
                             A value of 1 actually allows one call
                             to this method before throwing. 2
                             will allow two calls before throwing
                             and so on.&lt;/p&gt;</long-description>
          <tag line="1057" name="param" description="Method name to throw on. @param object $error Error message to trigger. @param array $args Optional argument list filter. If given then the exception will only be thrown if the method call matches the arguments. @param integer $severity The PHP severity level. Defaults to E_USER_ERROR." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1075">
          <name>$timing</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1075">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1075">
          <name>$error</name>
          <default>'A mock error'</default>
          <type/>
        </argument>
        <argument line="1075">
          <name>$args</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="1075">
          <name>$severity</name>
          <default>E_USER_ERROR</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1088" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>atTestEnd</name>
        <full_name>atTestEnd</full_name>
        <docblock line="1080">
          <description>Receives event from unit test that the current
   test method has finished.</description>
          <long-description>&lt;p&gt;Totals up the call
   counts and triggers a test assertion if a test
   is present for expected call counts.&lt;/p&gt;</long-description>
          <tag line="1080" name="param" description="Current method name. @param SimpleTestCase $test Test to send message to." type="string" variable="$test_method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1088">
          <name>$test_method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1088">
          <name>$test</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1108" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>invoke</name>
        <full_name>invoke</full_name>
        <docblock line="1099">
          <description>Returns the expected value for the method name
   and checks expectations.</description>
          <long-description>&lt;p&gt;Will generate any
   test assertions as a result of expectations
   if there is a test present.&lt;/p&gt;</long-description>
          <tag line="1099" name="param" description="Name of method to simulate. @param array $args Arguments as an array. @return mixed Stored return." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1108">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1108">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1134" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>emulateCall</name>
        <full_name>emulateCall</full_name>
        <docblock line="1124">
          <description>Finds the return value matching the incoming
   arguments.</description>
          <long-description>&lt;p&gt;If there is no matching value found
   then an error is triggered.&lt;/p&gt;</long-description>
          <tag line="1124" name="param" description="Method name. @param array $args Calling arguments. @param integer $step Current position in the call history. @return mixed Stored return or other action." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1134">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1134">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1134">
          <name>$step</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1145" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>checkExpectations</name>
        <full_name>checkExpectations</full_name>
        <docblock line="1138">
          <description>Tests the arguments against expectations.</description>
          <long-description>&lt;p&gt;@param string $method        Method to check.&lt;/p&gt;</long-description>
          <tag line="1138" name="param" description="Argument list to match. @param integer $timing The position of this call in the call history." type="array" variable="$args">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1145">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1145">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1145">
          <name>$timing</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="1171" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>disableEStrict</name>
        <full_name>disableEStrict</full_name>
        <docblock line="1165">
          <description>Our mock has to be able to return anything, including
  variable references.</description>
          <long-description>&lt;p&gt;To allow for these mixed returns
  we have to disable the E_STRICT warnings while the
  method calls are emulated.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="1181" package="SimpleTest&#10;   @subpackage MockObjects">
        <name>restoreEStrict</name>
        <full_name>restoreEStrict</full_name>
        <docblock line="1177">
          <description>Restores the E_STRICT level if it was previously set.</description>
          <long-description>&lt;p&gt;@param integer $was     Previous error reporting level.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="1181">
          <name>$was</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1192" package="Default">
      <extends/>
      <name>Mock</name>
      <full_name>\Mock</full_name>
      <docblock line="1186">
        <description>Static methods only service class for code generation of
   mock objects.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="1186" name="subpackage" description="MockObjects"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1197" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="1194">
          <description>Factory for mock object classes.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="1214" package="Default">
        <name>generate</name>
        <full_name>generate</full_name>
        <docblock line="1201">
          <description>Clones a class' interface and creates a mock version
   that can have return values and expectations set.</description>
          <long-description>&lt;p&gt;@param string $class         Class to clone.&lt;/p&gt;</long-description>
          <tag line="1201" name="param" description="New class name. Default is the old name with &quot;Mock&quot; prepended. @param array $methods Additional methods to add beyond those in the cloned class. Use this to emulate the dynamic addition of methods in the cloned class or when the class hasn't been written yet.sta" type="string" variable="$mock_class">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1214">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1214">
          <name>$mock_class</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="1214">
          <name>$methods</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="1229" package="Default">
        <name>generatePartial</name>
        <full_name>generatePartial</full_name>
        <docblock line="1219">
          <description>Generates a version of a class with selected
   methods mocked only.</description>
          <long-description>&lt;p&gt;Inherits the old class
   and chains the mock methods of an aggregated
   mock object.&lt;/p&gt;</long-description>
          <tag line="1219" name="param" description="Class to clone. @param string $mock_class New class name. @param array $methods Methods to be overridden with mock versions." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1229">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1229">
          <name>$mock_class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1229">
          <name>$methods</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="1237" package="Default">
        <name>getExpectationLine</name>
        <full_name>getExpectationLine</full_name>
        <docblock line="1234">
          <description>Uses a stack trace to find the line of an assertion.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1248" package="Default">
      <extends/>
      <name>MockGenerator</name>
      <full_name>\MockGenerator</full_name>
      <docblock line="1243">
        <description>Service class for code generation of mock objects.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="1243" name="subpackage" description="MockObjects"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="1249" namespace="global" package="Default">
        <name>$class</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="1250" namespace="global" package="Default">
        <name>$mock_class</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="1251" namespace="global" package="Default">
        <name>$mock_base</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="1252" namespace="global" package="Default">
        <name>$reflection</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1260" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="1254">
          <description>Builds initial reflection object.</description>
          <long-description>&lt;p&gt;@param string $class        Class to be mocked.&lt;/p&gt;</long-description>
          <tag line="1254" name="param" description="New class with identical interface, but no behaviour." type="string" variable="$mock_class">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1260">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1260">
          <name>$mock_class</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1279" package="Default">
        <name>generate</name>
        <full_name>generate</full_name>
        <docblock line="1270">
          <description>Clones a class' interface and creates a mock version
   that can have return values and expectations set.</description>
          <long-description>&lt;p&gt;@param array $methods        Additional methods to add beyond
                                those in th cloned class. Use this
                                to emulate the dynamic addition of
                                methods in the cloned class or when
                                the class hasn't been written yet.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="1279">
          <name>$methods</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1301" package="Default">
        <name>generateSubclass</name>
        <full_name>generateSubclass</full_name>
        <docblock line="1291">
          <description>Subclasses a class and overrides every method with a mock one
   that can have return values and expectations set.</description>
          <long-description>&lt;p&gt;Chains
   to an aggregated SimpleMock.&lt;/p&gt;</long-description>
          <tag line="1291" name="param" description="Additional methods to add beyond those in the cloned class. Use this to emulate the dynamic addition of methods in the cloned class or when the class hasn't been written yet." type="array" variable="$methods">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1301">
          <name>$methods</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1326" package="Default">
        <name>generatePartial</name>
        <full_name>generatePartial</full_name>
        <docblock line="1318">
          <description>Generates a version of a class with selected
   methods mocked only.</description>
          <long-description>&lt;p&gt;Inherits the old class
   and chains the mock methods of an aggregated
   mock object.&lt;/p&gt;</long-description>
          <tag line="1318" name="param" description="Methods to be overridden with mock versions." type="array" variable="$methods">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1326">
          <name>$methods</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1344" package="Default">
        <name>createClassCode</name>
        <full_name>createClassCode</full_name>
        <docblock line="1339">
          <description>The new mock class code as a string.</description>
          <long-description>&lt;p&gt;@param array $methods          Additional methods.&lt;/p&gt;</long-description>
          <tag line="1339" name="return" description="Code for new mock class." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1344">
          <name>$methods</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1373" package="Default">
        <name>createSubclassCode</name>
        <full_name>createSubclassCode</full_name>
        <docblock line="1367">
          <description>The new mock class code as a string.</description>
          <long-description>&lt;p&gt;The mock will
   be a subclass of the original mocked class.&lt;/p&gt;</long-description>
          <tag line="1367" name="param" description="Additional methods. @return string Code for new mock class." type="array" variable="$methods">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1373">
          <name>$methods</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1398" package="Default">
        <name>extendClassCode</name>
        <full_name>extendClassCode</full_name>
        <docblock line="1391">
          <description>The extension class code as a string.</description>
          <long-description>&lt;p&gt;The class
   composites a mock object and chains mocked methods
   to it.&lt;/p&gt;</long-description>
          <tag line="1391" name="param" description="Mocked methods. @return string Code for a new class." type="array" variable="$methods">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1398">
          <name>$methods</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1422" package="Default">
        <name>createHandlerCode</name>
        <full_name>createHandlerCode</full_name>
        <docblock line="1415">
          <description>Creates code within a class to generate replaced
   methods.</description>
          <long-description>&lt;p&gt;All methods call the invoke() handler
   with the method name and the arguments in an
   array.&lt;/p&gt;</long-description>
          <tag line="1415" name="param" description="Additional methods." type="array" variable="$methods">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1422">
          <name>$methods</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1449" package="Default">
        <name>createNewMethodCode</name>
        <full_name>createNewMethodCode</full_name>
        <docblock line="1442">
          <description>Creates code within a class to generate a new
   methods.</description>
          <long-description>&lt;p&gt;All methods call the invoke() handler
   on the internal mock with the method name and
   the arguments in an array.&lt;/p&gt;</long-description>
          <tag line="1442" name="param" description="Additional methods." type="array" variable="$methods">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1449">
          <name>$methods</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1474" package="Default">
        <name>isConstructor</name>
        <full_name>isConstructor</full_name>
        <docblock line="1468">
          <description>Tests to see if a special PHP method is about to
   be stubbed by mistake.</description>
          <long-description>&lt;p&gt;@param string $method    Method name.&lt;/p&gt;</long-description>
          <tag line="1468" name="return" description="True if special." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1474">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1485" package="Default">
        <name>addMethodList</name>
        <full_name>addMethodList</full_name>
        <docblock line="1480">
          <description>Creates a list of mocked methods for error checking.</description>
          <long-description>&lt;p&gt;@param array $methods       Mocked methods.&lt;/p&gt;</long-description>
          <tag line="1480" name="return" description="Code for a method list." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1485">
          <name>$methods</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1496" package="Default">
        <name>bailOutIfNotMocked</name>
        <full_name>bailOutIfNotMocked</full_name>
        <docblock line="1491">
          <description>Creates code to abandon the expectation if not mocked.</description>
          <long-description>&lt;p&gt;@param string $alias       Parameter name of method name.&lt;/p&gt;</long-description>
          <tag line="1491" name="return" description="Code for bail out." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1496">
          <name>$alias</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1510" package="Default">
        <name>chainMockReturns</name>
        <full_name>chainMockReturns</full_name>
        <docblock line="1505">
          <description>Creates source code for chaining to the composited
   mock object.</description>
          <long-description>&lt;p&gt;@return string           Code for mock set up.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1559" package="Default">
        <name>chainMockExpectations</name>
        <full_name>chainMockExpectations</full_name>
        <docblock line="1554">
          <description>Creates source code for chaining to an aggregated
   mock object.</description>
          <long-description>&lt;p&gt;@return string                 Code for expectations.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1599" package="Default">
        <name>chainThrowMethods</name>
        <full_name>chainThrowMethods</full_name>
        <docblock line="1595">
          <description>Adds code for chaining the throw methods.</description>
          <long-description>&lt;p&gt;@return string           Code for chains.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1626" package="Default">
        <name>overrideMethods</name>
        <full_name>overrideMethods</full_name>
        <docblock line="1619">
          <description>Creates source code to override a list of methods
   with mock versions.</description>
          <long-description>&lt;p&gt;@param array $methods    Methods to be overridden
                            with mock versions.&lt;/p&gt;</long-description>
          <tag line="1619" name="return" description="Code for overridden chains." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1626">
          <name>$methods</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/mock_objects.php</error>
      <critical line="25" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="31" code="50018">No DocBlock was found for property $expected</error>
      <error line="33" code="50014">Name of argument $expected does not match with the DocBlock's name $message in __construct()</error>
      <error line="33" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="66" code="50014">Name of argument $parameter does not match with the DocBlock's name $expected in testParameter()</error>
      <error line="66" code="50015">Argument $expected is missing from the Docblock of testParameter()</error>
      <error line="78" code="50015">Argument $parameters is missing from the Docblock of testMessage()</error>
      <error line="94" code="50014">Name of argument $expected does not match with the DocBlock's name $parameters in describeDifference()</error>
      <error line="94" code="50015">Argument $parameters is missing from the Docblock of describeDifference()</error>
      <error line="119" code="50015">Argument $expected is missing from the Docblock of coerceToExpectation()</error>
      <error line="133" code="50015">Argument $args is missing from the Docblock of renderArguments()</error>
      <critical line="151" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="157" code="50018">No DocBlock was found for property $method</error>
      <error line="158" code="50018">No DocBlock was found for property $count</error>
      <error line="160" code="50014">Name of argument $method does not match with the DocBlock's name $count in __construct()</error>
      <error line="160" code="50015">Argument $count is missing from the Docblock of __construct()</error>
      <error line="160" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="182" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="194" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="200" code="50018">No DocBlock was found for property $method</error>
      <error line="201" code="50018">No DocBlock was found for property $count</error>
      <error line="203" code="50014">Name of argument $method does not match with the DocBlock's name $count in __construct()</error>
      <error line="203" code="50015">Argument $count is missing from the Docblock of __construct()</error>
      <error line="203" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="225" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="237" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="243" code="50018">No DocBlock was found for property $method</error>
      <error line="244" code="50018">No DocBlock was found for property $count</error>
      <error line="246" code="50014">Name of argument $method does not match with the DocBlock's name $count in __construct()</error>
      <error line="246" code="50015">Argument $count is missing from the Docblock of __construct()</error>
      <error line="246" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="268" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="280" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="287" code="50018">No DocBlock was found for property $map</error>
      <error line="296" code="50014">Name of argument $parameters does not match with the DocBlock's name $action in add()</error>
      <error line="296" code="50015">Argument $action is missing from the Docblock of add()</error>
      <error line="336" code="50015">Argument $parameters is missing from the Docblock of test()</error>
      <error line="336" code="50015">Argument $message is missing from the Docblock of test()</error>
      <error line="347" code="50015">Argument $parameters is missing from the Docblock of findFirstSlot()</error>
      <error line="374" code="50018">No DocBlock was found for property $wildcard</error>
      <error line="375" code="50018">No DocBlock was found for property $always</error>
      <error line="376" code="50018">No DocBlock was found for property $at</error>
      <error line="387" code="50014">Name of argument $method does not match with the DocBlock's name $args in register()</error>
      <error line="387" code="50015">Argument $args is missing from the Docblock of register()</error>
      <error line="387" code="50015">Argument $action is missing from the Docblock of register()</error>
      <error line="404" code="50014">Name of argument $step does not match with the DocBlock's name $method in registerAt()</error>
      <error line="404" code="50015">Argument $method is missing from the Docblock of registerAt()</error>
      <error line="404" code="50015">Argument $args is missing from the Docblock of registerAt()</error>
      <error line="404" code="50015">Argument $action is missing from the Docblock of registerAt()</error>
      <error line="425" code="50014">Name of argument $method does not match with the DocBlock's name $args in expectArguments()</error>
      <error line="425" code="50015">Argument $args is missing from the Docblock of expectArguments()</error>
      <error line="425" code="50015">Argument $message is missing from the Docblock of expectArguments()</error>
      <error line="440" code="50014">Name of argument $step does not match with the DocBlock's name $method in respond()</error>
      <error line="440" code="50015">Argument $method is missing from the Docblock of respond()</error>
      <error line="440" code="50015">Argument $args is missing from the Docblock of respond()</error>
      <error line="469" code="50015">Argument $args is missing from the Docblock of replaceWildcards()</error>
      <error line="497" code="50018">No DocBlock was found for property $value</error>
      <error line="499" code="50015">Argument $value is missing from the Docblock of __construct()</error>
      <error line="525" code="50018">No DocBlock was found for property $reference</error>
      <error line="527" code="50015">Argument $reference is missing from the Docblock of __construct()</error>
      <error line="551" code="50018">No DocBlock was found for property $value</error>
      <error line="553" code="50015">Argument $value is missing from the Docblock of __construct()</error>
      <error line="580" code="50018">No DocBlock was found for property $exception</error>
      <error line="582" code="50015">Argument $exception is missing from the Docblock of __construct()</error>
      <error line="605" code="50018">No DocBlock was found for property $error</error>
      <error line="606" code="50018">No DocBlock was found for property $severity</error>
      <error line="608" code="50014">Name of argument $error does not match with the DocBlock's name $severity in __construct()</error>
      <error line="608" code="50015">Argument $severity is missing from the Docblock of __construct()</error>
      <error line="640" code="50018">No DocBlock was found for property $actions</error>
      <error line="641" code="50018">No DocBlock was found for property $expectations</error>
      <error line="642" code="50018">No DocBlock was found for property $wildcard</error>
      <error line="643" code="50018">No DocBlock was found for property $is_strict</error>
      <error line="644" code="50018">No DocBlock was found for property $call_counts</error>
      <error line="645" code="50018">No DocBlock was found for property $expected_counts</error>
      <error line="646" code="50018">No DocBlock was found for property $max_counts</error>
      <error line="647" code="50018">No DocBlock was found for property $expected_args</error>
      <error line="648" code="50018">No DocBlock was found for property $expected_args_at</error>
      <error line="681" code="50014">Name of argument $args does not match with the DocBlock's name $task in checkArgumentsIsArray()</error>
      <error line="681" code="50015">Argument $task is missing from the Docblock of checkArgumentsIsArray()</error>
      <error line="695" code="50014">Name of argument $method does not match with the DocBlock's name $task in dieOnNoMethod()</error>
      <error line="695" code="50015">Argument $task is missing from the Docblock of dieOnNoMethod()</error>
      <error line="709" code="50015">Argument $args is missing from the Docblock of replaceWildcards()</error>
      <error line="728" code="50014">Name of argument $method does not match with the DocBlock's name $args in addCall()</error>
      <error line="728" code="50015">Argument $args is missing from the Docblock of addCall()</error>
      <error line="740" code="50015">Argument $method is missing from the Docblock of getCallCount()</error>
      <error line="754" code="50014">Name of argument $method does not match with the DocBlock's name $value in returns()</error>
      <error line="754" code="50015">Argument $value is missing from the Docblock of returns()</error>
      <error line="754" code="50015">Argument $args is missing from the Docblock of returns()</error>
      <error line="767" code="50014">Name of argument $timing does not match with the DocBlock's name $method in returnsAt()</error>
      <error line="767" code="50015">Argument $method is missing from the Docblock of returnsAt()</error>
      <error line="767" code="50015">Argument $value is missing from the Docblock of returnsAt()</error>
      <error line="767" code="50015">Argument $args is missing from the Docblock of returnsAt()</error>
      <error line="785" code="50014">Name of argument $method does not match with the DocBlock's name $value in returnsByValue()</error>
      <error line="785" code="50015">Argument $value is missing from the Docblock of returnsByValue()</error>
      <error line="785" code="50015">Argument $args is missing from the Docblock of returnsByValue()</error>
      <error line="798" code="50012">No short description for method setReturnValue()</error>
      <error line="798" code="50015">Argument $method is missing from the Docblock of setReturnValue()</error>
      <error line="798" code="50015">Argument $value is missing from the Docblock of setReturnValue()</error>
      <error line="798" code="50015">Argument $args is missing from the Docblock of setReturnValue()</error>
      <error line="803" code="50014">Name of argument $timing does not match with the DocBlock's name $method in returnsByValueAt()</error>
      <error line="803" code="50015">Argument $method is missing from the Docblock of returnsByValueAt()</error>
      <error line="803" code="50015">Argument $value is missing from the Docblock of returnsByValueAt()</error>
      <error line="803" code="50015">Argument $args is missing from the Docblock of returnsByValueAt()</error>
      <error line="821" code="50012">No short description for method setReturnValueAt()</error>
      <error line="821" code="50015">Argument $timing is missing from the Docblock of setReturnValueAt()</error>
      <error line="821" code="50015">Argument $method is missing from the Docblock of setReturnValueAt()</error>
      <error line="821" code="50015">Argument $value is missing from the Docblock of setReturnValueAt()</error>
      <error line="821" code="50015">Argument $args is missing from the Docblock of setReturnValueAt()</error>
      <error line="826" code="50014">Name of argument $method does not match with the DocBlock's name $reference in returnsByReference()</error>
      <error line="826" code="50015">Argument $reference is missing from the Docblock of returnsByReference()</error>
      <error line="826" code="50015">Argument $args is missing from the Docblock of returnsByReference()</error>
      <error line="839" code="50012">No short description for method setReturnReference()</error>
      <error line="839" code="50015">Argument $method is missing from the Docblock of setReturnReference()</error>
      <error line="839" code="50015">Argument $reference is missing from the Docblock of setReturnReference()</error>
      <error line="839" code="50015">Argument $args is missing from the Docblock of setReturnReference()</error>
      <error line="844" code="50014">Name of argument $timing does not match with the DocBlock's name $method in returnsByReferenceAt()</error>
      <error line="844" code="50015">Argument $method is missing from the Docblock of returnsByReferenceAt()</error>
      <error line="844" code="50015">Argument $reference is missing from the Docblock of returnsByReferenceAt()</error>
      <error line="844" code="50015">Argument $args is missing from the Docblock of returnsByReferenceAt()</error>
      <error line="862" code="50012">No short description for method setReturnReferenceAt()</error>
      <error line="862" code="50015">Argument $timing is missing from the Docblock of setReturnReferenceAt()</error>
      <error line="862" code="50015">Argument $method is missing from the Docblock of setReturnReferenceAt()</error>
      <error line="862" code="50015">Argument $reference is missing from the Docblock of setReturnReferenceAt()</error>
      <error line="862" code="50015">Argument $args is missing from the Docblock of setReturnReferenceAt()</error>
      <error line="867" code="50015">Argument $args is missing from the Docblock of expect()</error>
      <error line="867" code="50015">Argument $message is missing from the Docblock of expect()</error>
      <error line="887" code="50015">Argument $method is missing from the Docblock of expectAt()</error>
      <error line="887" code="50015">Argument $args is missing from the Docblock of expectAt()</error>
      <error line="887" code="50015">Argument $message is missing from the Docblock of expectAt()</error>
      <error line="912" code="50015">Argument $count is missing from the Docblock of expectCallCount()</error>
      <error line="912" code="50015">Argument $message is missing from the Docblock of expectCallCount()</error>
      <error line="928" code="50014">Name of argument $method does not match with the DocBlock's name $count in expectMaximumCallCount()</error>
      <error line="928" code="50015">Argument $count is missing from the Docblock of expectMaximumCallCount()</error>
      <error line="928" code="50015">Argument $message is missing from the Docblock of expectMaximumCallCount()</error>
      <error line="943" code="50014">Name of argument $method does not match with the DocBlock's name $count in expectMinimumCallCount()</error>
      <error line="943" code="50015">Argument $count is missing from the Docblock of expectMinimumCallCount()</error>
      <error line="943" code="50015">Argument $message is missing from the Docblock of expectMinimumCallCount()</error>
      <error line="958" code="50014">Name of argument $method does not match with the DocBlock's name $message in expectNever()</error>
      <error line="958" code="50015">Argument $message is missing from the Docblock of expectNever()</error>
      <error line="968" code="50014">Name of argument $method does not match with the DocBlock's name $args in expectOnce()</error>
      <error line="968" code="50015">Argument $args is missing from the Docblock of expectOnce()</error>
      <error line="968" code="50015">Argument $message is missing from the Docblock of expectOnce()</error>
      <error line="983" code="50014">Name of argument $method does not match with the DocBlock's name $args in expectAtLeastOnce()</error>
      <error line="983" code="50015">Argument $args is missing from the Docblock of expectAtLeastOnce()</error>
      <error line="983" code="50015">Argument $message is missing from the Docblock of expectAtLeastOnce()</error>
      <error line="998" code="50014">Name of argument $method does not match with the DocBlock's name $exception in throwOn()</error>
      <error line="998" code="50015">Argument $exception is missing from the Docblock of throwOn()</error>
      <error line="998" code="50015">Argument $args is missing from the Docblock of throwOn()</error>
      <error line="1016" code="50014">Name of argument $timing does not match with the DocBlock's name $method in throwAt()</error>
      <error line="1016" code="50015">Argument $method is missing from the Docblock of throwAt()</error>
      <error line="1016" code="50015">Argument $exception is missing from the Docblock of throwAt()</error>
      <error line="1016" code="50015">Argument $args is missing from the Docblock of throwAt()</error>
      <error line="1040" code="50014">Name of argument $method does not match with the DocBlock's name $error in errorOn()</error>
      <error line="1040" code="50015">Argument $error is missing from the Docblock of errorOn()</error>
      <error line="1040" code="50015">Argument $args is missing from the Docblock of errorOn()</error>
      <error line="1040" code="50015">Argument $severity is missing from the Docblock of errorOn()</error>
      <error line="1057" code="50014">Name of argument $timing does not match with the DocBlock's name $method in errorAt()</error>
      <error line="1057" code="50015">Argument $method is missing from the Docblock of errorAt()</error>
      <error line="1057" code="50015">Argument $error is missing from the Docblock of errorAt()</error>
      <error line="1057" code="50015">Argument $args is missing from the Docblock of errorAt()</error>
      <error line="1057" code="50015">Argument $severity is missing from the Docblock of errorAt()</error>
      <error line="1080" code="50015">Argument $test is missing from the Docblock of atTestEnd()</error>
      <error line="1099" code="50015">Argument $args is missing from the Docblock of invoke()</error>
      <error line="1124" code="50015">Argument $args is missing from the Docblock of emulateCall()</error>
      <error line="1124" code="50015">Argument $step is missing from the Docblock of emulateCall()</error>
      <error line="1138" code="50014">Name of argument $method does not match with the DocBlock's name $args in checkExpectations()</error>
      <error line="1138" code="50015">Argument $args is missing from the Docblock of checkExpectations()</error>
      <error line="1138" code="50015">Argument $timing is missing from the Docblock of checkExpectations()</error>
      <error line="1177" code="50015">Argument $was is missing from the Docblock of restoreEStrict()</error>
      <critical line="1186" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="1201" code="50014">Name of argument $class does not match with the DocBlock's name $mock_class in generate()</error>
      <error line="1201" code="50015">Argument $mock_class is missing from the Docblock of generate()</error>
      <error line="1201" code="50015">Argument $methods is missing from the Docblock of generate()</error>
      <error line="1219" code="50015">Argument $mock_class is missing from the Docblock of generatePartial()</error>
      <error line="1219" code="50015">Argument $methods is missing from the Docblock of generatePartial()</error>
      <critical line="1243" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="1249" code="50018">No DocBlock was found for property $class</error>
      <error line="1250" code="50018">No DocBlock was found for property $mock_class</error>
      <error line="1251" code="50018">No DocBlock was found for property $mock_base</error>
      <error line="1252" code="50018">No DocBlock was found for property $reflection</error>
      <error line="1254" code="50014">Name of argument $class does not match with the DocBlock's name $mock_class in __construct()</error>
      <error line="1254" code="50015">Argument $mock_class is missing from the Docblock of __construct()</error>
      <error line="1270" code="50015">Argument $methods is missing from the Docblock of generate()</error>
      <error line="1339" code="50015">Argument $methods is missing from the Docblock of createClassCode()</error>
      <error line="1468" code="50015">Argument $method is missing from the Docblock of isConstructor()</error>
      <error line="1480" code="50015">Argument $methods is missing from the Docblock of addMethodList()</error>
      <error line="1491" code="50015">Argument $alias is missing from the Docblock of bailOutIfNotMocked()</error>
      <error line="1619" code="50015">Argument $methods is missing from the Docblock of overrideMethods()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/page.php" hash="90e5c8cd572f08ba6f6c5e7049cb08a0" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: page.php 1938 2009-08-05 17:16:23Z dgheath $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="24" package="Default">
      <extends/>
      <name>SimplePage</name>
      <full_name>\SimplePage</full_name>
      <docblock line="19">
        <description>A wrapper for a web page.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="19" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="25" namespace="global" package="Default">
        <name>$links</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$title</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="27" namespace="global" package="Default">
        <name>$last_widget</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="28" namespace="global" package="Default">
        <name>$label</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="29" namespace="global" package="Default">
        <name>$forms</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="30" namespace="global" package="Default">
        <name>$frames</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="31" namespace="global" package="Default">
        <name>$transport_error</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="32" namespace="global" package="Default">
        <name>$raw</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="33" namespace="global" package="Default">
        <name>$text</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="34" namespace="global" package="Default">
        <name>$sent</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="35" namespace="global" package="Default">
        <name>$headers</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="36" namespace="global" package="Default">
        <name>$method</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="37" namespace="global" package="Default">
        <name>$url</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="38" namespace="global" package="Default">
        <name>$base</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="39" namespace="global" package="Default">
        <name>$request_data</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="46" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="41">
          <description>Parses a page ready to access it's contents.</description>
          <long-description>&lt;p&gt;@param SimpleHttpResponse $response     Result of HTTP fetch.&lt;/p&gt;</long-description>
          <tag line="41" name="access" description="public"/>
        </docblock>
        <argument line="46">
          <name>$response</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="59" package="Default">
        <name>extractResponse</name>
        <full_name>extractResponse</full_name>
        <docblock line="54">
          <description>Extracts all of the response information.</description>
          <long-description>&lt;p&gt;@param SimpleHttpResponse $response    Response being parsed.&lt;/p&gt;</long-description>
          <tag line="54" name="access" description="private"/>
        </docblock>
        <argument line="59">
          <name>$response</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="73" package="Default">
        <name>noResponse</name>
        <full_name>noResponse</full_name>
        <docblock line="69">
          <description>Sets up a missing response.</description>
          <long-description>&lt;p&gt;@access private&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="88" package="Default">
        <name>getRequest</name>
        <full_name>getRequest</full_name>
        <docblock line="83">
          <description>Original request as bytes sent down the wire.</description>
          <long-description>&lt;p&gt;@return mixed              Sent content.&lt;/p&gt;</long-description>
          <tag line="83" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="97" package="Default">
        <name>getRaw</name>
        <full_name>getRaw</full_name>
        <docblock line="92">
          <description>Accessor for raw text of page.</description>
          <long-description>&lt;p&gt;@return string        Raw unparsed content.&lt;/p&gt;</long-description>
          <tag line="92" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="107" package="Default">
        <name>getText</name>
        <full_name>getText</full_name>
        <docblock line="101">
          <description>Accessor for plain text of page as a text browser
   would see it.</description>
          <long-description>&lt;p&gt;@return string        Plain text of page.&lt;/p&gt;</long-description>
          <tag line="101" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="119" package="Default">
        <name>getHeaders</name>
        <full_name>getHeaders</full_name>
        <docblock line="114">
          <description>Accessor for raw headers of page.</description>
          <long-description>&lt;p&gt;@return string       Header block as text.&lt;/p&gt;</long-description>
          <tag line="114" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="131" package="Default">
        <name>getMethod</name>
        <full_name>getMethod</full_name>
        <docblock line="126">
          <description>Original request method.</description>
          <long-description>&lt;p&gt;@return string        GET, POST or HEAD.&lt;/p&gt;</long-description>
          <tag line="126" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="140" package="Default">
        <name>getUrl</name>
        <full_name>getUrl</full_name>
        <docblock line="135">
          <description>Original resource name.</description>
          <long-description>&lt;p&gt;@return SimpleUrl        Current url.&lt;/p&gt;</long-description>
          <tag line="135" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="149" package="Default">
        <name>getBaseUrl</name>
        <full_name>getBaseUrl</full_name>
        <docblock line="144">
          <description>Base URL if set via BASE tag page url otherwise</description>
          <long-description>&lt;p&gt;@return SimpleUrl        Base url.&lt;/p&gt;</long-description>
          <tag line="144" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="158" package="Default">
        <name>getRequestData</name>
        <full_name>getRequestData</full_name>
        <docblock line="153">
          <description>Original request data.</description>
          <long-description>&lt;p&gt;@return mixed              Sent content.&lt;/p&gt;</long-description>
          <tag line="153" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="167" package="Default">
        <name>getTransportError</name>
        <full_name>getTransportError</full_name>
        <docblock line="162">
          <description>Accessor for last error.</description>
          <long-description>&lt;p&gt;@return string        Error from last response.&lt;/p&gt;</long-description>
          <tag line="162" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="176" package="Default">
        <name>getMimeType</name>
        <full_name>getMimeType</full_name>
        <docblock line="171">
          <description>Accessor for current MIME type.</description>
          <long-description>&lt;p&gt;@return string    MIME type as string; e.g. 'text/html'&lt;/p&gt;</long-description>
          <tag line="171" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="188" package="Default">
        <name>getResponseCode</name>
        <full_name>getResponseCode</full_name>
        <docblock line="183">
          <description>Accessor for HTTP response code.</description>
          <long-description>&lt;p&gt;@return integer    HTTP response code received.&lt;/p&gt;</long-description>
          <tag line="183" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="201" package="Default">
        <name>getAuthentication</name>
        <full_name>getAuthentication</full_name>
        <docblock line="195">
          <description>Accessor for last Authentication type.</description>
          <long-description>&lt;p&gt;Only valid
   straight after a challenge (401).&lt;/p&gt;</long-description>
          <tag line="195" name="return" description="Description of challenge type.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="214" package="Default">
        <name>getRealm</name>
        <full_name>getRealm</full_name>
        <docblock line="208">
          <description>Accessor for last Authentication realm.</description>
          <long-description>&lt;p&gt;Only valid
   straight after a challenge (401).&lt;/p&gt;</long-description>
          <tag line="208" name="return" description="Name of security realm.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="227" package="Default">
        <name>getFrameFocus</name>
        <full_name>getFrameFocus</full_name>
        <docblock line="221">
          <description>Accessor for current frame focus.</description>
          <long-description>&lt;p&gt;Will be
   false as no frames.&lt;/p&gt;</long-description>
          <tag line="221" name="return" description="Always empty.&#10;   @access public" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="237" package="Default">
        <name>setFrameFocusByIndex</name>
        <full_name>setFrameFocusByIndex</full_name>
        <docblock line="231">
          <description>Sets the focus by index.</description>
          <long-description>&lt;p&gt;The integer index starts from 1.&lt;/p&gt;</long-description>
          <tag line="231" name="param" description="Chosen frame. @return boolean Always false. @access public" type="integer" variable="$choice">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="237">
          <name>$choice</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="247" package="Default">
        <name>setFrameFocus</name>
        <full_name>setFrameFocus</full_name>
        <docblock line="241">
          <description>Sets the focus by name.</description>
          <long-description>&lt;p&gt;Always fails for a leaf page.&lt;/p&gt;</long-description>
          <tag line="241" name="param" description="Chosen frame. @return boolean False as no frames. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="247">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="255" package="Default">
        <name>clearFrameFocus</name>
        <full_name>clearFrameFocus</full_name>
        <docblock line="251">
          <description>Clears the frame focus.</description>
          <long-description>&lt;p&gt;Does nothing for a leaf page.&lt;/p&gt;</long-description>
          <tag line="251" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="261" package="Default">
        <name>setFrames</name>
        <full_name>setFrames</full_name>
        <docblock line="258">
          <description>TODO: write docs</description>
          <long-description></long-description>
        </docblock>
        <argument line="261">
          <name>$frames</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="271" package="Default">
        <name>linkIsAbsolute</name>
        <full_name>linkIsAbsolute</full_name>
        <docblock line="265">
          <description>Test to see if link is an absolute one.</description>
          <long-description>&lt;p&gt;@param string $url     Url to test.&lt;/p&gt;</long-description>
          <tag line="265" name="return" description="True if absolute.&#10;   @access protected" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="271">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="280" package="Default">
        <name>addLink</name>
        <full_name>addLink</full_name>
        <docblock line="276">
          <description>Adds a link to the page.</description>
          <long-description>&lt;p&gt;@param SimpleAnchorTag $tag      Link to accept.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="280">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="288" package="Default">
        <name>setForms</name>
        <full_name>setForms</full_name>
        <docblock line="284">
          <description>Set the forms</description>
          <long-description>&lt;p&gt;@param array $forms           An array of SimpleForm objects&lt;/p&gt;</long-description>
        </docblock>
        <argument line="288">
          <name>$forms</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="297" package="Default">
        <name>hasFrames</name>
        <full_name>hasFrames</full_name>
        <docblock line="292">
          <description>Test for the presence of a frameset.</description>
          <long-description>&lt;p&gt;@return boolean        True if frameset.&lt;/p&gt;</long-description>
          <tag line="292" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="310" package="Default">
        <name>getFrameset</name>
        <full_name>getFrameset</full_name>
        <docblock line="301">
          <description>Accessor for frame name and source URL for every frame that
   will need to be loaded.</description>
          <long-description>&lt;p&gt;Immediate children only.&lt;/p&gt;</long-description>
          <tag line="301" name="return" description="False if no frameset or&#10;                             otherwise a hash of frame URLs.&#10;                             The key is either a numerical&#10;                             base one index or the name attribute.&#10;   @access public" type="\boolean/array">
            <type by_reference="false">\boolean/array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="328" package="Default">
        <name>getFrames</name>
        <full_name>getFrames</full_name>
        <docblock line="323">
          <description>Fetches a list of loaded frames.</description>
          <long-description>&lt;p&gt;@return array/string    Just the URL for a single page.&lt;/p&gt;</long-description>
          <tag line="323" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="339" package="Default">
        <name>getUrls</name>
        <full_name>getUrls</full_name>
        <docblock line="333">
          <description>Accessor for a list of all links.</description>
          <long-description>&lt;p&gt;@return array   List of urls with scheme of
                   http or https and hostname.&lt;/p&gt;</long-description>
          <tag line="333" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="355" package="Default">
        <name>getUrlsByLabel</name>
        <full_name>getUrlsByLabel</full_name>
        <docblock line="348">
          <description>Accessor for URLs by the link label.</description>
          <long-description>&lt;p&gt;Label will match
   regardess of whitespace issues and case.&lt;/p&gt;</long-description>
          <tag line="348" name="param" description="Text of link. @return array List of links with that label. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="355">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="371" package="Default">
        <name>getUrlById</name>
        <full_name>getUrlById</full_name>
        <docblock line="365">
          <description>Accessor for a URL by the id attribute.</description>
          <long-description>&lt;p&gt;@param string $id       Id attribute of link.&lt;/p&gt;</long-description>
          <tag line="365" name="return" description="URL with that id of false if none.&#10;   @access public" type="\SimpleUrl">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="371">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="386" package="Default">
        <name>getUrlFromLink</name>
        <full_name>getUrlFromLink</full_name>
        <docblock line="380">
          <description>Converts a link tag into a target URL.</description>
          <long-description>&lt;p&gt;@param SimpleAnchor $link    Parsed link.&lt;/p&gt;</long-description>
          <tag line="380" name="return" description="URL with frame target if any.&#10;   @access private" type="\SimpleUrl">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="386">
          <name>$link</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="401" package="Default">
        <name>expandUrl</name>
        <full_name>expandUrl</full_name>
        <docblock line="394">
          <description>Expands expandomatic URLs into fully qualified
   URLs.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url        Relative URL.&lt;/p&gt;</long-description>
          <tag line="394" name="return" description="Absolute URL.&#10;   @access public" type="\SimpleUrl">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="401">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="413" package="Default">
        <name>setBase</name>
        <full_name>setBase</full_name>
        <docblock line="409">
          <description>Sets the base url for the page.</description>
          <long-description>&lt;p&gt;@param string $url    Base URL for page.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="413">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="421" package="Default">
        <name>setTitle</name>
        <full_name>setTitle</full_name>
        <docblock line="417">
          <description>Sets the title tag contents.</description>
          <long-description>&lt;p&gt;@param SimpleTitleTag $tag    Title of page.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="421">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="430" package="Default">
        <name>getTitle</name>
        <full_name>getTitle</full_name>
        <docblock line="425">
          <description>Accessor for parsed title.</description>
          <long-description>&lt;p&gt;@return string     Title or false if no title is present.&lt;/p&gt;</long-description>
          <tag line="425" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="445" package="Default">
        <name>getFormBySubmit</name>
        <full_name>getFormBySubmit</full_name>
        <docblock line="437">
          <description>Finds a held form by button label.</description>
          <long-description>&lt;p&gt;Will only
   search correctly built forms.&lt;/p&gt;</long-description>
          <tag line="437" name="param" description="Button finder. @return SimpleForm Form object containing the button. @access public" type="\SimpleSelector" variable="$selector">
            <type by_reference="false">\SimpleSelector</type>
          </tag>
        </docblock>
        <argument line="445">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="462" package="Default">
        <name>getFormByImage</name>
        <full_name>getFormByImage</full_name>
        <docblock line="454">
          <description>Finds a held form by image using a selector.</description>
          <long-description>&lt;p&gt;Will only search correctly built forms.&lt;/p&gt;</long-description>
          <tag line="454" name="param" description="Image finder. @return SimpleForm Form object containing the image. @access public" type="\SimpleSelector" variable="$selector">
            <type by_reference="false">\SimpleSelector</type>
          </tag>
        </docblock>
        <argument line="462">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="479" package="Default">
        <name>getFormById</name>
        <full_name>getFormById</full_name>
        <docblock line="471">
          <description>Finds a held form by the form ID.</description>
          <long-description>&lt;p&gt;A way of
   identifying a specific form when we have control
   of the HTML code.&lt;/p&gt;</long-description>
          <tag line="471" name="param" description="Form label. @return SimpleForm Form object containing the matching ID. @access public" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="479">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="496" package="Default">
        <name>setField</name>
        <full_name>setField</full_name>
        <docblock line="488">
          <description>Sets a field on each form in which the field is
   available.</description>
          <long-description>&lt;p&gt;@param SimpleSelector $selector    Field finder.&lt;/p&gt;</long-description>
          <tag line="488" name="param" description="Value to set field to. @return boolean True if value is valid. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="496">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
        <argument line="496">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="496">
          <name>$position</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="514" package="Default">
        <name>getField</name>
        <full_name>getField</full_name>
        <docblock line="506">
          <description>Accessor for a form element value within a page.</description>
          <long-description>&lt;p&gt;@param SimpleSelector $selector    Field finder.&lt;/p&gt;</long-description>
          <tag line="506" name="return" description="A string if the field is&#10;                                      present, false if unchecked&#10;                                      and null if missing.&#10;   @access public" type="\string/boolean">
            <type by_reference="false">\string/boolean</type>
          </tag>
        </docblock>
        <argument line="514">
          <name>$selector</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="532" package="Default">
        <name>normalise</name>
        <full_name>normalise</full_name>
        <docblock line="524">
          <description>Turns HTML into text browser visible text.</description>
          <long-description>&lt;p&gt;Images
   are converted to their alt text and tags are supressed.
   Entities are converted to their visible representation.&lt;/p&gt;</long-description>
          <tag line="524" name="param" description="HTML to convert. @return string Plain text. @access public" type="string" variable="$html">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="532">
          <name>$html</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="539">The \xAO is a &amp;nbsp;. Add a test for this.</todo>
    </markers>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/page.php</error>
      <critical line="19" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="25" code="50018">No DocBlock was found for property $links</error>
      <error line="26" code="50018">No DocBlock was found for property $title</error>
      <error line="27" code="50018">No DocBlock was found for property $last_widget</error>
      <error line="28" code="50018">No DocBlock was found for property $label</error>
      <error line="29" code="50018">No DocBlock was found for property $forms</error>
      <error line="30" code="50018">No DocBlock was found for property $frames</error>
      <error line="31" code="50018">No DocBlock was found for property $transport_error</error>
      <error line="32" code="50018">No DocBlock was found for property $raw</error>
      <error line="33" code="50018">No DocBlock was found for property $text</error>
      <error line="34" code="50018">No DocBlock was found for property $sent</error>
      <error line="35" code="50018">No DocBlock was found for property $headers</error>
      <error line="36" code="50018">No DocBlock was found for property $method</error>
      <error line="37" code="50018">No DocBlock was found for property $url</error>
      <error line="38" code="50018">No DocBlock was found for property $base</error>
      <error line="39" code="50018">No DocBlock was found for property $request_data</error>
      <error line="41" code="50015">Argument $response is missing from the Docblock of __construct()</error>
      <error line="54" code="50015">Argument $response is missing from the Docblock of extractResponse()</error>
      <error line="258" code="50015">Argument $frames is missing from the Docblock of setFrames()</error>
      <error line="265" code="50015">Argument $url is missing from the Docblock of linkIsAbsolute()</error>
      <error line="276" code="50015">Argument $tag is missing from the Docblock of addLink()</error>
      <error line="284" code="50015">Argument $forms is missing from the Docblock of setForms()</error>
      <error line="365" code="50015">Argument $id is missing from the Docblock of getUrlById()</error>
      <error line="380" code="50015">Argument $link is missing from the Docblock of getUrlFromLink()</error>
      <error line="394" code="50015">Argument $url is missing from the Docblock of expandUrl()</error>
      <error line="409" code="50015">Argument $url is missing from the Docblock of setBase()</error>
      <error line="417" code="50015">Argument $tag is missing from the Docblock of setTitle()</error>
      <error line="488" code="50014">Name of argument $selector does not match with the DocBlock's name $value in setField()</error>
      <error line="488" code="50015">Argument $value is missing from the Docblock of setField()</error>
      <error line="488" code="50015">Argument $position is missing from the Docblock of setField()</error>
      <error line="506" code="50015">Argument $selector is missing from the Docblock of getField()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/php_parser.php" hash="0f91251d9e050a1a8dadce6e958ca21b" package="Default">
    <docblock line="2">
      <description>base include file for SimpleTest</description>
      <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
      <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: php_parser.php 1927 2009-07-31 12:45:36Z dgheath $"/>
    </docblock>
    <constant namespace="global" line="16" package="Default">
      <name>$constant</name>
      <full_name>\$constant</full_name>
      <value>$i + 1</value>
    </constant>
    <class final="false" abstract="false" namespace="global" line="28" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>ParallelRegex</name>
      <full_name>\ParallelRegex</full_name>
      <docblock line="21">
        <description>Compounded regular expression.</description>
        <long-description>&lt;p&gt;Any of
   the contained patterns could match and
   when one does, it's label is returned.&lt;/p&gt;</long-description>
        <tag line="21" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="29" namespace="global" package="Default">
        <name>$patterns</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="30" namespace="global" package="Default">
        <name>$labels</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="31" namespace="global" package="Default">
        <name>$regex</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="32" namespace="global" package="Default">
        <name>$case</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="40" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="34">
          <description>Constructor.</description>
          <long-description>&lt;p&gt;Starts with no patterns.&lt;/p&gt;</long-description>
          <tag line="34" name="param" description="True for case sensitive, false for insensitive. @access public" type="boolean" variable="$case">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$case</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="55" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addPattern</name>
        <full_name>addPattern</full_name>
        <docblock line="47">
          <description>Adds a pattern with an optional label.</description>
          <long-description>&lt;p&gt;@param string $pattern      Perl style regex, but ( and )
                               lose the usual meaning.&lt;/p&gt;</long-description>
          <tag line="47" name="param" description="Label of regex to be returned on a match. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$label</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="SimpleTest&#10;   @subpackage WebTester">
        <name>match</name>
        <full_name>match</full_name>
        <docblock line="62">
          <description>Attempts to match all patterns at once against
   a string.</description>
          <long-description>&lt;p&gt;@param string $subject      String to match against.&lt;/p&gt;</long-description>
          <tag line="62" name="param" description="First matched portion of subject. @return boolean True on success. @access public" type="string" variable="$match">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$subject</name>
          <default></default>
          <type/>
        </argument>
        <argument line="71">
          <name>$match</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="96" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getCompoundedRegex</name>
        <full_name>getCompoundedRegex</full_name>
        <docblock line="88">
          <description>Compounds the patterns into a single
   regular expression separated with the
   "or" operator.</description>
          <long-description>&lt;p&gt;Caches the regex.
   Will automatically escape (, ) and / tokens.&lt;/p&gt;</long-description>
          <tag line="88" name="param" description="List of patterns in order. @access private" type="array" variable="$patterns">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="114" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getPerlMatchingFlags</name>
        <full_name>getPerlMatchingFlags</full_name>
        <docblock line="109">
          <description>Accessor for perl regex mode flags to use.</description>
          <long-description>&lt;p&gt;@return string       Perl regex flags.&lt;/p&gt;</long-description>
          <tag line="109" name="access" description="private"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="124" package="Default">
      <extends/>
      <name>SimpleStateStack</name>
      <full_name>\SimpleStateStack</full_name>
      <docblock line="119">
        <description>States for a stack machine.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="119" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="125" namespace="global" package="Default">
        <name>$stack</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="127">
          <description>Constructor.</description>
          <long-description>&lt;p&gt;Starts in named state.&lt;/p&gt;</long-description>
          <tag line="127" name="param" description="Starting state name. @access public" type="string" variable="$start">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="132">
          <name>$start</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="141" package="Default">
        <name>getCurrent</name>
        <full_name>getCurrent</full_name>
        <docblock line="136">
          <description>Accessor for current state.</description>
          <long-description>&lt;p&gt;@return string       State.&lt;/p&gt;</long-description>
          <tag line="136" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="151" package="Default">
        <name>enter</name>
        <full_name>enter</full_name>
        <docblock line="145">
          <description>Adds a state to the stack and sets it
   to be the current state.</description>
          <long-description>&lt;p&gt;@param string $state        New state.&lt;/p&gt;</long-description>
          <tag line="145" name="access" description="public"/>
        </docblock>
        <argument line="151">
          <name>$state</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="162" package="Default">
        <name>leave</name>
        <full_name>leave</full_name>
        <docblock line="155">
          <description>Leaves the current state and reverts
   to the previous one.</description>
          <long-description>&lt;p&gt;@return boolean    False if we drop off
                      the bottom of the list.&lt;/p&gt;</long-description>
          <tag line="155" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="180" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleLexer</name>
      <full_name>\SimpleLexer</full_name>
      <docblock line="171">
        <description>Accepts text and breaks it into tokens.</description>
        <long-description>&lt;p&gt;Some optimisation to make the sure the
   content is only scanned by the PHP regex
   parser once. Lexer modes must not start
   with leading underscores.&lt;/p&gt;</long-description>
        <tag line="171" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="181" namespace="global" package="Default">
        <name>$regexes</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="182" namespace="global" package="Default">
        <name>$parser</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="183" namespace="global" package="Default">
        <name>$mode</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="184" namespace="global" package="Default">
        <name>$mode_handlers</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="185" namespace="global" package="Default">
        <name>$case</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="196" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="187">
          <description>Sets up the lexer in case insensitive matching
   by default.</description>
          <long-description>&lt;p&gt;@param SimpleSaxParser $parser  Handling strategy by
                                   reference.&lt;/p&gt;</long-description>
          <tag line="187" name="param" description="Starting handler. @param boolean $case True for case sensitive. @access public" type="string" variable="$start">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="196">
          <name>$parser</name>
          <default></default>
          <type/>
        </argument>
        <argument line="196">
          <name>$start</name>
          <default>"accept"</default>
          <type/>
        </argument>
        <argument line="196">
          <name>$case</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="215" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addPattern</name>
        <full_name>addPattern</full_name>
        <docblock line="204">
          <description>Adds a token search pattern for a particular
   parsing mode.</description>
          <long-description>&lt;p&gt;The pattern does not change the
   current mode.&lt;/p&gt;</long-description>
          <tag line="204" name="param" description="Perl style regex, but ( and ) lose the usual meaning. @param string $mode Should only apply this pattern when dealing with this type of input. @access public" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="215">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="215">
          <name>$mode</name>
          <default>"accept"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="238" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addEntryPattern</name>
        <full_name>addEntryPattern</full_name>
        <docblock line="225">
          <description>Adds a pattern that will enter a new parsing
   mode.</description>
          <long-description>&lt;p&gt;Useful for entering parenthesis, strings,
   tags, etc.&lt;/p&gt;</long-description>
          <tag line="225" name="param" description="Perl style regex, but ( and ) lose the usual meaning. @param string $mode Should only apply this pattern when dealing with this type of input. @param string $new_mode Change parsing to this new nested mode. @access public" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="238">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
        <argument line="238">
          <name>$new_mode</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="256" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addExitPattern</name>
        <full_name>addExitPattern</full_name>
        <docblock line="248">
          <description>Adds a pattern that will exit the current mode
   and re-enter the previous one.</description>
          <long-description>&lt;p&gt;@param string $pattern      Perl style regex, but ( and )
                               lose the usual meaning.&lt;/p&gt;</long-description>
          <tag line="248" name="param" description="Mode to leave. @access public" type="string" variable="$mode">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="256">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="256">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="278" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addSpecialPattern</name>
        <full_name>addSpecialPattern</full_name>
        <docblock line="266">
          <description>Adds a pattern that has a special mode.</description>
          <long-description>&lt;p&gt;Acts as an entry
   and exit pattern in one go, effectively calling a special
   parser handler for this token only.&lt;/p&gt;</long-description>
          <tag line="266" name="param" description="Perl style regex, but ( and ) lose the usual meaning. @param string $mode Should only apply this pattern when dealing with this type of input. @param string $special Use this mode for this one token. @access public" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="278">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="278">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
        <argument line="278">
          <name>$special</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="294" package="SimpleTest&#10;   @subpackage WebTester">
        <name>mapHandler</name>
        <full_name>mapHandler</full_name>
        <docblock line="288">
          <description>Adds a mapping from a mode to another handler.</description>
          <long-description>&lt;p&gt;@param string $mode        Mode to be remapped.&lt;/p&gt;</long-description>
          <tag line="288" name="param" description="New target handler. @access public" type="string" variable="$handler">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="294">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
        <argument line="294">
          <name>$handler</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="308" package="SimpleTest&#10;   @subpackage WebTester">
        <name>parse</name>
        <full_name>parse</full_name>
        <docblock line="298">
          <description>Splits the page text into tokens.</description>
          <long-description>&lt;p&gt;Will fail
   if the handlers report an error or if no
   content is consumed. If successful then each
   unparsed and parsed token invokes a call to the
   held listener.&lt;/p&gt;</long-description>
          <tag line="298" name="param" description="Raw HTML text. @return boolean True on success, else false. @access public" type="string" variable="$raw">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="308">
          <name>$raw</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="344" package="SimpleTest&#10;   @subpackage WebTester">
        <name>dispatchTokens</name>
        <full_name>dispatchTokens</full_name>
        <docblock line="332">
          <description>Sends the matched token and any leading unmatched
   text to the parser changing the lexer to a new
   mode if one is listed.</description>
          <long-description>&lt;p&gt;@param string $unmatched    Unmatched leading portion.&lt;/p&gt;</long-description>
          <tag line="332" name="param" description="Actual token match. @param string $mode Mode after match. A boolean false mode causes no change. @return boolean False if there was any error from the parser. @access private" type="string" variable="$matched">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="344">
          <name>$unmatched</name>
          <default></default>
          <type/>
        </argument>
        <argument line="344">
          <name>$matched</name>
          <default></default>
          <type/>
        </argument>
        <argument line="344">
          <name>$mode</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="376" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isModeEnd</name>
        <full_name>isModeEnd</full_name>
        <docblock line="368">
          <description>Tests to see if the new mode is actually to leave
   the current mode and pop an item from the matching
   mode stack.</description>
          <long-description>&lt;p&gt;@param string $mode    Mode to test.&lt;/p&gt;</long-description>
          <tag line="368" name="return" description="True if this is the exit mode.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="376">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="388" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isSpecialMode</name>
        <full_name>isSpecialMode</full_name>
        <docblock line="380">
          <description>Test to see if the mode is one where this mode
   is entered for this token only and automatically
   leaves immediately afterwoods.</description>
          <long-description>&lt;p&gt;@param string $mode    Mode to test.&lt;/p&gt;</long-description>
          <tag line="380" name="return" description="True if this is the exit mode.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="388">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="399" package="SimpleTest&#10;   @subpackage WebTester">
        <name>decodeSpecial</name>
        <full_name>decodeSpecial</full_name>
        <docblock line="392">
          <description>Strips the magic underscore marking single token
   modes.</description>
          <long-description>&lt;p&gt;@param string $mode    Mode to decode.&lt;/p&gt;</long-description>
          <tag line="392" name="return" description="Underlying mode name.&#10;   @access private" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="399">
          <name>$mode</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="412" package="SimpleTest&#10;   @subpackage WebTester">
        <name>invokeParser</name>
        <full_name>invokeParser</full_name>
        <docblock line="403">
          <description>Calls the parser method named after the current
   mode.</description>
          <long-description>&lt;p&gt;Empty content will be ignored. The lexer
   has a parser handler for each mode in the lexer.&lt;/p&gt;</long-description>
          <tag line="403" name="param" description="Text parsed. @param boolean $is_match Token is recognised rather than unparsed data. @access private" type="string" variable="$content">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="412">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
        <argument line="412">
          <name>$is_match</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="434" package="SimpleTest&#10;   @subpackage WebTester">
        <name>reduce</name>
        <full_name>reduce</full_name>
        <docblock line="420">
          <description>Tries to match a chunk of text and if successful
   removes the recognised chunk and any leading
   unparsed data.</description>
          <long-description>&lt;p&gt;Empty strings will not be matched.&lt;/p&gt;</long-description>
          <tag line="420" name="param" description="The subject to parse. This is the content that will be eaten. @return array/boolean Three item list of unparsed content followed by the recognised token and finally the action the parser is to take. True if no match, false if there is a parsing error. @access private" type="string" variable="$raw">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="434">
          <name>$raw</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="450" package="Default">
      <extends>\SimpleLexer</extends>
      <name>SimpleHtmlLexer</name>
      <full_name>\SimpleHtmlLexer</full_name>
      <docblock line="445">
        <description>Breaks HTML into SAX events.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="445" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="459" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="452">
          <description>Sets up the lexer with case insensitive matching
   and adds the HTML handlers.</description>
          <long-description>&lt;p&gt;@param SimpleSaxParser $parser  Handling strategy by
                                   reference.&lt;/p&gt;</long-description>
          <tag line="452" name="access" description="public"/>
        </docblock>
        <argument line="459">
          <name>$parser</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="474" package="Default">
        <name>getParsedTags</name>
        <full_name>getParsedTags</full_name>
        <docblock line="469">
          <description>List of parsed tags.</description>
          <long-description>&lt;p&gt;Others are ignored.&lt;/p&gt;</long-description>
          <tag line="469" name="return" description="List of searched for tags.&#10;   @access private" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="484" package="Default">
        <name>addSkipping</name>
        <full_name>addSkipping</full_name>
        <docblock line="479">
          <description>The lexer has to skip certain sections such
   as server code, client code and styles.</description>
          <long-description>&lt;p&gt;@access private&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="501" package="Default">
        <name>addTag</name>
        <full_name>addTag</full_name>
        <docblock line="496">
          <description>Pattern matches to start and end a tag.</description>
          <long-description>&lt;p&gt;@param string $tag          Name of tag to scan for.&lt;/p&gt;</long-description>
          <tag line="496" name="access" description="private"/>
        </docblock>
        <argument line="501">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="511" package="Default">
        <name>addInTagTokens</name>
        <full_name>addInTagTokens</full_name>
        <docblock line="506">
          <description>Pattern matches to parse the inside of a tag
   including the attributes and their quoting.</description>
          <long-description>&lt;p&gt;@access private&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="524" package="Default">
        <name>addAttributeTokens</name>
        <full_name>addAttributeTokens</full_name>
        <docblock line="519">
          <description>Matches attributes that are either single quoted,
   double quoted or unquoted.</description>
          <long-description>&lt;p&gt;@access private&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="543" package="Default">
      <extends/>
      <name>SimpleHtmlSaxParser</name>
      <full_name>\SimpleHtmlSaxParser</full_name>
      <docblock line="538">
        <description>Converts HTML tokens into selected SAX events.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="538" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="544" namespace="global" package="Default">
        <name>$lexer</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="545" namespace="global" package="Default">
        <name>$listener</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="546" namespace="global" package="Default">
        <name>$tag</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="547" namespace="global" package="Default">
        <name>$attributes</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="548" namespace="global" package="Default">
        <name>$current_attribute</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="555" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="550">
          <description>Sets the listener.</description>
          <long-description>&lt;p&gt;@param SimplePhpPageBuilder $listener    SAX event handler.&lt;/p&gt;</long-description>
          <tag line="550" name="access" description="public"/>
        </docblock>
        <argument line="555">
          <name>$listener</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="570" package="Default">
        <name>parse</name>
        <full_name>parse</full_name>
        <docblock line="563">
          <description>Runs the content through the lexer which
   should call back to the acceptors.</description>
          <long-description>&lt;p&gt;@param string $raw      Page text to parse.&lt;/p&gt;</long-description>
          <tag line="563" name="return" description="False if parse error.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="570">
          <name>$raw</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="580" package="Default">
        <name>createLexer</name>
        <full_name>createLexer</full_name>
        <docblock line="574">
          <description>Sets up the matching lexer.</description>
          <long-description>&lt;p&gt;Starts in 'text' mode.&lt;/p&gt;</long-description>
          <tag line="574" name="param" description="Event generator, usually $self. @return SimpleLexer Lexer suitable for this parser. @access public" type="\SimpleSaxParser" variable="$parser">
            <type by_reference="false">\SimpleSaxParser</type>
          </tag>
        </docblock>
        <argument line="580">
          <name>$parser</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="595" package="Default">
        <name>acceptStartToken</name>
        <full_name>acceptStartToken</full_name>
        <docblock line="584">
          <description>Accepts a token from the tag mode.</description>
          <long-description>&lt;p&gt;If the
   starting element completes then the element
   is dispatched and the current attributes
   set back to empty. The element or attribute
   name is converted to lower case.&lt;/p&gt;</long-description>
          <tag line="584" name="param" description="Incoming characters. @param integer $event Lexer event type. @return boolean False if parse error. @access public" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="595">
          <name>$token</name>
          <default></default>
          <type/>
        </argument>
        <argument line="595">
          <name>$event</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="623" package="Default">
        <name>acceptEndToken</name>
        <full_name>acceptEndToken</full_name>
        <docblock line="615">
          <description>Accepts a token from the end tag mode.</description>
          <long-description>&lt;p&gt;The element name is converted to lower case.&lt;/p&gt;</long-description>
          <tag line="615" name="param" description="Incoming characters. @param integer $event Lexer event type. @return boolean False if parse error. @access public" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="623">
          <name>$token</name>
          <default></default>
          <type/>
        </argument>
        <argument line="623">
          <name>$event</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="637" package="Default">
        <name>acceptAttributeToken</name>
        <full_name>acceptAttributeToken</full_name>
        <docblock line="630">
          <description>Part of the tag data.</description>
          <long-description>&lt;p&gt;@param string $token     Incoming characters.&lt;/p&gt;</long-description>
          <tag line="630" name="param" description="Lexer event type. @return boolean False if parse error. @access public" type="integer" variable="$event">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="637">
          <name>$token</name>
          <default></default>
          <type/>
        </argument>
        <argument line="637">
          <name>$event</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="658" package="Default">
        <name>acceptEntityToken</name>
        <full_name>acceptEntityToken</full_name>
        <docblock line="651">
          <description>A character entity.</description>
          <long-description>&lt;p&gt;@param string $token    Incoming characters.&lt;/p&gt;</long-description>
          <tag line="651" name="param" description="Lexer event type. @return boolean False if parse error. @access public" type="integer" variable="$event">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="658">
          <name>$token</name>
          <default></default>
          <type/>
        </argument>
        <argument line="658">
          <name>$event</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="669" package="Default">
        <name>acceptTextToken</name>
        <full_name>acceptTextToken</full_name>
        <docblock line="661">
          <description>Character data between tags regarded as
   important.</description>
          <long-description>&lt;p&gt;@param string $token     Incoming characters.&lt;/p&gt;</long-description>
          <tag line="661" name="param" description="Lexer event type. @return boolean False if parse error. @access public" type="integer" variable="$event">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="669">
          <name>$token</name>
          <default></default>
          <type/>
        </argument>
        <argument line="669">
          <name>$event</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="680" package="Default">
        <name>ignore</name>
        <full_name>ignore</full_name>
        <docblock line="673">
          <description>Incoming data to be ignored.</description>
          <long-description>&lt;p&gt;@param string $token     Incoming characters.&lt;/p&gt;</long-description>
          <tag line="673" name="param" description="Lexer event type. @return boolean False if parse error. @access public" type="integer" variable="$event">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="680">
          <name>$token</name>
          <default></default>
          <type/>
        </argument>
        <argument line="680">
          <name>$event</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="691" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimplePhpPageBuilder</name>
      <full_name>\SimplePhpPageBuilder</full_name>
      <docblock line="685">
        <description>SAX event handler.</description>
        <long-description>&lt;p&gt;Maintains a list of
   open tags and dispatches them as they close.&lt;/p&gt;</long-description>
        <tag line="685" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="692" namespace="global" package="Default">
        <name>$tags</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="693" namespace="global" package="Default">
        <name>$page</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="694" namespace="global" package="Default">
        <name>$private_content_tag</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="695" namespace="global" package="Default">
        <name>$open_forms</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="696" namespace="global" package="Default">
        <name>$complete_forms</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="697" namespace="global" package="Default">
        <name>$frameset</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="698" namespace="global" package="Default">
        <name>$loading_frames</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="699" namespace="global" package="Default">
        <name>$frameset_nesting_level</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="private" line="700" namespace="global" package="Default">
        <name>$left_over_labels</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="707" package="SimpleTest&#10;   @subpackage WebTester">
        <name>free</name>
        <full_name>free</full_name>
        <docblock line="702">
          <description>Frees up any references so as to allow the PHP garbage
   collection from unset() to work.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="723" package="SimpleTest&#10;   @subpackage WebTester">
        <name>can</name>
        <full_name>can</full_name>
        <docblock line="719">
          <description>This builder is always available.</description>
          <long-description>&lt;p&gt;@return boolean       Always true.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="734" package="SimpleTest&#10;   @subpackage WebTester">
        <name>parse</name>
        <full_name>parse</full_name>
        <docblock line="727">
          <description>Reads the raw content and send events
   into the page to be built.</description>
          <long-description>&lt;p&gt;@param $response SimpleHttpResponse  Fetched response.&lt;/p&gt;</long-description>
          <tag line="727" name="return" description="Newly parsed page.&#10;   @access public" type="\SimplePage">
            <type by_reference="false">\SimplePage</type>
          </tag>
        </docblock>
        <argument line="734">
          <name>$response</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="750" package="SimpleTest&#10;   @subpackage WebTester">
        <name>createPage</name>
        <full_name>createPage</full_name>
        <docblock line="745">
          <description>Creates an empty page.</description>
          <long-description>&lt;p&gt;@return SimplePage        New unparsed page.&lt;/p&gt;</long-description>
          <tag line="745" name="access" description="protected"/>
        </docblock>
        <argument line="750">
          <name>$response</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="761" package="SimpleTest&#10;   @subpackage WebTester">
        <name>createParser</name>
        <full_name>createParser</full_name>
        <docblock line="754">
          <description>Creates the parser used with the builder.</description>
          <long-description>&lt;p&gt;@param SimplePhpPageBuilder $listener   Target of parser.&lt;/p&gt;</long-description>
          <tag line="754" name="return" description="Parser to generate&#10;                                        events for the builder.&#10;   @access protected" type="\SimpleSaxParser">
            <type by_reference="false">\SimpleSaxParser</type>
          </tag>
        </docblock>
        <argument line="761">
          <name>$listener</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="773" package="SimpleTest&#10;   @subpackage WebTester">
        <name>startElement</name>
        <full_name>startElement</full_name>
        <docblock line="765">
          <description>Start of element event.</description>
          <long-description>&lt;p&gt;Opens a new tag.&lt;/p&gt;</long-description>
          <tag line="765" name="param" description="Element name. @param hash $attributes Attributes without content are marked as true. @return boolean False on parse error. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="773">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="773">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="813" package="SimpleTest&#10;   @subpackage WebTester">
        <name>endElement</name>
        <full_name>endElement</full_name>
        <docblock line="807">
          <description>End of element event.</description>
          <long-description>&lt;p&gt;@param string $name        Element name.&lt;/p&gt;</long-description>
          <tag line="807" name="return" description="False on parse error.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="813">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="845" package="SimpleTest&#10;   @subpackage WebTester">
        <name>hasNamedTagOnOpenTagStack</name>
        <full_name>hasNamedTagOnOpenTagStack</full_name>
        <docblock line="838">
          <description>Test to see if there are any open tags awaiting
   closure that match the tag name.</description>
          <long-description>&lt;p&gt;@param string $name        Element name.&lt;/p&gt;</long-description>
          <tag line="838" name="return" description="True if any are still open.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="845">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="856" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addContent</name>
        <full_name>addContent</full_name>
        <docblock line="849">
          <description>Unparsed, but relevant data.</description>
          <long-description>&lt;p&gt;The data is added
   to every open tag.&lt;/p&gt;</long-description>
          <tag line="849" name="param" description="May include unparsed tags. @return boolean False on parse error. @access public" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="856">
          <name>$text</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="871" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addContentToAllOpenTags</name>
        <full_name>addContentToAllOpenTags</full_name>
        <docblock line="865">
          <description>Any content fills all currently open tags unless it
   is part of an option tag.</description>
          <long-description>&lt;p&gt;@param string $text        May include unparsed tags.&lt;/p&gt;</long-description>
          <tag line="865" name="access" description="private"/>
        </docblock>
        <argument line="871">
          <name>$text</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="886" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addContentTagToOpenTags</name>
        <full_name>addContentTagToOpenTags</full_name>
        <docblock line="879">
          <description>Parsed data in tag form.</description>
          <long-description>&lt;p&gt;The parsed tag is added
   to every open tag. Used for adding options to select
   fields only.&lt;/p&gt;</long-description>
          <tag line="879" name="param" description="Option tags only. @access private" type="\SimpleTag" variable="$tag">
            <type by_reference="false">\SimpleTag</type>
          </tag>
        </docblock>
        <argument line="886">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="903" package="SimpleTest&#10;   @subpackage WebTester">
        <name>openTag</name>
        <full_name>openTag</full_name>
        <docblock line="897">
          <description>Opens a tag for receiving content.</description>
          <long-description>&lt;p&gt;Multiple tags
   will be receiving input at the same time.&lt;/p&gt;</long-description>
          <tag line="897" name="param" description="New content tag. @access private" type="\SimpleTag" variable="$tag">
            <type by_reference="false">\SimpleTag</type>
          </tag>
        </docblock>
        <argument line="903">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="916" package="SimpleTest&#10;   @subpackage WebTester">
        <name>acceptTag</name>
        <full_name>acceptTag</full_name>
        <docblock line="911">
          <description>Adds a tag to the page.</description>
          <long-description>&lt;p&gt;@param SimpleTag $tag        Tag to accept.&lt;/p&gt;</long-description>
          <tag line="911" name="access" description="public"/>
        </docblock>
        <argument line="916">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="936" package="SimpleTest&#10;   @subpackage WebTester">
        <name>acceptLabelStart</name>
        <full_name>acceptLabelStart</full_name>
        <docblock line="931">
          <description>Opens a label for a described widget.</description>
          <long-description>&lt;p&gt;@param SimpleFormTag $tag      Tag to accept.&lt;/p&gt;</long-description>
          <tag line="931" name="access" description="public"/>
        </docblock>
        <argument line="936">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="945" package="SimpleTest&#10;   @subpackage WebTester">
        <name>acceptLabelEnd</name>
        <full_name>acceptLabelEnd</full_name>
        <docblock line="941">
          <description>Closes the most recently opened label.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="964" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isFormElement</name>
        <full_name>isFormElement</full_name>
        <docblock line="957">
          <description>Tests to see if a tag is a possible form
   element.</description>
          <long-description>&lt;p&gt;@param string $name     HTML element name.&lt;/p&gt;</long-description>
          <tag line="957" name="return" description="True if form element.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="964">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="973" package="SimpleTest&#10;   @subpackage WebTester">
        <name>acceptFormStart</name>
        <full_name>acceptFormStart</full_name>
        <docblock line="968">
          <description>Opens a form.</description>
          <long-description>&lt;p&gt;New widgets go here.&lt;/p&gt;</long-description>
          <tag line="968" name="param" description="Tag to accept. @access public" type="\SimpleFormTag" variable="$tag">
            <type by_reference="false">\SimpleFormTag</type>
          </tag>
        </docblock>
        <argument line="973">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="981" package="SimpleTest&#10;   @subpackage WebTester">
        <name>acceptFormEnd</name>
        <full_name>acceptFormEnd</full_name>
        <docblock line="977">
          <description>Closes the most recently opened form.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="993" package="SimpleTest&#10;   @subpackage WebTester">
        <name>acceptFramesetStart</name>
        <full_name>acceptFramesetStart</full_name>
        <docblock line="987">
          <description>Opens a frameset.</description>
          <long-description>&lt;p&gt;A frameset may contain nested
   frameset tags.&lt;/p&gt;</long-description>
          <tag line="987" name="param" description="Tag to accept. @access public" type="\SimpleFramesetTag" variable="$tag">
            <type by_reference="false">\SimpleFramesetTag</type>
          </tag>
        </docblock>
        <argument line="993">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1004" package="SimpleTest&#10;   @subpackage WebTester">
        <name>acceptFramesetEnd</name>
        <full_name>acceptFramesetEnd</full_name>
        <docblock line="1000">
          <description>Closes the most recently opened frameset.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1016" package="SimpleTest&#10;   @subpackage WebTester">
        <name>acceptFrame</name>
        <full_name>acceptFrame</full_name>
        <docblock line="1010">
          <description>Takes a single frame tag and stashes it in
   the current frame set.</description>
          <long-description>&lt;p&gt;@param SimpleFrameTag $tag      Tag to accept.&lt;/p&gt;</long-description>
          <tag line="1010" name="access" description="public"/>
        </docblock>
        <argument line="1016">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1030" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isLoadingFrames</name>
        <full_name>isLoadingFrames</full_name>
        <docblock line="1024">
          <description>Test to see if in the middle of reading
   a frameset.</description>
          <long-description>&lt;p&gt;@return boolean        True if inframeset.&lt;/p&gt;</long-description>
          <tag line="1024" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1039" package="SimpleTest&#10;   @subpackage WebTester">
        <name>acceptPageEnd</name>
        <full_name>acceptPageEnd</full_name>
        <docblock line="1034">
          <description>Marker for end of complete page.</description>
          <long-description>&lt;p&gt;Any work in
   progress can now be closed.&lt;/p&gt;</long-description>
          <tag line="1034" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="29" code="50018">No DocBlock was found for property $patterns</error>
      <error line="30" code="50018">No DocBlock was found for property $labels</error>
      <error line="31" code="50018">No DocBlock was found for property $regex</error>
      <error line="32" code="50018">No DocBlock was found for property $case</error>
      <error line="47" code="50014">Name of argument $pattern does not match with the DocBlock's name $label in addPattern()</error>
      <error line="47" code="50015">Argument $label is missing from the Docblock of addPattern()</error>
      <error line="62" code="50014">Name of argument $subject does not match with the DocBlock's name $match in match()</error>
      <error line="62" code="50015">Argument $match is missing from the Docblock of match()</error>
      <notice line="88" code="50013">Parameter $patterns could not be found in getCompoundedRegex()</notice>
      <critical line="119" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="125" code="50018">No DocBlock was found for property $stack</error>
      <error line="145" code="50015">Argument $state is missing from the Docblock of enter()</error>
      <error line="181" code="50018">No DocBlock was found for property $regexes</error>
      <error line="182" code="50018">No DocBlock was found for property $parser</error>
      <error line="183" code="50018">No DocBlock was found for property $mode</error>
      <error line="184" code="50018">No DocBlock was found for property $mode_handlers</error>
      <error line="185" code="50018">No DocBlock was found for property $case</error>
      <error line="187" code="50014">Name of argument $parser does not match with the DocBlock's name $start in __construct()</error>
      <error line="187" code="50015">Argument $start is missing from the Docblock of __construct()</error>
      <error line="187" code="50015">Argument $case is missing from the Docblock of __construct()</error>
      <error line="204" code="50015">Argument $mode is missing from the Docblock of addPattern()</error>
      <error line="225" code="50015">Argument $mode is missing from the Docblock of addEntryPattern()</error>
      <error line="225" code="50015">Argument $new_mode is missing from the Docblock of addEntryPattern()</error>
      <error line="248" code="50014">Name of argument $pattern does not match with the DocBlock's name $mode in addExitPattern()</error>
      <error line="248" code="50015">Argument $mode is missing from the Docblock of addExitPattern()</error>
      <error line="266" code="50015">Argument $mode is missing from the Docblock of addSpecialPattern()</error>
      <error line="266" code="50015">Argument $special is missing from the Docblock of addSpecialPattern()</error>
      <error line="288" code="50014">Name of argument $mode does not match with the DocBlock's name $handler in mapHandler()</error>
      <error line="288" code="50015">Argument $handler is missing from the Docblock of mapHandler()</error>
      <error line="332" code="50014">Name of argument $unmatched does not match with the DocBlock's name $matched in dispatchTokens()</error>
      <error line="332" code="50015">Argument $matched is missing from the Docblock of dispatchTokens()</error>
      <error line="332" code="50015">Argument $mode is missing from the Docblock of dispatchTokens()</error>
      <error line="368" code="50015">Argument $mode is missing from the Docblock of isModeEnd()</error>
      <error line="380" code="50015">Argument $mode is missing from the Docblock of isSpecialMode()</error>
      <error line="392" code="50015">Argument $mode is missing from the Docblock of decodeSpecial()</error>
      <error line="403" code="50015">Argument $is_match is missing from the Docblock of invokeParser()</error>
      <critical line="445" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="452" code="50015">Argument $parser is missing from the Docblock of __construct()</error>
      <error line="496" code="50015">Argument $tag is missing from the Docblock of addTag()</error>
      <critical line="538" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="544" code="50018">No DocBlock was found for property $lexer</error>
      <error line="545" code="50018">No DocBlock was found for property $listener</error>
      <error line="546" code="50018">No DocBlock was found for property $tag</error>
      <error line="547" code="50018">No DocBlock was found for property $attributes</error>
      <error line="548" code="50018">No DocBlock was found for property $current_attribute</error>
      <error line="550" code="50015">Argument $listener is missing from the Docblock of __construct()</error>
      <error line="563" code="50015">Argument $raw is missing from the Docblock of parse()</error>
      <error line="584" code="50015">Argument $event is missing from the Docblock of acceptStartToken()</error>
      <error line="615" code="50015">Argument $event is missing from the Docblock of acceptEndToken()</error>
      <error line="630" code="50014">Name of argument $token does not match with the DocBlock's name $event in acceptAttributeToken()</error>
      <error line="630" code="50015">Argument $event is missing from the Docblock of acceptAttributeToken()</error>
      <error line="651" code="50014">Name of argument $token does not match with the DocBlock's name $event in acceptEntityToken()</error>
      <error line="651" code="50015">Argument $event is missing from the Docblock of acceptEntityToken()</error>
      <error line="661" code="50014">Name of argument $token does not match with the DocBlock's name $event in acceptTextToken()</error>
      <error line="661" code="50015">Argument $event is missing from the Docblock of acceptTextToken()</error>
      <error line="673" code="50014">Name of argument $token does not match with the DocBlock's name $event in ignore()</error>
      <error line="673" code="50015">Argument $event is missing from the Docblock of ignore()</error>
      <error line="692" code="50018">No DocBlock was found for property $tags</error>
      <error line="693" code="50018">No DocBlock was found for property $page</error>
      <error line="694" code="50018">No DocBlock was found for property $private_content_tag</error>
      <error line="695" code="50018">No DocBlock was found for property $open_forms</error>
      <error line="696" code="50018">No DocBlock was found for property $complete_forms</error>
      <error line="697" code="50018">No DocBlock was found for property $frameset</error>
      <error line="698" code="50018">No DocBlock was found for property $loading_frames</error>
      <error line="699" code="50018">No DocBlock was found for property $frameset_nesting_level</error>
      <error line="700" code="50018">No DocBlock was found for property $left_over_labels</error>
      <error line="727" code="50015">Argument $response is missing from the Docblock of parse()</error>
      <error line="745" code="50015">Argument $response is missing from the Docblock of createPage()</error>
      <error line="754" code="50015">Argument $listener is missing from the Docblock of createParser()</error>
      <error line="765" code="50015">Argument $attributes is missing from the Docblock of startElement()</error>
      <error line="807" code="50015">Argument $name is missing from the Docblock of endElement()</error>
      <error line="838" code="50015">Argument $name is missing from the Docblock of hasNamedTagOnOpenTagStack()</error>
      <error line="865" code="50015">Argument $text is missing from the Docblock of addContentToAllOpenTags()</error>
      <error line="911" code="50015">Argument $tag is missing from the Docblock of acceptTag()</error>
      <error line="931" code="50015">Argument $tag is missing from the Docblock of acceptLabelStart()</error>
      <error line="957" code="50015">Argument $name is missing from the Docblock of isFormElement()</error>
      <error line="1010" code="50015">Argument $tag is missing from the Docblock of acceptFrame()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/recorder.php" hash="4014a2525f600df42c883c4507ad19fa" package="SimpleTest\Extensions&#10; @author Rene vd O (original code)&#10; @author Perrick Penet&#10; @author Marcus Baker">
    <docblock line="2">
      <description>base include file for SimpleTest</description>
      <long-description></long-description>
      <tag line="2" name="package" description="SimpleTest"/>
      <tag line="2" name="subpackage" description="Extensions&#10; @author Rene vd O (original code)&#10; @author Perrick Penet&#10; @author Marcus Baker"/>
      <tag line="2" name="version" description="$Id: recorder.php 2011 2011-04-29 08:22:48Z pp11 $"/>
    </docblock>
    <include line="15" type="Require Once" package="Default">
      <name/>
      <docblock line="12">
        <description>include other SimpleTest class files</description>
        <long-description></long-description>
      </docblock>
    </include>
    <class final="true" abstract="true" namespace="global" line="22" package="SimpleTest\Extensions">
      <extends/>
      <name>SimpleResult</name>
      <full_name>\SimpleResult</full_name>
      <docblock line="17">
        <description>A single test result.</description>
        <long-description></long-description>
        <tag line="17" name="package" description="SimpleTest"/>
        <tag line="17" name="subpackage" description="Extensions"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="23" namespace="global" package="Default">
        <name>$time</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="24" namespace="global" package="Default">
        <name>$breadcrumb</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="25" namespace="global" package="Default">
        <name>$message</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="SimpleTest\Extensions">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="27">
          <description>Records the test result as public members.</description>
          <long-description></long-description>
          <tag line="27" name="param" description="Test stack at the time of the event." type="array" variable="$breadcrumb">
            <type by_reference="false">array</type>
          </tag>
          <tag line="27" name="param" description="The messsage to the human." type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$breadcrumb</name>
          <default></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="43" package="SimpleTest\Extensions">
      <extends>\SimpleResult</extends>
      <name>SimpleResultOfPass</name>
      <full_name>\SimpleResultOfPass</full_name>
      <docblock line="38">
        <description>A single pass captured for later.</description>
        <long-description></long-description>
        <tag line="38" name="package" description="SimpleTest"/>
        <tag line="38" name="subpackage" description="Extensions"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="global" line="50" package="SimpleTest\Extensions">
      <extends>\SimpleResult</extends>
      <name>SimpleResultOfFail</name>
      <full_name>\SimpleResultOfFail</full_name>
      <docblock line="45">
        <description>A single failure captured for later.</description>
        <long-description></long-description>
        <tag line="45" name="package" description="SimpleTest"/>
        <tag line="45" name="subpackage" description="Extensions"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="global" line="57" package="SimpleTest\Extensions">
      <extends>\SimpleResult</extends>
      <name>SimpleResultOfException</name>
      <full_name>\SimpleResultOfException</full_name>
      <docblock line="52">
        <description>A single exception captured for later.</description>
        <long-description></long-description>
        <tag line="52" name="package" description="SimpleTest"/>
        <tag line="52" name="subpackage" description="Extensions"/>
      </docblock>
    </class>
    <class final="false" abstract="false" namespace="global" line="65" package="SimpleTest\Extensions">
      <extends>\SimpleReporterDecorator</extends>
      <name>Recorder</name>
      <full_name>\Recorder</full_name>
      <docblock line="59">
        <description>Array-based test recorder.</description>
        <long-description>&lt;p&gt;Returns an array
   with timestamp, status, test name and message for each pass and failure.&lt;/p&gt;</long-description>
        <tag line="59" name="package" description="SimpleTest"/>
        <tag line="59" name="subpackage" description="Extensions"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="66" namespace="global" package="Default">
        <name>$results</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="74" package="SimpleTest\Extensions">
        <name>paintPass</name>
        <full_name>paintPass</full_name>
        <docblock line="68">
          <description>Stashes the pass as a SimpleResultOfPass
   for later retrieval.</description>
          <long-description>&lt;p&gt;@param string $message    Pass message to be displayed
                            eventually.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="74">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="SimpleTest\Extensions">
        <name>paintFail</name>
        <full_name>paintFail</full_name>
        <docblock line="79">
          <description>Stashes the fail as a SimpleResultOfFail
	  for later retrieval.</description>
          <long-description>&lt;p&gt;@param string $message    Failure message to be displayed
                            eventually.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="85">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="96" package="SimpleTest\Extensions">
        <name>paintException</name>
        <full_name>paintException</full_name>
        <docblock line="90">
          <description>Stashes the exception as a SimpleResultOfException
	  for later retrieval.</description>
          <long-description>&lt;p&gt;@param string $message    Exception message to be displayed
                            eventually.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="96">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="23" code="50018">No DocBlock was found for property $time</error>
      <error line="24" code="50018">No DocBlock was found for property $breadcrumb</error>
      <error line="25" code="50018">No DocBlock was found for property $message</error>
      <error line="66" code="50018">No DocBlock was found for property $results</error>
      <error line="68" code="50015">Argument $message is missing from the Docblock of paintPass()</error>
      <error line="79" code="50015">Argument $message is missing from the Docblock of paintFail()</error>
      <error line="90" code="50015">Argument $message is missing from the Docblock of paintException()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/reflection_php4.php" hash="431d53ce9ecc0ca6d8ab5076ceb8a0be" package="Default">
    <docblock line="2">
      <description>base include file for SimpleTest</description>
      <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
      <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: reflection_php4.php 2011 2011-04-29 08:22:48Z pp11 $"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="15" package="Default">
      <extends/>
      <name>SimpleReflection</name>
      <full_name>\SimpleReflection</full_name>
      <docblock line="9">
        <description>Version specific reflection API.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="9" name="subpackage" description="UnitTester&#10; @ignore duplicate with reflection_php5.php"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="16" namespace="global" package="Default">
        <name>$_interface</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="Default">
        <name>SimpleReflection</name>
        <full_name>SimpleReflection</full_name>
        <docblock line="18">
          <description>Stashes the class/interface.</description>
          <long-description>&lt;p&gt;@param string $interface    Class or interface
                               to inspect.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="23">
          <name>$interface</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Default">
        <name>classExists</name>
        <full_name>classExists</full_name>
        <docblock line="27">
          <description>Checks that a class has been declared.</description>
          <long-description>&lt;p&gt;@return boolean        True if defined.&lt;/p&gt;</long-description>
          <tag line="27" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="42" package="Default">
        <name>classExistsSansAutoload</name>
        <full_name>classExistsSansAutoload</full_name>
        <docblock line="36">
          <description>Needed to kill the autoload feature in PHP5
   for classes created dynamically.</description>
          <long-description>&lt;p&gt;@return boolean        True if defined.&lt;/p&gt;</long-description>
          <tag line="36" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Default">
        <name>classOrInterfaceExists</name>
        <full_name>classOrInterfaceExists</full_name>
        <docblock line="46">
          <description>Checks that a class or interface has been
   declared.</description>
          <long-description>&lt;p&gt;@return boolean        True if defined.&lt;/p&gt;</long-description>
          <tag line="46" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="Default">
        <name>classOrInterfaceExistsSansAutoload</name>
        <full_name>classOrInterfaceExistsSansAutoload</full_name>
        <docblock line="56">
          <description>Needed to kill the autoload feature in PHP5
   for classes created dynamically.</description>
          <long-description>&lt;p&gt;@return boolean        True if defined.&lt;/p&gt;</long-description>
          <tag line="56" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="72" package="Default">
        <name>getMethods</name>
        <full_name>getMethods</full_name>
        <docblock line="66">
          <description>Gets the list of methods on a class or
   interface.</description>
          <long-description>&lt;p&gt;@returns array          List of method names.&lt;/p&gt;</long-description>
          <tag line="66" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="83" package="Default">
        <name>getInterfaces</name>
        <full_name>getInterfaces</full_name>
        <docblock line="76">
          <description>Gets the list of interfaces from a class.</description>
          <long-description>&lt;p&gt;If the
   class name is actually an interface then just that
   interface is returned.&lt;/p&gt;</long-description>
          <tag line="76" name="returns" description="array          List of interfaces.&#10;   @access public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="92" package="Default">
        <name>getParent</name>
        <full_name>getParent</full_name>
        <docblock line="87">
          <description>Finds the parent class name.</description>
          <long-description>&lt;p&gt;@returns string      Parent class name.&lt;/p&gt;</long-description>
          <tag line="87" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="102" package="Default">
        <name>isAbstract</name>
        <full_name>isAbstract</full_name>
        <docblock line="96">
          <description>Determines if the class is abstract, which for PHP 4
   will never be the case.</description>
          <long-description>&lt;p&gt;@returns boolean      True if abstract.&lt;/p&gt;</long-description>
          <tag line="96" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="Default">
        <name>isInterface</name>
        <full_name>isInterface</full_name>
        <docblock line="106">
          <description>Determines if the the entity is an interface, which for PHP 4
   will never be the case.</description>
          <long-description>&lt;p&gt;@returns boolean      True if interface.&lt;/p&gt;</long-description>
          <tag line="106" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="122" package="Default">
        <name>hasFinal</name>
        <full_name>hasFinal</full_name>
        <docblock line="116">
          <description>Scans for final methods, but as it's PHP 4 there
   aren't any.</description>
          <long-description>&lt;p&gt;@returns boolean   True if the class has a final method.&lt;/p&gt;</long-description>
          <tag line="116" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="Default">
        <name>getSignature</name>
        <full_name>getSignature</full_name>
        <docblock line="126">
          <description>Gets the source code matching the declaration
   of a method.</description>
          <long-description>&lt;p&gt;@param string $method       Method name.&lt;/p&gt;</long-description>
          <tag line="126" name="access" description="public"/>
        </docblock>
        <argument line="132">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <critical line="9" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="16" code="50018">No DocBlock was found for property $_interface</error>
      <error line="18" code="50015">Argument $interface is missing from the Docblock of SimpleReflection()</error>
      <error line="126" code="50015">Argument $method is missing from the Docblock of getSignature()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/reflection_php5.php" hash="82b294fc03459ddb03fffe000100e76c" package="Default">
    <docblock line="2">
      <description>base include file for SimpleTest</description>
      <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
      <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: reflection_php5.php 2011 2011-04-29 08:22:48Z pp11 $"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="Default">
      <extends/>
      <name>SimpleReflection</name>
      <full_name>\SimpleReflection</full_name>
      <docblock line="9">
        <description>Version specific reflection API.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="9" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="15" namespace="global" package="Default">
        <name>$interface</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="22" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="17">
          <description>Stashes the class/interface.</description>
          <long-description>&lt;p&gt;@param string $interface    Class or interface
                               to inspect.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="22">
          <name>$interface</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Default">
        <name>classExists</name>
        <full_name>classExists</full_name>
        <docblock line="26">
          <description>Checks that a class has been declared.</description>
          <long-description>&lt;p&gt;Versions
   before PHP5.0.2 need a check that it's not really
   an interface.&lt;/p&gt;</long-description>
          <tag line="26" name="return" description="True if defined.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Default">
        <name>classExistsSansAutoload</name>
        <full_name>classExistsSansAutoload</full_name>
        <docblock line="41">
          <description>Needed to kill the autoload feature in PHP5
   for classes created dynamically.</description>
          <long-description>&lt;p&gt;@return boolean        True if defined.&lt;/p&gt;</long-description>
          <tag line="41" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="57" package="Default">
        <name>classOrInterfaceExists</name>
        <full_name>classOrInterfaceExists</full_name>
        <docblock line="51">
          <description>Checks that a class or interface has been
   declared.</description>
          <long-description>&lt;p&gt;@return boolean            True if defined.&lt;/p&gt;</long-description>
          <tag line="51" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="67" package="Default">
        <name>classOrInterfaceExistsSansAutoload</name>
        <full_name>classOrInterfaceExistsSansAutoload</full_name>
        <docblock line="61">
          <description>Needed to kill the autoload feature in PHP5
   for classes created dynamically.</description>
          <long-description>&lt;p&gt;@return boolean        True if defined.&lt;/p&gt;</long-description>
          <tag line="61" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="79" package="Default">
        <name>classOrInterfaceExistsWithAutoload</name>
        <full_name>classOrInterfaceExistsWithAutoload</full_name>
        <docblock line="71">
          <description>Needed to select the autoload feature in PHP5
   for classes created dynamically.</description>
          <long-description>&lt;p&gt;@param string $interface       Class or interface name.&lt;/p&gt;</long-description>
          <tag line="71" name="param" description="True totriggerautoload. @return boolean True if interface defined. @access private" type="boolean" variable="$autoload">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$interface</name>
          <default></default>
          <type/>
        </argument>
        <argument line="79">
          <name>$autoload</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Default">
        <name>getMethods</name>
        <full_name>getMethods</full_name>
        <docblock line="88">
          <description>Gets the list of methods on a class or
   interface.</description>
          <long-description>&lt;p&gt;@returns array              List of method names.&lt;/p&gt;</long-description>
          <tag line="88" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="105" package="Default">
        <name>getInterfaces</name>
        <full_name>getInterfaces</full_name>
        <docblock line="98">
          <description>Gets the list of interfaces from a class.</description>
          <long-description>&lt;p&gt;If the
   class name is actually an interface then just that
   interface is returned.&lt;/p&gt;</long-description>
          <tag line="98" name="returns" description="array          List of interfaces.&#10;   @access public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="119" package="Default">
        <name>getInterfaceMethods</name>
        <full_name>getInterfaceMethods</full_name>
        <docblock line="113">
          <description>Gets the list of methods for the implemented
   interfaces only.</description>
          <long-description>&lt;p&gt;@returns array      List of enforced method signatures.&lt;/p&gt;</long-description>
          <tag line="113" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="134" package="Default">
        <name>isInterfaceMethod</name>
        <full_name>isInterfaceMethod</full_name>
        <docblock line="127">
          <description>Checks to see if the method signature has to be tightly
   specified.</description>
          <long-description>&lt;p&gt;@param string $method        Method name.&lt;/p&gt;</long-description>
          <tag line="127" name="returns" description="boolean             True if enforced.&#10;   @access private"/>
        </docblock>
        <argument line="134">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="143" package="Default">
        <name>getParent</name>
        <full_name>getParent</full_name>
        <docblock line="138">
          <description>Finds the parent class name.</description>
          <long-description>&lt;p&gt;@returns string      Parent class name.&lt;/p&gt;</long-description>
          <tag line="138" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="157" package="Default">
        <name>isAbstract</name>
        <full_name>isAbstract</full_name>
        <docblock line="152">
          <description>Trivially determines if the class is abstract.</description>
          <long-description>&lt;p&gt;@returns boolean      True if abstract.&lt;/p&gt;</long-description>
          <tag line="152" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="167" package="Default">
        <name>isInterface</name>
        <full_name>isInterface</full_name>
        <docblock line="162">
          <description>Trivially determines if the class is an interface.</description>
          <long-description>&lt;p&gt;@returns boolean      True if interface.&lt;/p&gt;</long-description>
          <tag line="162" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="178" package="Default">
        <name>hasFinal</name>
        <full_name>hasFinal</full_name>
        <docblock line="172">
          <description>Scans for final methods, as they screw up inherited
   mocks by not allowing you to override them.</description>
          <long-description>&lt;p&gt;@returns boolean   True if the class has a final method.&lt;/p&gt;</long-description>
          <tag line="172" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="196" package="Default">
        <name>onlyParents</name>
        <full_name>onlyParents</full_name>
        <docblock line="188">
          <description>Whittles a list of interfaces down to only the
   necessary top level parents.</description>
          <long-description>&lt;p&gt;@param array $interfaces     Reflection API interfaces
                                to reduce.&lt;/p&gt;</long-description>
          <tag line="188" name="returns" description="array               List of parent interface names.&#10;   @access private"/>
        </docblock>
        <argument line="196">
          <name>$interfaces</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="221" package="Default">
        <name>isAbstractMethod</name>
        <full_name>isAbstractMethod</full_name>
        <docblock line="215">
          <description>Checks whether a method is abstract or not.</description>
          <long-description></long-description>
          <tag line="215" name="param" description="Method name." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="215" name="return" description="true if method is abstract, else false" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="215" name="access" description="private"/>
        </docblock>
        <argument line="221">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="235" package="Default">
        <name>isConstructor</name>
        <full_name>isConstructor</full_name>
        <docblock line="229">
          <description>Checks whether a method is the constructor.</description>
          <long-description></long-description>
          <tag line="229" name="param" description="Method name." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="229" name="return" description="true if method is the constructor" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="229" name="access" description="private"/>
        </docblock>
        <argument line="235">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="245" package="Default">
        <name>isAbstractMethodInParents</name>
        <full_name>isAbstractMethodInParents</full_name>
        <docblock line="239">
          <description>Checks whether a method is abstract in all parents or not.</description>
          <long-description></long-description>
          <tag line="239" name="param" description="Method name." type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="239" name="return" description="true if method is abstract in parent, else false" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="239" name="access" description="private"/>
        </docblock>
        <argument line="245">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="266" package="Default">
        <name>isStaticMethod</name>
        <full_name>isStaticMethod</full_name>
        <docblock line="260">
          <description>Checks whether a method is static or not.</description>
          <long-description></long-description>
          <tag line="260" name="param" description="Method name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="260" name="return" description="true if method is static, else false" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="260" name="access" description="private"/>
        </docblock>
        <argument line="266">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="282" package="Default">
        <name>getSignature</name>
        <full_name>getSignature</full_name>
        <docblock line="274">
          <description>Writes the source code matching the declaration
   of a method.</description>
          <long-description>&lt;p&gt;@param string $name    Method name.&lt;/p&gt;</long-description>
          <tag line="274" name="return" description="Method signature up to last&#10;                          bracket.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="282">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="320" package="Default">
        <name>getFullSignature</name>
        <full_name>getFullSignature</full_name>
        <docblock line="312">
          <description>For a signature specified in an interface, full
   details must be replicated to be a valid implementation.</description>
          <long-description>&lt;p&gt;@param string $name    Method name.&lt;/p&gt;</long-description>
          <tag line="312" name="return" description="Method signature up to last&#10;                          bracket.&#10;   @access private" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="320">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="338" package="Default">
        <name>getParameterSignatures</name>
        <full_name>getParameterSignatures</full_name>
        <docblock line="330">
          <description>Gets the source code for each parameter.</description>
          <long-description>&lt;p&gt;@param ReflectionMethod $method   Method object from
                                     reflection API&lt;/p&gt;</long-description>
          <tag line="330" name="return" description="List of strings, each&#10;                                     a snippet of code.&#10;   @access private" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="338">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="368" package="Default">
        <name>suppressSpurious</name>
        <full_name>suppressSpurious</full_name>
        <docblock line="360">
          <description>The SPL library has problems with the
   Reflection library.</description>
          <long-description>&lt;p&gt;In particular, you can
   get extra characters in parameter names :(.&lt;/p&gt;</long-description>
          <tag line="360" name="param" description="Parameter name. @return string Cleaner name. @access private" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="368">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="379" package="Default">
        <name>isOptional</name>
        <full_name>isOptional</full_name>
        <docblock line="372">
          <description>Test of a reflection parameter being optional
   that works with early versions of PHP5.</description>
          <long-description>&lt;p&gt;@param reflectionParameter $parameter    Is this optional.&lt;/p&gt;</long-description>
          <tag line="372" name="return" description="True if optional.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="379">
          <name>$parameter</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <critical line="9" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="15" code="50018">No DocBlock was found for property $interface</error>
      <error line="17" code="50015">Argument $interface is missing from the Docblock of __construct()</error>
      <error line="71" code="50014">Name of argument $interface does not match with the DocBlock's name $autoload in classOrInterfaceExistsWithAutoload()</error>
      <error line="71" code="50015">Argument $autoload is missing from the Docblock of classOrInterfaceExistsWithAutoload()</error>
      <error line="127" code="50015">Argument $method is missing from the Docblock of isInterfaceMethod()</error>
      <error line="188" code="50015">Argument $interfaces is missing from the Docblock of onlyParents()</error>
      <error line="274" code="50015">Argument $name is missing from the Docblock of getSignature()</error>
      <error line="312" code="50015">Argument $name is missing from the Docblock of getFullSignature()</error>
      <error line="330" code="50015">Argument $method is missing from the Docblock of getParameterSignatures()</error>
      <error line="372" code="50015">Argument $parameter is missing from the Docblock of isOptional()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/remote.php" hash="5bbc96ae42672d67e9557c382370c24f" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: remote.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="22" package="Default">
      <extends/>
      <name>RemoteTestCase</name>
      <full_name>\RemoteTestCase</full_name>
      <docblock line="17">
        <description>Runs an XML formated test on a remote server.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="17" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="23" namespace="global" package="Default">
        <name>$url</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="24" namespace="global" package="Default">
        <name>$dry_url</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="25" namespace="global" package="Default">
        <name>$size</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="27">
          <description>Sets the location of the remote test.</description>
          <long-description>&lt;p&gt;@param string $url       Test location.&lt;/p&gt;</long-description>
          <tag line="27" name="param" description="Location for dry run. @access public" type="string" variable="$dry_url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="33">
          <name>$dry_url</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>getLabel</name>
        <full_name>getLabel</full_name>
        <docblock line="39">
          <description>Accessor for the test name for subclasses.</description>
          <long-description>&lt;p&gt;@return string           Name of the test.&lt;/p&gt;</long-description>
          <tag line="39" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="Default">
        <name>run</name>
        <full_name>run</full_name>
        <docblock line="48">
          <description>Runs the top level test for this class.</description>
          <long-description>&lt;p&gt;Currently
   reads the data as a single chunk. I'll fix this
   once I have added iteration to the browser.&lt;/p&gt;</long-description>
          <tag line="48" name="param" description="Target of test results. @returns boolean True if no failures. @access public" type="\SimpleReporter" variable="$reporter">
            <type by_reference="false">\SimpleReporter</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$reporter</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="77" package="Default">
        <name>createBrowser</name>
        <full_name>createBrowser</full_name>
        <docblock line="71">
          <description>Creates a new web browser object for fetching
   the XML report.</description>
          <long-description>&lt;p&gt;@return SimpleBrowser           New browser.&lt;/p&gt;</long-description>
          <tag line="71" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="87" package="Default">
        <name>createParser</name>
        <full_name>createParser</full_name>
        <docblock line="81">
          <description>Creates the XML parser.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $reporter    Target of test results.&lt;/p&gt;</long-description>
          <tag line="81" name="return" description="XML reader.&#10;   @access protected" type="\SimpleTestXmlListener">
            <type by_reference="false">\SimpleTestXmlListener</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$reporter</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="96" package="Default">
        <name>getSize</name>
        <full_name>getSize</full_name>
        <docblock line="91">
          <description>Accessor for the number of subtests.</description>
          <long-description>&lt;p&gt;@return integer           Number of test cases.&lt;/p&gt;</long-description>
          <tag line="91" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/remote.php</error>
      <critical line="17" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="23" code="50018">No DocBlock was found for property $url</error>
      <error line="24" code="50018">No DocBlock was found for property $dry_url</error>
      <error line="25" code="50018">No DocBlock was found for property $size</error>
      <error line="27" code="50014">Name of argument $url does not match with the DocBlock's name $dry_url in __construct()</error>
      <error line="27" code="50015">Argument $dry_url is missing from the Docblock of __construct()</error>
      <error line="81" code="50015">Argument $reporter is missing from the Docblock of createParser()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/reporter.php" hash="58b796a965624f3d0a21e6927449bf03" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: reporter.php 2005 2010-11-02 14:09:34Z lastcraft $"/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="22" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends>\SimpleReporter</extends>
      <name>HtmlReporter</name>
      <full_name>\HtmlReporter</full_name>
      <docblock line="16">
        <description>Sample minimal test displayer.</description>
        <long-description>&lt;p&gt;Generates only
   failure messages and a pass count.&lt;/p&gt;</long-description>
        <tag line="16" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="23" namespace="global" package="Default">
        <name>$character_set</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="25">
          <description>Does nothing yet.</description>
          <long-description>&lt;p&gt;The first output will
   be sent on the first test start. For use
   by a web browser.&lt;/p&gt;</long-description>
          <tag line="25" name="access" description="public"/>
        </docblock>
        <argument line="31">
          <name>$character_set</name>
          <default>'ISO-8859-1'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="42" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintHeader</name>
        <full_name>paintHeader</full_name>
        <docblock line="36">
          <description>Paints the top of the web page setting the
   title to the name of the starting test.</description>
          <long-description>&lt;p&gt;@param string $test_name      Name class of test.&lt;/p&gt;</long-description>
          <tag line="36" name="access" description="public"/>
        </docblock>
        <argument line="42">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="62" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>sendNoCacheHeaders</name>
        <full_name>sendNoCacheHeaders</full_name>
        <docblock line="56">
          <description>Send the headers necessary to ensure the page is
   reloaded on every request.</description>
          <long-description>&lt;p&gt;Otherwise you could be
   scratching your head over out of date test data.&lt;/p&gt;</long-description>
          <tag line="56" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="77" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getCss</name>
        <full_name>getCss</full_name>
        <docblock line="72">
          <description>Paints the CSS.</description>
          <long-description>&lt;p&gt;Add additional styles here.&lt;/p&gt;</long-description>
          <tag line="72" name="return" description="CSS code as text.&#10;   @access protected" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="89" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintFooter</name>
        <full_name>paintFooter</full_name>
        <docblock line="83">
          <description>Paints the end of the test with a summary of
   the passes and failures.</description>
          <long-description>&lt;p&gt;@param string $test_name        Name class of test.&lt;/p&gt;</long-description>
          <tag line="83" name="access" description="public"/>
        </docblock>
        <argument line="89">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="110" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintFail</name>
        <full_name>paintFail</full_name>
        <docblock line="103">
          <description>Paints the test failure with a breadcrumbs
   trail of the nesting test suites below the
   top level test.</description>
          <long-description>&lt;p&gt;@param string $message    Failure message displayed in
                             the context of the other tests.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="110">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="124" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintError</name>
        <full_name>paintError</full_name>
        <docblock line="119">
          <description>Paints a PHP error.</description>
          <long-description>&lt;p&gt;@param string $message        Message is ignored.&lt;/p&gt;</long-description>
          <tag line="119" name="access" description="public"/>
        </docblock>
        <argument line="124">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="138" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintException</name>
        <full_name>paintException</full_name>
        <docblock line="133">
          <description>Paints a PHP exception.</description>
          <long-description>&lt;p&gt;@param Exception $exception        Exception to display.&lt;/p&gt;</long-description>
          <tag line="133" name="access" description="public"/>
        </docblock>
        <argument line="138">
          <name>$exception</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="156" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintSkip</name>
        <full_name>paintSkip</full_name>
        <docblock line="151">
          <description>Prints the message for skipping tests.</description>
          <long-description>&lt;p&gt;@param string $message    Text of skip condition.&lt;/p&gt;</long-description>
          <tag line="151" name="access" description="public"/>
        </docblock>
        <argument line="156">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="170" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintFormattedMessage</name>
        <full_name>paintFormattedMessage</full_name>
        <docblock line="165">
          <description>Paints formatted text such as dumped privateiables.</description>
          <long-description>&lt;p&gt;@param string $message        Text to show.&lt;/p&gt;</long-description>
          <tag line="165" name="access" description="public"/>
        </docblock>
        <argument line="170">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="180" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>htmlEntities</name>
        <full_name>htmlEntities</full_name>
        <docblock line="174">
          <description>Character set adjusted entity conversion.</description>
          <long-description>&lt;p&gt;@param string $message    Plain text or Unicode message.&lt;/p&gt;</long-description>
          <tag line="174" name="return" description="Browser readable message.&#10;   @access protected" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="194" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends>\SimpleReporter</extends>
      <name>TextReporter</name>
      <full_name>\TextReporter</full_name>
      <docblock line="185">
        <description>Sample minimal test displayer.</description>
        <long-description>&lt;p&gt;Generates only
   failure messages and a pass count. For command
   line use. I've tried to make it look like JUnit,
   but I wanted to output the errors as they arrived
   which meant dropping the dots.&lt;/p&gt;</long-description>
        <tag line="185" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="200" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="196">
          <description>Does nothing yet.</description>
          <long-description>&lt;p&gt;The first output will
   be sent on the first test start.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="209" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintHeader</name>
        <full_name>paintHeader</full_name>
        <docblock line="204">
          <description>Paints the title only.</description>
          <long-description>&lt;p&gt;@param string $test_name        Name class of test.&lt;/p&gt;</long-description>
          <tag line="204" name="access" description="public"/>
        </docblock>
        <argument line="209">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="223" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintFooter</name>
        <full_name>paintFooter</full_name>
        <docblock line="217">
          <description>Paints the end of the test with a summary of
   the passes and failures.</description>
          <long-description>&lt;p&gt;@param string $test_name        Name class of test.&lt;/p&gt;</long-description>
          <tag line="217" name="access" description="public"/>
        </docblock>
        <argument line="223">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="242" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintFail</name>
        <full_name>paintFail</full_name>
        <docblock line="236">
          <description>Paints the test failure as a stack trace.</description>
          <long-description>&lt;p&gt;@param string $message    Failure message displayed in
                             the context of the other tests.&lt;/p&gt;</long-description>
          <tag line="236" name="access" description="public"/>
        </docblock>
        <argument line="242">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="290" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintSkip</name>
        <full_name>paintSkip</full_name>
        <docblock line="285">
          <description>Prints the message for skipping tests.</description>
          <long-description>&lt;p&gt;@param string $message    Text of skip condition.&lt;/p&gt;</long-description>
          <tag line="285" name="access" description="public"/>
        </docblock>
        <argument line="290">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="300" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintFormattedMessage</name>
        <full_name>paintFormattedMessage</full_name>
        <docblock line="295">
          <description>Paints formatted text such as dumped privateiables.</description>
          <long-description>&lt;p&gt;@param string $message        Text to show.&lt;/p&gt;</long-description>
          <tag line="295" name="access" description="public"/>
        </docblock>
        <argument line="300">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="312" package="Default">
      <extends>\SimpleReporterDecorator</extends>
      <name>SelectiveReporter</name>
      <full_name>\SelectiveReporter</full_name>
      <docblock line="306">
        <description>Runs just a single test group, a single case or
   even a single test within that case.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="306" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="313" namespace="global" package="Default">
        <name>$just_this_case</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="314" namespace="global" package="Default">
        <name>$just_this_test</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="315" namespace="global" package="Default">
        <name>$on</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="324" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="317">
          <description>Selects the test case or group to be run,
   and optionally a specific test.</description>
          <long-description>&lt;p&gt;@param SimpleScorer $reporter    Reporter to receive events.&lt;/p&gt;</long-description>
          <tag line="317" name="param" description="Only this case or group will run. @param string $just_this_test Only this test method will run." type="string" variable="$just_this_case">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="324">
          <name>$reporter</name>
          <default></default>
          <type/>
        </argument>
        <argument line="324">
          <name>$just_this_case</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="324">
          <name>$just_this_test</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="343" package="Default">
        <name>matchesTestCase</name>
        <full_name>matchesTestCase</full_name>
        <docblock line="337">
          <description>Compares criteria to actual the case/group name.</description>
          <long-description>&lt;p&gt;@param string $test_case    The incoming test.&lt;/p&gt;</long-description>
          <tag line="337" name="return" description="True if matched.&#10;   @access protected" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="343">
          <name>$test_case</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="355" package="Default">
        <name>shouldRunTest</name>
        <full_name>shouldRunTest</full_name>
        <docblock line="347">
          <description>Compares criteria to actual the test name.</description>
          <long-description>&lt;p&gt;If no
   name was specified at the beginning, then all tests
   can run.&lt;/p&gt;</long-description>
          <tag line="347" name="param" description="The incoming test method. @return boolean True if matched. @access protected" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="355">
          <name>$test_case</name>
          <default></default>
          <type/>
        </argument>
        <argument line="355">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="370" package="Default">
        <name>on</name>
        <full_name>on</full_name>
        <docblock line="366">
          <description>Switch on testing for the group or subgroup.</description>
          <long-description>&lt;p&gt;@access private&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="378" package="Default">
        <name>off</name>
        <full_name>off</full_name>
        <docblock line="374">
          <description>Switch off testing for the group or subgroup.</description>
          <long-description>&lt;p&gt;@access private&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="387" package="Default">
        <name>isOn</name>
        <full_name>isOn</full_name>
        <docblock line="382">
          <description>Is this group actually being tested?</description>
          <long-description>&lt;p&gt;@return boolean     True if the current test group is active.&lt;/p&gt;</long-description>
          <tag line="382" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="398" package="Default">
        <name>shouldInvoke</name>
        <full_name>shouldInvoke</full_name>
        <docblock line="391">
          <description>Veto everything that doesn't match the method wanted.</description>
          <long-description>&lt;p&gt;@param string $test_case       Name of test case.&lt;/p&gt;</long-description>
          <tag line="391" name="param" description="Name of test method. @return boolean True if test should be run. @access public" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="398">
          <name>$test_case</name>
          <default></default>
          <type/>
        </argument>
        <argument line="398">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="411" package="Default">
        <name>paintGroupStart</name>
        <full_name>paintGroupStart</full_name>
        <docblock line="405">
          <description>Paints the start of a group test.</description>
          <long-description>&lt;p&gt;@param string $test_case     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="405" name="param" description="Number of test cases starting. @access public" type="integer" variable="$size">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="411">
          <name>$test_case</name>
          <default></default>
          <type/>
        </argument>
        <argument line="411">
          <name>$size</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="423" package="Default">
        <name>paintGroupEnd</name>
        <full_name>paintGroupEnd</full_name>
        <docblock line="418">
          <description>Paints the end of a group test.</description>
          <long-description>&lt;p&gt;@param string $test_case     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="418" name="access" description="public"/>
        </docblock>
        <argument line="423">
          <name>$test_case</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="436" package="Default">
      <extends>\SimpleReporterDecorator</extends>
      <name>NoSkipsReporter</name>
      <full_name>\NoSkipsReporter</full_name>
      <docblock line="431">
        <description>Suppresses skip messages.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="431" name="subpackage" description="UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="443" package="Default">
        <name>paintSkip</name>
        <full_name>paintSkip</full_name>
        <docblock line="438">
          <description>Does nothing.</description>
          <long-description>&lt;p&gt;@param string $message    Text of skip condition.&lt;/p&gt;</long-description>
          <tag line="438" name="access" description="public"/>
        </docblock>
        <argument line="443">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/reporter.php</error>
      <error line="23" code="50018">No DocBlock was found for property $character_set</error>
      <error line="25" code="50015">Argument $character_set is missing from the Docblock of __construct()</error>
      <error line="36" code="50015">Argument $test_name is missing from the Docblock of paintHeader()</error>
      <error line="83" code="50015">Argument $test_name is missing from the Docblock of paintFooter()</error>
      <error line="103" code="50015">Argument $message is missing from the Docblock of paintFail()</error>
      <error line="119" code="50015">Argument $message is missing from the Docblock of paintError()</error>
      <error line="133" code="50015">Argument $exception is missing from the Docblock of paintException()</error>
      <error line="151" code="50015">Argument $message is missing from the Docblock of paintSkip()</error>
      <error line="165" code="50015">Argument $message is missing from the Docblock of paintFormattedMessage()</error>
      <error line="174" code="50015">Argument $message is missing from the Docblock of htmlEntities()</error>
      <error line="204" code="50015">Argument $test_name is missing from the Docblock of paintHeader()</error>
      <error line="217" code="50015">Argument $test_name is missing from the Docblock of paintFooter()</error>
      <error line="236" code="50015">Argument $message is missing from the Docblock of paintFail()</error>
      <error line="251" code="50015">Argument $message is missing from the Docblock of paintError()</error>
      <error line="266" code="50015">Argument $exception is missing from the Docblock of paintException()</error>
      <error line="285" code="50015">Argument $message is missing from the Docblock of paintSkip()</error>
      <error line="295" code="50015">Argument $message is missing from the Docblock of paintFormattedMessage()</error>
      <critical line="306" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="313" code="50018">No DocBlock was found for property $just_this_case</error>
      <error line="314" code="50018">No DocBlock was found for property $just_this_test</error>
      <error line="315" code="50018">No DocBlock was found for property $on</error>
      <error line="317" code="50014">Name of argument $reporter does not match with the DocBlock's name $just_this_case in __construct()</error>
      <error line="317" code="50015">Argument $just_this_case is missing from the Docblock of __construct()</error>
      <error line="317" code="50015">Argument $just_this_test is missing from the Docblock of __construct()</error>
      <error line="337" code="50015">Argument $test_case is missing from the Docblock of matchesTestCase()</error>
      <error line="347" code="50014">Name of argument $test_case does not match with the DocBlock's name $method in shouldRunTest()</error>
      <error line="347" code="50015">Argument $method is missing from the Docblock of shouldRunTest()</error>
      <error line="391" code="50014">Name of argument $test_case does not match with the DocBlock's name $method in shouldInvoke()</error>
      <error line="391" code="50015">Argument $method is missing from the Docblock of shouldInvoke()</error>
      <error line="405" code="50014">Name of argument $test_case does not match with the DocBlock's name $size in paintGroupStart()</error>
      <error line="405" code="50015">Argument $size is missing from the Docblock of paintGroupStart()</error>
      <error line="418" code="50015">Argument $test_case is missing from the Docblock of paintGroupEnd()</error>
      <critical line="431" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="438" code="50015">Argument $message is missing from the Docblock of paintSkip()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/scorer.php" hash="78f754bdaf75b3cd1072dbe9787a0668" package="Default">
    <include line="10" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: scorer.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="21" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
      <extends/>
      <name>SimpleScorer</name>
      <full_name>\SimpleScorer</full_name>
      <docblock line="13">
        <description>Can receive test events and display them.</description>
        <long-description>&lt;p&gt;Display
   is achieved by making display methods available
   and visiting the incoming event.&lt;/p&gt;</long-description>
        <tag line="13" name="package" description="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$passes</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="23" namespace="global" package="Default">
        <name>$fails</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="24" namespace="global" package="Default">
        <name>$exceptions</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="25" namespace="global" package="Default">
        <name>$is_dry_run</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="27">
          <description>Starts the test run with no results.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>makeDry</name>
        <full_name>makeDry</full_name>
        <docblock line="38">
          <description>Signals that the next evaluation will be a dry
   run.</description>
          <long-description>&lt;p&gt;That is, the structure events will be
   recorded, but no tests will be run.&lt;/p&gt;</long-description>
          <tag line="38" name="param" description="Dry run if true. @access public" type="boolean" variable="$is_dry">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$is_dry</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="55" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>shouldInvoke</name>
        <full_name>shouldInvoke</full_name>
        <docblock line="49">
          <description>The reporter has a veto on what should be run.</description>
          <long-description>&lt;p&gt;@param string $test_case_name  name of test case.&lt;/p&gt;</long-description>
          <tag line="49" name="param" description="Name of test method. @access public" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$test_case_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>createInvoker</name>
        <full_name>createInvoker</full_name>
        <docblock line="59">
          <description>Can wrap the invoker in preperation for running
   a test.</description>
          <long-description>&lt;p&gt;@param SimpleInvoker $invoker   Individual test runner.&lt;/p&gt;</long-description>
          <tag line="59" name="return" description="Wrapped test runner.&#10;   @access public" type="\SimpleInvoker">
            <type by_reference="false">\SimpleInvoker</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$invoker</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="77" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>getStatus</name>
        <full_name>getStatus</full_name>
        <docblock line="70">
          <description>Accessor for current status.</description>
          <long-description>&lt;p&gt;Will be false
   if there have been any failures or exceptions.
   Used for command line tools.&lt;/p&gt;</long-description>
          <tag line="70" name="return" description="True if no failures.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="90" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintGroupStart</name>
        <full_name>paintGroupStart</full_name>
        <docblock line="84">
          <description>Paints the start of a group test.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="84" name="param" description="Number of test cases starting. @access public" type="integer" variable="$size">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="90">
          <name>$size</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="98" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintGroupEnd</name>
        <full_name>paintGroupEnd</full_name>
        <docblock line="93">
          <description>Paints the end of a group test.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="93" name="access" description="public"/>
        </docblock>
        <argument line="98">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintCaseStart</name>
        <full_name>paintCaseStart</full_name>
        <docblock line="101">
          <description>Paints the start of a test case.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="101" name="access" description="public"/>
        </docblock>
        <argument line="106">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintCaseEnd</name>
        <full_name>paintCaseEnd</full_name>
        <docblock line="109">
          <description>Paints the end of a test case.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="109" name="access" description="public"/>
        </docblock>
        <argument line="114">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="122" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintMethodStart</name>
        <full_name>paintMethodStart</full_name>
        <docblock line="117">
          <description>Paints the start of a test method.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="117" name="access" description="public"/>
        </docblock>
        <argument line="122">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="130" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintMethodEnd</name>
        <full_name>paintMethodEnd</full_name>
        <docblock line="125">
          <description>Paints the end of a test method.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="125" name="access" description="public"/>
        </docblock>
        <argument line="130">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="138" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintPass</name>
        <full_name>paintPass</full_name>
        <docblock line="133">
          <description>Increments the pass count.</description>
          <long-description>&lt;p&gt;@param string $message        Message is ignored.&lt;/p&gt;</long-description>
          <tag line="133" name="access" description="public"/>
        </docblock>
        <argument line="138">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="147" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintFail</name>
        <full_name>paintFail</full_name>
        <docblock line="142">
          <description>Increments the fail count.</description>
          <long-description>&lt;p&gt;@param string $message        Message is ignored.&lt;/p&gt;</long-description>
          <tag line="142" name="access" description="public"/>
        </docblock>
        <argument line="147">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="157" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintError</name>
        <full_name>paintError</full_name>
        <docblock line="151">
          <description>Deals with PHP 4 throwing an error.</description>
          <long-description>&lt;p&gt;@param string $message    Text of error formatted by
                             the test case.&lt;/p&gt;</long-description>
          <tag line="151" name="access" description="public"/>
        </docblock>
        <argument line="157">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="166" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintException</name>
        <full_name>paintException</full_name>
        <docblock line="161">
          <description>Deals with PHP 5 throwing an exception.</description>
          <long-description>&lt;p&gt;@param Exception $exception    The actual exception thrown.&lt;/p&gt;</long-description>
          <tag line="161" name="access" description="public"/>
        </docblock>
        <argument line="166">
          <name>$exception</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="175" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintSkip</name>
        <full_name>paintSkip</full_name>
        <docblock line="170">
          <description>Prints the message for skipping tests.</description>
          <long-description>&lt;p&gt;@param string $message    Text of skip condition.&lt;/p&gt;</long-description>
          <tag line="170" name="access" description="public"/>
        </docblock>
        <argument line="175">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="183" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>getPassCount</name>
        <full_name>getPassCount</full_name>
        <docblock line="178">
          <description>Accessor for the number of passes so far.</description>
          <long-description>&lt;p&gt;@return integer       Number of passes.&lt;/p&gt;</long-description>
          <tag line="178" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="192" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>getFailCount</name>
        <full_name>getFailCount</full_name>
        <docblock line="187">
          <description>Accessor for the number of fails so far.</description>
          <long-description>&lt;p&gt;@return integer       Number of fails.&lt;/p&gt;</long-description>
          <tag line="187" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="202" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>getExceptionCount</name>
        <full_name>getExceptionCount</full_name>
        <docblock line="196">
          <description>Accessor for the number of untrapped errors
   so far.</description>
          <long-description>&lt;p&gt;@return integer       Number of exceptions.&lt;/p&gt;</long-description>
          <tag line="196" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="211" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintMessage</name>
        <full_name>paintMessage</full_name>
        <docblock line="206">
          <description>Paints a simple supplementary message.</description>
          <long-description>&lt;p&gt;@param string $message        Text to display.&lt;/p&gt;</long-description>
          <tag line="206" name="access" description="public"/>
        </docblock>
        <argument line="211">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="220" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintFormattedMessage</name>
        <full_name>paintFormattedMessage</full_name>
        <docblock line="214">
          <description>Paints a formatted ASCII message such as a
   privateiable dump.</description>
          <long-description>&lt;p&gt;@param string $message        Text to display.&lt;/p&gt;</long-description>
          <tag line="214" name="access" description="public"/>
        </docblock>
        <argument line="220">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="229" package="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract">
        <name>paintSignal</name>
        <full_name>paintSignal</full_name>
        <docblock line="223">
          <description>By default just ignores user generated events.</description>
          <long-description>&lt;p&gt;@param string $type        Event type as text.&lt;/p&gt;</long-description>
          <tag line="223" name="param" description="Message or object. @access public" type="mixed" variable="$payload">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="229">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="229">
          <name>$payload</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="241" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends>\SimpleScorer</extends>
      <name>SimpleReporter</name>
      <full_name>\SimpleReporter</full_name>
      <docblock line="233">
        <description>Recipient of generated test messages that can display
   page footers and headers.</description>
        <long-description>&lt;p&gt;Also keeps track of the
   test nesting. This is the main base class on which
   to build the finished test (page based) displays.&lt;/p&gt;</long-description>
        <tag line="233" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="242" namespace="global" package="Default">
        <name>$test_stack</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="243" namespace="global" package="Default">
        <name>$size</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="244" namespace="global" package="Default">
        <name>$progress</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="250" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="246">
          <description>Starts the display with no results in.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="262" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getDumper</name>
        <full_name>getDumper</full_name>
        <docblock line="257">
          <description>Gets the formatter for small generic data items.</description>
          <long-description>&lt;p&gt;@return SimpleDumper          Formatter.&lt;/p&gt;</long-description>
          <tag line="257" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="275" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintGroupStart</name>
        <full_name>paintGroupStart</full_name>
        <docblock line="266">
          <description>Paints the start of a group test.</description>
          <long-description>&lt;p&gt;Will also paint
   the page header and footer if this is the
   first test. Will stash the size if the first
   start.&lt;/p&gt;</long-description>
          <tag line="266" name="param" description="Name of test that is starting. @param integer $size Number of test cases starting. @access public" type="string" variable="$test_name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="275">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="275">
          <name>$size</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="292" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintGroupEnd</name>
        <full_name>paintGroupEnd</full_name>
        <docblock line="285">
          <description>Paints the end of a group test.</description>
          <long-description>&lt;p&gt;Will paint the page
   footer if the stack of tests has unwound.&lt;/p&gt;</long-description>
          <tag line="285" name="param" description="Name of test that is ending. @param integer $progress Number of test cases ending. @access public" type="string" variable="$test_name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="292">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="307" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintCaseStart</name>
        <full_name>paintCaseStart</full_name>
        <docblock line="299">
          <description>Paints the start of a test case.</description>
          <long-description>&lt;p&gt;Will also paint
   the page header and footer if this is the
   first test. Will stash the size if the first
   start.&lt;/p&gt;</long-description>
          <tag line="299" name="param" description="Name of test that is starting. @access public" type="string" variable="$test_name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="307">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="323" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintCaseEnd</name>
        <full_name>paintCaseEnd</full_name>
        <docblock line="317">
          <description>Paints the end of a test case.</description>
          <long-description>&lt;p&gt;Will paint the page
   footer if the stack of tests has unwound.&lt;/p&gt;</long-description>
          <tag line="317" name="param" description="Name of test that is ending. @access public" type="string" variable="$test_name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="323">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="336" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintMethodStart</name>
        <full_name>paintMethodStart</full_name>
        <docblock line="331">
          <description>Paints the start of a test method.</description>
          <long-description>&lt;p&gt;@param string $test_name   Name of test that is starting.&lt;/p&gt;</long-description>
          <tag line="331" name="access" description="public"/>
        </docblock>
        <argument line="336">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="346" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintMethodEnd</name>
        <full_name>paintMethodEnd</full_name>
        <docblock line="340">
          <description>Paints the end of a test method.</description>
          <long-description>&lt;p&gt;Will paint the page
   footer if the stack of tests has unwound.&lt;/p&gt;</long-description>
          <tag line="340" name="param" description="Name of test that is ending. @access public" type="string" variable="$test_name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="346">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="376" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getTestList</name>
        <full_name>getTestList</full_name>
        <docblock line="369">
          <description>Accessor for internal test stack.</description>
          <long-description>&lt;p&gt;For
   subclasses that need to see the whole test
   history for display purposes.&lt;/p&gt;</long-description>
          <tag line="369" name="return" description="List of methods in nesting order.&#10;   @access public" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="387" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getTestCaseCount</name>
        <full_name>getTestCaseCount</full_name>
        <docblock line="380">
          <description>Accessor for total test size in number
   of test cases.</description>
          <long-description>&lt;p&gt;Null until the first
   test is started.&lt;/p&gt;</long-description>
          <tag line="380" name="return" description="Total number of cases at start.&#10;   @access public" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="397" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getTestCaseProgress</name>
        <full_name>getTestCaseProgress</full_name>
        <docblock line="391">
          <description>Accessor for the number of test cases
   completed so far.</description>
          <long-description>&lt;p&gt;@return integer   Number of ended cases.&lt;/p&gt;</long-description>
          <tag line="391" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="406" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>inCli</name>
        <full_name>inCli</full_name>
        <docblock line="401">
          <description>Static check for running in the comand line.</description>
          <long-description>&lt;p&gt;@return boolean        True if CLI.&lt;/p&gt;</long-description>
          <tag line="401" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="416" package="Default">
      <extends/>
      <name>SimpleReporterDecorator</name>
      <full_name>\SimpleReporterDecorator</full_name>
      <docblock line="411">
        <description>For modifying the behaviour of the visual reporters.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="411" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="417" namespace="global" package="Default">
        <name>$reporter</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="423" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="419">
          <description>Mediates between the reporter and the test case.</description>
          <long-description>&lt;p&gt;@param SimpleScorer $reporter       Reporter to receive events.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="423">
          <name>$reporter</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="434" package="Default">
        <name>makeDry</name>
        <full_name>makeDry</full_name>
        <docblock line="427">
          <description>Signals that the next evaluation will be a dry
   run.</description>
          <long-description>&lt;p&gt;That is, the structure events will be
   recorded, but no tests will be run.&lt;/p&gt;</long-description>
          <tag line="427" name="param" description="Dry run if true. @access public" type="boolean" variable="$is_dry">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="434">
          <name>$is_dry</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="445" package="Default">
        <name>getStatus</name>
        <full_name>getStatus</full_name>
        <docblock line="438">
          <description>Accessor for current status.</description>
          <long-description>&lt;p&gt;Will be false
   if there have been any failures or exceptions.
   Used for command line tools.&lt;/p&gt;</long-description>
          <tag line="438" name="return" description="True if no failures.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="455" package="Default">
        <name>getTestList</name>
        <full_name>getTestList</full_name>
        <docblock line="449">
          <description>The nesting of the test cases so far.</description>
          <long-description>&lt;p&gt;Not
   all reporters have this facility.&lt;/p&gt;</long-description>
          <tag line="449" name="return" description="Test list if accessible.&#10;   @access public" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="470" package="Default">
        <name>shouldInvoke</name>
        <full_name>shouldInvoke</full_name>
        <docblock line="463">
          <description>The reporter has a veto on what should be run.</description>
          <long-description>&lt;p&gt;@param string $test_case_name  Name of test case.&lt;/p&gt;</long-description>
          <tag line="463" name="param" description="Name of test method. @return boolean True if test should be run. @access public" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="470">
          <name>$test_case_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="470">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="481" package="Default">
        <name>createInvoker</name>
        <full_name>createInvoker</full_name>
        <docblock line="474">
          <description>Can wrap the invoker in preparation for running
   a test.</description>
          <long-description>&lt;p&gt;@param SimpleInvoker $invoker   Individual test runner.&lt;/p&gt;</long-description>
          <tag line="474" name="return" description="Wrapped test runner.&#10;   @access public" type="\SimpleInvoker">
            <type by_reference="false">\SimpleInvoker</type>
          </tag>
        </docblock>
        <argument line="481">
          <name>$invoker</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="491" package="Default">
        <name>getDumper</name>
        <full_name>getDumper</full_name>
        <docblock line="485">
          <description>Gets the formatter for privateiables and other small
   generic data items.</description>
          <long-description>&lt;p&gt;@return SimpleDumper          Formatter.&lt;/p&gt;</long-description>
          <tag line="485" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="501" package="Default">
        <name>paintGroupStart</name>
        <full_name>paintGroupStart</full_name>
        <docblock line="495">
          <description>Paints the start of a group test.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="495" name="param" description="Number of test cases starting. @access public" type="integer" variable="$size">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="501">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="501">
          <name>$size</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="510" package="Default">
        <name>paintGroupEnd</name>
        <full_name>paintGroupEnd</full_name>
        <docblock line="505">
          <description>Paints the end of a group test.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="505" name="access" description="public"/>
        </docblock>
        <argument line="510">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="519" package="Default">
        <name>paintCaseStart</name>
        <full_name>paintCaseStart</full_name>
        <docblock line="514">
          <description>Paints the start of a test case.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="514" name="access" description="public"/>
        </docblock>
        <argument line="519">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="528" package="Default">
        <name>paintCaseEnd</name>
        <full_name>paintCaseEnd</full_name>
        <docblock line="523">
          <description>Paints the end of a test case.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="523" name="access" description="public"/>
        </docblock>
        <argument line="528">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="537" package="Default">
        <name>paintMethodStart</name>
        <full_name>paintMethodStart</full_name>
        <docblock line="532">
          <description>Paints the start of a test method.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="532" name="access" description="public"/>
        </docblock>
        <argument line="537">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="546" package="Default">
        <name>paintMethodEnd</name>
        <full_name>paintMethodEnd</full_name>
        <docblock line="541">
          <description>Paints the end of a test method.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="541" name="access" description="public"/>
        </docblock>
        <argument line="546">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="555" package="Default">
        <name>paintPass</name>
        <full_name>paintPass</full_name>
        <docblock line="550">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $message        Message is ignored.&lt;/p&gt;</long-description>
          <tag line="550" name="access" description="public"/>
        </docblock>
        <argument line="555">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="564" package="Default">
        <name>paintFail</name>
        <full_name>paintFail</full_name>
        <docblock line="559">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $message        Message is ignored.&lt;/p&gt;</long-description>
          <tag line="559" name="access" description="public"/>
        </docblock>
        <argument line="564">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="574" package="Default">
        <name>paintError</name>
        <full_name>paintError</full_name>
        <docblock line="568">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $message    Text of error formatted by
                             the test case.&lt;/p&gt;</long-description>
          <tag line="568" name="access" description="public"/>
        </docblock>
        <argument line="574">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="583" package="Default">
        <name>paintException</name>
        <full_name>paintException</full_name>
        <docblock line="578">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param Exception $exception        Exception to show.&lt;/p&gt;</long-description>
          <tag line="578" name="access" description="public"/>
        </docblock>
        <argument line="583">
          <name>$exception</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="592" package="Default">
        <name>paintSkip</name>
        <full_name>paintSkip</full_name>
        <docblock line="587">
          <description>Prints the message for skipping tests.</description>
          <long-description>&lt;p&gt;@param string $message    Text of skip condition.&lt;/p&gt;</long-description>
          <tag line="587" name="access" description="public"/>
        </docblock>
        <argument line="592">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="601" package="Default">
        <name>paintMessage</name>
        <full_name>paintMessage</full_name>
        <docblock line="596">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $message        Text to display.&lt;/p&gt;</long-description>
          <tag line="596" name="access" description="public"/>
        </docblock>
        <argument line="601">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="610" package="Default">
        <name>paintFormattedMessage</name>
        <full_name>paintFormattedMessage</full_name>
        <docblock line="605">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $message        Text to display.&lt;/p&gt;</long-description>
          <tag line="605" name="access" description="public"/>
        </docblock>
        <argument line="610">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="623" package="Default">
        <name>paintSignal</name>
        <full_name>paintSignal</full_name>
        <docblock line="614">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $type        Event type as text.&lt;/p&gt;</long-description>
          <tag line="614" name="param" description="Message or object. @return boolean Should return false if this type of signal should fail the test suite. @access public" type="mixed" variable="$payload">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="623">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="623">
          <name>$payload</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="634" package="Default">
      <extends/>
      <name>MultipleReporter</name>
      <full_name>\MultipleReporter</full_name>
      <docblock line="628">
        <description>For sending messages to multiple reporters at
   the same time.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="628" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="635" namespace="global" package="Default">
        <name>$reporters</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="642" package="Default">
        <name>attachReporter</name>
        <full_name>attachReporter</full_name>
        <docblock line="637">
          <description>Adds a reporter to the subscriber list.</description>
          <long-description>&lt;p&gt;@param SimpleScorer $reporter     Reporter to receive events.&lt;/p&gt;</long-description>
          <tag line="637" name="access" description="public"/>
        </docblock>
        <argument line="642">
          <name>$reporter</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="653" package="Default">
        <name>makeDry</name>
        <full_name>makeDry</full_name>
        <docblock line="646">
          <description>Signals that the next evaluation will be a dry
   run.</description>
          <long-description>&lt;p&gt;That is, the structure events will be
   recorded, but no tests will be run.&lt;/p&gt;</long-description>
          <tag line="646" name="param" description="Dry run if true. @access public" type="boolean" variable="$is_dry">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="653">
          <name>$is_dry</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="667" package="Default">
        <name>getStatus</name>
        <full_name>getStatus</full_name>
        <docblock line="659">
          <description>Accessor for current status.</description>
          <long-description>&lt;p&gt;Will be false
   if there have been any failures or exceptions.
   If any reporter reports a failure, the whole
   suite fails.&lt;/p&gt;</long-description>
          <tag line="659" name="return" description="True if no failures.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="683" package="Default">
        <name>shouldInvoke</name>
        <full_name>shouldInvoke</full_name>
        <docblock line="676">
          <description>The reporter has a veto on what should be run.</description>
          <long-description>&lt;p&gt;It requires all reporters to want to run the method.&lt;/p&gt;</long-description>
          <tag line="676" name="param" description="name of test case. @param string $method Name of test method. @access public" type="string" variable="$test_case_name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="683">
          <name>$test_case_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="683">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="698" package="Default">
        <name>createInvoker</name>
        <full_name>createInvoker</full_name>
        <docblock line="692">
          <description>Every reporter gets a chance to wrap the invoker.</description>
          <long-description>&lt;p&gt;@param SimpleInvoker $invoker   Individual test runner.&lt;/p&gt;</long-description>
          <tag line="692" name="return" description="Wrapped test runner.&#10;   @access public" type="\SimpleInvoker">
            <type by_reference="false">\SimpleInvoker</type>
          </tag>
        </docblock>
        <argument line="698">
          <name>$invoker</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="711" package="Default">
        <name>getDumper</name>
        <full_name>getDumper</full_name>
        <docblock line="705">
          <description>Gets the formatter for privateiables and other small
   generic data items.</description>
          <long-description>&lt;p&gt;@return SimpleDumper          Formatter.&lt;/p&gt;</long-description>
          <tag line="705" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="721" package="Default">
        <name>paintGroupStart</name>
        <full_name>paintGroupStart</full_name>
        <docblock line="715">
          <description>Paints the start of a group test.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="715" name="param" description="Number of test cases starting. @access public" type="integer" variable="$size">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="721">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="721">
          <name>$size</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="732" package="Default">
        <name>paintGroupEnd</name>
        <full_name>paintGroupEnd</full_name>
        <docblock line="727">
          <description>Paints the end of a group test.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="727" name="access" description="public"/>
        </docblock>
        <argument line="732">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="743" package="Default">
        <name>paintCaseStart</name>
        <full_name>paintCaseStart</full_name>
        <docblock line="738">
          <description>Paints the start of a test case.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="738" name="access" description="public"/>
        </docblock>
        <argument line="743">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="754" package="Default">
        <name>paintCaseEnd</name>
        <full_name>paintCaseEnd</full_name>
        <docblock line="749">
          <description>Paints the end of a test case.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="749" name="access" description="public"/>
        </docblock>
        <argument line="754">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="765" package="Default">
        <name>paintMethodStart</name>
        <full_name>paintMethodStart</full_name>
        <docblock line="760">
          <description>Paints the start of a test method.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="760" name="access" description="public"/>
        </docblock>
        <argument line="765">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="776" package="Default">
        <name>paintMethodEnd</name>
        <full_name>paintMethodEnd</full_name>
        <docblock line="771">
          <description>Paints the end of a test method.</description>
          <long-description>&lt;p&gt;@param string $test_name     Name of test or other label.&lt;/p&gt;</long-description>
          <tag line="771" name="access" description="public"/>
        </docblock>
        <argument line="776">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="787" package="Default">
        <name>paintPass</name>
        <full_name>paintPass</full_name>
        <docblock line="782">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $message        Message is ignored.&lt;/p&gt;</long-description>
          <tag line="782" name="access" description="public"/>
        </docblock>
        <argument line="787">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="798" package="Default">
        <name>paintFail</name>
        <full_name>paintFail</full_name>
        <docblock line="793">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $message        Message is ignored.&lt;/p&gt;</long-description>
          <tag line="793" name="access" description="public"/>
        </docblock>
        <argument line="798">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="810" package="Default">
        <name>paintError</name>
        <full_name>paintError</full_name>
        <docblock line="804">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $message    Text of error formatted by
                             the test case.&lt;/p&gt;</long-description>
          <tag line="804" name="access" description="public"/>
        </docblock>
        <argument line="810">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="821" package="Default">
        <name>paintException</name>
        <full_name>paintException</full_name>
        <docblock line="816">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param Exception $exception    Exception to display.&lt;/p&gt;</long-description>
          <tag line="816" name="access" description="public"/>
        </docblock>
        <argument line="821">
          <name>$exception</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="832" package="Default">
        <name>paintSkip</name>
        <full_name>paintSkip</full_name>
        <docblock line="827">
          <description>Prints the message for skipping tests.</description>
          <long-description>&lt;p&gt;@param string $message    Text of skip condition.&lt;/p&gt;</long-description>
          <tag line="827" name="access" description="public"/>
        </docblock>
        <argument line="832">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="843" package="Default">
        <name>paintMessage</name>
        <full_name>paintMessage</full_name>
        <docblock line="838">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $message        Text to display.&lt;/p&gt;</long-description>
          <tag line="838" name="access" description="public"/>
        </docblock>
        <argument line="843">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="854" package="Default">
        <name>paintFormattedMessage</name>
        <full_name>paintFormattedMessage</full_name>
        <docblock line="849">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $message        Text to display.&lt;/p&gt;</long-description>
          <tag line="849" name="access" description="public"/>
        </docblock>
        <argument line="854">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="869" package="Default">
        <name>paintSignal</name>
        <full_name>paintSignal</full_name>
        <docblock line="860">
          <description>Chains to the wrapped reporter.</description>
          <long-description>&lt;p&gt;@param string $type        Event type as text.&lt;/p&gt;</long-description>
          <tag line="860" name="param" description="Message or object. @return boolean Should return false if this type of signal should fail the test suite. @access public" type="mixed" variable="$payload">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="869">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="869">
          <name>$payload</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/scorer.php</error>
      <error line="22" code="50018">No DocBlock was found for property $passes</error>
      <error line="23" code="50018">No DocBlock was found for property $fails</error>
      <error line="24" code="50018">No DocBlock was found for property $exceptions</error>
      <error line="25" code="50018">No DocBlock was found for property $is_dry_run</error>
      <error line="49" code="50014">Name of argument $test_case_name does not match with the DocBlock's name $method in shouldInvoke()</error>
      <error line="49" code="50015">Argument $method is missing from the Docblock of shouldInvoke()</error>
      <error line="59" code="50015">Argument $invoker is missing from the Docblock of createInvoker()</error>
      <error line="84" code="50014">Name of argument $test_name does not match with the DocBlock's name $size in paintGroupStart()</error>
      <error line="84" code="50015">Argument $size is missing from the Docblock of paintGroupStart()</error>
      <error line="93" code="50015">Argument $test_name is missing from the Docblock of paintGroupEnd()</error>
      <error line="101" code="50015">Argument $test_name is missing from the Docblock of paintCaseStart()</error>
      <error line="109" code="50015">Argument $test_name is missing from the Docblock of paintCaseEnd()</error>
      <error line="117" code="50015">Argument $test_name is missing from the Docblock of paintMethodStart()</error>
      <error line="125" code="50015">Argument $test_name is missing from the Docblock of paintMethodEnd()</error>
      <error line="133" code="50015">Argument $message is missing from the Docblock of paintPass()</error>
      <error line="142" code="50015">Argument $message is missing from the Docblock of paintFail()</error>
      <error line="151" code="50015">Argument $message is missing from the Docblock of paintError()</error>
      <error line="161" code="50015">Argument $exception is missing from the Docblock of paintException()</error>
      <error line="170" code="50015">Argument $message is missing from the Docblock of paintSkip()</error>
      <error line="206" code="50015">Argument $message is missing from the Docblock of paintMessage()</error>
      <error line="214" code="50015">Argument $message is missing from the Docblock of paintFormattedMessage()</error>
      <error line="223" code="50014">Name of argument $type does not match with the DocBlock's name $payload in paintSignal()</error>
      <error line="223" code="50015">Argument $payload is missing from the Docblock of paintSignal()</error>
      <error line="242" code="50018">No DocBlock was found for property $test_stack</error>
      <error line="243" code="50018">No DocBlock was found for property $size</error>
      <error line="244" code="50018">No DocBlock was found for property $progress</error>
      <error line="266" code="50015">Argument $size is missing from the Docblock of paintGroupStart()</error>
      <error line="331" code="50015">Argument $test_name is missing from the Docblock of paintMethodStart()</error>
      <error line="350" code="50015">Argument $test_name is missing from the Docblock of paintHeader()</error>
      <error line="360" code="50015">Argument $test_name is missing from the Docblock of paintFooter()</error>
      <critical line="411" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="417" code="50018">No DocBlock was found for property $reporter</error>
      <error line="419" code="50015">Argument $reporter is missing from the Docblock of __construct()</error>
      <error line="463" code="50014">Name of argument $test_case_name does not match with the DocBlock's name $method in shouldInvoke()</error>
      <error line="463" code="50015">Argument $method is missing from the Docblock of shouldInvoke()</error>
      <error line="474" code="50015">Argument $invoker is missing from the Docblock of createInvoker()</error>
      <error line="495" code="50014">Name of argument $test_name does not match with the DocBlock's name $size in paintGroupStart()</error>
      <error line="495" code="50015">Argument $size is missing from the Docblock of paintGroupStart()</error>
      <error line="505" code="50015">Argument $test_name is missing from the Docblock of paintGroupEnd()</error>
      <error line="514" code="50015">Argument $test_name is missing from the Docblock of paintCaseStart()</error>
      <error line="523" code="50015">Argument $test_name is missing from the Docblock of paintCaseEnd()</error>
      <error line="532" code="50015">Argument $test_name is missing from the Docblock of paintMethodStart()</error>
      <error line="541" code="50015">Argument $test_name is missing from the Docblock of paintMethodEnd()</error>
      <error line="550" code="50015">Argument $message is missing from the Docblock of paintPass()</error>
      <error line="559" code="50015">Argument $message is missing from the Docblock of paintFail()</error>
      <error line="568" code="50015">Argument $message is missing from the Docblock of paintError()</error>
      <error line="578" code="50015">Argument $exception is missing from the Docblock of paintException()</error>
      <error line="587" code="50015">Argument $message is missing from the Docblock of paintSkip()</error>
      <error line="596" code="50015">Argument $message is missing from the Docblock of paintMessage()</error>
      <error line="605" code="50015">Argument $message is missing from the Docblock of paintFormattedMessage()</error>
      <error line="614" code="50014">Name of argument $type does not match with the DocBlock's name $payload in paintSignal()</error>
      <error line="614" code="50015">Argument $payload is missing from the Docblock of paintSignal()</error>
      <critical line="628" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="635" code="50018">No DocBlock was found for property $reporters</error>
      <error line="637" code="50015">Argument $reporter is missing from the Docblock of attachReporter()</error>
      <error line="676" code="50015">Argument $method is missing from the Docblock of shouldInvoke()</error>
      <error line="692" code="50015">Argument $invoker is missing from the Docblock of createInvoker()</error>
      <error line="715" code="50014">Name of argument $test_name does not match with the DocBlock's name $size in paintGroupStart()</error>
      <error line="715" code="50015">Argument $size is missing from the Docblock of paintGroupStart()</error>
      <error line="727" code="50015">Argument $test_name is missing from the Docblock of paintGroupEnd()</error>
      <error line="738" code="50015">Argument $test_name is missing from the Docblock of paintCaseStart()</error>
      <error line="749" code="50015">Argument $test_name is missing from the Docblock of paintCaseEnd()</error>
      <error line="760" code="50015">Argument $test_name is missing from the Docblock of paintMethodStart()</error>
      <error line="771" code="50015">Argument $test_name is missing from the Docblock of paintMethodEnd()</error>
      <error line="782" code="50015">Argument $message is missing from the Docblock of paintPass()</error>
      <error line="793" code="50015">Argument $message is missing from the Docblock of paintFail()</error>
      <error line="804" code="50015">Argument $message is missing from the Docblock of paintError()</error>
      <error line="816" code="50015">Argument $exception is missing from the Docblock of paintException()</error>
      <error line="827" code="50015">Argument $message is missing from the Docblock of paintSkip()</error>
      <error line="838" code="50015">Argument $message is missing from the Docblock of paintMessage()</error>
      <error line="849" code="50015">Argument $message is missing from the Docblock of paintFormattedMessage()</error>
      <error line="860" code="50014">Name of argument $type does not match with the DocBlock's name $payload in paintSignal()</error>
      <error line="860" code="50015">Argument $payload is missing from the Docblock of paintSignal()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/selector.php" hash="05d3224a4fdf6e605164c1ae981290e9" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Base include file for SimpleTest.</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: selector.php 1786 2008-04-26 17:32:20Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="22" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleByName</name>
      <full_name>\SimpleByName</full_name>
      <docblock line="16">
        <description>Used to extract form elements for testing against.</description>
        <long-description>&lt;p&gt;Searches by name attribute.&lt;/p&gt;</long-description>
        <tag line="16" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="23" namespace="global" package="Default">
        <name>$name</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="29" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="25">
          <description>Stashes the name for later comparison.</description>
          <long-description>&lt;p&gt;@param string $name     Name attribute to match.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="29">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="37" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="33">
          <description>Accessor for name.</description>
          <long-description>&lt;p&gt;@returns string $name       Name to match.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="46" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isMatch</name>
        <full_name>isMatch</full_name>
        <docblock line="41">
          <description>Compares with name attribute of widget.</description>
          <long-description>&lt;p&gt;@param SimpleWidget $widget    Control to compare.&lt;/p&gt;</long-description>
          <tag line="41" name="access" description="public"/>
        </docblock>
        <argument line="46">
          <name>$widget</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="57" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleByLabel</name>
      <full_name>\SimpleByLabel</full_name>
      <docblock line="51">
        <description>Used to extract form elements for testing against.</description>
        <long-description>&lt;p&gt;Searches by visible label or alt text.&lt;/p&gt;</long-description>
        <tag line="51" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="58" namespace="global" package="Default">
        <name>$label</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="64" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="60">
          <description>Stashes the name for later comparison.</description>
          <long-description>&lt;p&gt;@param string $label     Visible text to match.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="64">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="74" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isMatch</name>
        <full_name>isMatch</full_name>
        <docblock line="68">
          <description>Comparison.</description>
          <long-description>&lt;p&gt;Compares visible text of widget or
   related label.&lt;/p&gt;</long-description>
          <tag line="68" name="param" description="Control to compare. @access public" type="\SimpleWidget" variable="$widget">
            <type by_reference="false">\SimpleWidget</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$widget</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="88" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleById</name>
      <full_name>\SimpleById</full_name>
      <docblock line="82">
        <description>Used to extract form elements for testing against.</description>
        <long-description>&lt;p&gt;Searches dy id attribute.&lt;/p&gt;</long-description>
        <tag line="82" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="89" namespace="global" package="Default">
        <name>$id</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="95" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="91">
          <description>Stashes the name for later comparison.</description>
          <long-description>&lt;p&gt;@param string $id     ID atribute to match.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="95">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="104" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isMatch</name>
        <full_name>isMatch</full_name>
        <docblock line="99">
          <description>Comparison.</description>
          <long-description>&lt;p&gt;Compares id attribute of widget.&lt;/p&gt;</long-description>
          <tag line="99" name="param" description="Control to compare. @access public" type="\SimpleWidget" variable="$widget">
            <type by_reference="false">\SimpleWidget</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$widget</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="115" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleByLabelOrName</name>
      <full_name>\SimpleByLabelOrName</full_name>
      <docblock line="109">
        <description>Used to extract form elements for testing against.</description>
        <long-description>&lt;p&gt;Searches by visible label, name or alt text.&lt;/p&gt;</long-description>
        <tag line="109" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="116" namespace="global" package="Default">
        <name>$label</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="122" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="118">
          <description>Stashes the name/label for later comparison.</description>
          <long-description>&lt;p&gt;@param string $label     Visible text to match.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="122">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isMatch</name>
        <full_name>isMatch</full_name>
        <docblock line="126">
          <description>Comparison.</description>
          <long-description>&lt;p&gt;Compares visible text of widget or
   related label or name.&lt;/p&gt;</long-description>
          <tag line="126" name="param" description="Control to compare. @access public" type="\SimpleWidget" variable="$widget">
            <type by_reference="false">\SimpleWidget</type>
          </tag>
        </docblock>
        <argument line="132">
          <name>$widget</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/selector.php</error>
      <error line="23" code="50018">No DocBlock was found for property $name</error>
      <error line="25" code="50015">Argument $name is missing from the Docblock of __construct()</error>
      <error line="41" code="50015">Argument $widget is missing from the Docblock of isMatch()</error>
      <error line="58" code="50018">No DocBlock was found for property $label</error>
      <error line="60" code="50015">Argument $label is missing from the Docblock of __construct()</error>
      <error line="89" code="50018">No DocBlock was found for property $id</error>
      <error line="91" code="50015">Argument $id is missing from the Docblock of __construct()</error>
      <error line="116" code="50018">No DocBlock was found for property $label</error>
      <error line="118" code="50015">Argument $label is missing from the Docblock of __construct()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/shell_tester.php" hash="02517969d5761f102f4e38dcb399f07d" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: shell_tester.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="20" package="Default">
      <extends/>
      <name>SimpleShell</name>
      <full_name>\SimpleShell</full_name>
      <docblock line="15">
        <description>Wrapper for exec() functionality.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="15" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="21" namespace="global" package="Default">
        <name>$output</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="27" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="23">
          <description>Executes the shell comand and stashes the output.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="Default">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="31">
          <description>Actually runs the command.</description>
          <long-description>&lt;p&gt;Does not trap the
   error stream output as this need PHP 4.3+.&lt;/p&gt;</long-description>
          <tag line="31" name="param" description="The actual command line to run. @return integer Exit code. @access public" type="string" variable="$command">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$command</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="50" package="Default">
        <name>getOutput</name>
        <full_name>getOutput</full_name>
        <docblock line="45">
          <description>Accessor for the last output.</description>
          <long-description>&lt;p&gt;@return string        Output as text.&lt;/p&gt;</long-description>
          <tag line="45" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="59" package="Default">
        <name>getOutputAsList</name>
        <full_name>getOutputAsList</full_name>
        <docblock line="54">
          <description>Accessor for the last output.</description>
          <long-description>&lt;p&gt;@return array         Output as array of lines.&lt;/p&gt;</long-description>
          <tag line="54" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="71" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends>\SimpleTestCase</extends>
      <name>ShellTestCase</name>
      <full_name>\ShellTestCase</full_name>
      <docblock line="64">
        <description>Test case for testing of command line scripts and
   utilities.</description>
        <long-description>&lt;p&gt;Usually scripts that are external to the
   PHP code, but support it in some way.&lt;/p&gt;</long-description>
        <tag line="64" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="72" namespace="global" package="Default">
        <name>$current_shell</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="73" namespace="global" package="Default">
        <name>$last_status</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="74" namespace="global" package="Default">
        <name>$last_command</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="83" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="76">
          <description>Creates an empty test case.</description>
          <long-description>&lt;p&gt;Should be subclassed
   with test methods for a functional test case.&lt;/p&gt;</long-description>
          <tag line="76" name="param" description="Name of test case. Will use the class name if none specified. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$label</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="96" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="90">
          <description>Executes a command and buffers the results.</description>
          <long-description>&lt;p&gt;@param string $command     Command to run.&lt;/p&gt;</long-description>
          <tag line="90" name="return" description="True if zero exit code.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$command</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="107" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>dumpOutput</name>
        <full_name>dumpOutput</full_name>
        <docblock line="103">
          <description>Dumps the output of the last command.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="116" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getOutput</name>
        <full_name>getOutput</full_name>
        <docblock line="111">
          <description>Accessor for the last output.</description>
          <long-description>&lt;p&gt;@return string        Output as text.&lt;/p&gt;</long-description>
          <tag line="111" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="126" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getOutputAsList</name>
        <full_name>getOutputAsList</full_name>
        <docblock line="121">
          <description>Accessor for the last output.</description>
          <long-description>&lt;p&gt;@return array         Output as array of lines.&lt;/p&gt;</long-description>
          <tag line="121" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="140" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertTrue</name>
        <full_name>assertTrue</full_name>
        <docblock line="131">
          <description>Called from within the test methods to register
   passes and failures.</description>
          <long-description>&lt;p&gt;@param boolean $result    Pass on true.&lt;/p&gt;</long-description>
          <tag line="131" name="param" description="Message to display describing the test state. @return boolean True on pass @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$result</name>
          <default></default>
          <type/>
        </argument>
        <argument line="140">
          <name>$message</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertFalse</name>
        <full_name>assertFalse</full_name>
        <docblock line="144">
          <description>Will be true on false and vice versa.</description>
          <long-description>&lt;p&gt;False
   is the PHP definition of false, so that null,
   empty strings, zero and an empty array all count
   as false.&lt;/p&gt;</long-description>
          <tag line="144" name="param" description="Pass on false. @param string $message Message to display. @return boolean True on pass @access public" type="boolean" variable="$result">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$result</name>
          <default></default>
          <type/>
        </argument>
        <argument line="154">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="168" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertEqual</name>
        <full_name>assertEqual</full_name>
        <docblock line="158">
          <description>Will trigger a pass if the two parameters have
   the same value only.</description>
          <long-description>&lt;p&gt;Otherwise a fail. This
   is for testing hand extracted text, etc.&lt;/p&gt;</long-description>
          <tag line="158" name="param" description="Value to compare. @param mixed $second Value to compare. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="168">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="168">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="185" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertNotEqual</name>
        <full_name>assertNotEqual</full_name>
        <docblock line="175">
          <description>Will trigger a pass if the two parameters have
   a different value.</description>
          <long-description>&lt;p&gt;Otherwise a fail. This
   is for testing hand extracted text, etc.&lt;/p&gt;</long-description>
          <tag line="175" name="param" description="Value to compare. @param mixed $second Value to compare. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="185">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="185">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="185">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="200" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertExitCode</name>
        <full_name>assertExitCode</full_name>
        <docblock line="192">
          <description>Tests the last status code from the shell.</description>
          <long-description>&lt;p&gt;@param integer $status   Expected status of last
                            command.&lt;/p&gt;</long-description>
          <tag line="192" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="200">
          <name>$status</name>
          <default></default>
          <type/>
        </argument>
        <argument line="200">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="215" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertOutput</name>
        <full_name>assertOutput</full_name>
        <docblock line="207">
          <description>Attempt to exactly match the combined STDERR and
   STDOUT output.</description>
          <long-description>&lt;p&gt;@param string $expected  Expected output.&lt;/p&gt;</long-description>
          <tag line="207" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="215">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
        <argument line="215">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="231" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertOutputPattern</name>
        <full_name>assertOutputPattern</full_name>
        <docblock line="223">
          <description>Scans the output for a Perl regex.</description>
          <long-description>&lt;p&gt;If found
   anywhere it passes, else it fails.&lt;/p&gt;</long-description>
          <tag line="223" name="param" description="Regex to search for. @param string $message Message to display. @return boolean True if pass. @access public" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="231">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="231">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="247" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertNoOutputPattern</name>
        <full_name>assertNoOutputPattern</full_name>
        <docblock line="239">
          <description>If a Perl regex is found anywhere in the current
   output then a failure is generated, else a pass.</description>
          <long-description>&lt;p&gt;@param string $pattern    Regex to search for.&lt;/p&gt;</long-description>
          <tag line="239" name="param" description="Message to display. @return boolean True if pass. @access public" type="\global\" variable="$message"/>
        </docblock>
        <argument line="247">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="247">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="262" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertFileExists</name>
        <full_name>assertFileExists</full_name>
        <docblock line="255">
          <description>File existence check.</description>
          <long-description>&lt;p&gt;@param string $path      Full filename and path.&lt;/p&gt;</long-description>
          <tag line="255" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="262">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="262">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="274" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertFileNotExists</name>
        <full_name>assertFileNotExists</full_name>
        <docblock line="267">
          <description>File non-existence check.</description>
          <long-description>&lt;p&gt;@param string $path      Full filename and path.&lt;/p&gt;</long-description>
          <tag line="267" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="274">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="274">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="288" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertFilePattern</name>
        <full_name>assertFilePattern</full_name>
        <docblock line="279">
          <description>Scans a file for a Perl regex.</description>
          <long-description>&lt;p&gt;If found
   anywhere it passes, else it fails.&lt;/p&gt;</long-description>
          <tag line="279" name="param" description="Regex to search for. @param string $path Full filename and path. @param string $message Message to display. @return boolean True if pass. @access public" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="288">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="288">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="288">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="304" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>assertNoFilePattern</name>
        <full_name>assertNoFilePattern</full_name>
        <docblock line="295">
          <description>If a Perl regex is found anywhere in the named
   file then a failure is generated, else a pass.</description>
          <long-description>&lt;p&gt;@param string $pattern    Regex to search for.&lt;/p&gt;</long-description>
          <tag line="295" name="param" description="Full filename and path. @param string $message Message to display. @return boolean True if pass. @access public" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="304">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="304">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="304">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="317" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getShell</name>
        <full_name>getShell</full_name>
        <docblock line="311">
          <description>Accessor for current shell.</description>
          <long-description>&lt;p&gt;Used for testing the
   the tester itself.&lt;/p&gt;</long-description>
          <tag line="311" name="return" description="Current shell.&#10;   @access protected" type="\Shell">
            <type by_reference="false">\Shell</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="326" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>createShell</name>
        <full_name>createShell</full_name>
        <docblock line="321">
          <description>Factory for the shell to run the command on.</description>
          <long-description>&lt;p&gt;@return Shell        New shell object.&lt;/p&gt;</long-description>
          <tag line="321" name="access" description="protected"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/shell_tester.php</error>
      <critical line="15" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="21" code="50018">No DocBlock was found for property $output</error>
      <error line="72" code="50018">No DocBlock was found for property $current_shell</error>
      <error line="73" code="50018">No DocBlock was found for property $last_status</error>
      <error line="74" code="50018">No DocBlock was found for property $last_command</error>
      <error line="90" code="50015">Argument $command is missing from the Docblock of execute()</error>
      <error line="131" code="50014">Name of argument $result does not match with the DocBlock's name $message in assertTrue()</error>
      <error line="131" code="50015">Argument $message is missing from the Docblock of assertTrue()</error>
      <error line="144" code="50015">Argument $message is missing from the Docblock of assertFalse()</error>
      <error line="158" code="50015">Argument $second is missing from the Docblock of assertEqual()</error>
      <error line="158" code="50015">Argument $message is missing from the Docblock of assertEqual()</error>
      <error line="175" code="50015">Argument $second is missing from the Docblock of assertNotEqual()</error>
      <error line="175" code="50015">Argument $message is missing from the Docblock of assertNotEqual()</error>
      <error line="192" code="50014">Name of argument $status does not match with the DocBlock's name $message in assertExitCode()</error>
      <error line="192" code="50015">Argument $message is missing from the Docblock of assertExitCode()</error>
      <error line="207" code="50014">Name of argument $expected does not match with the DocBlock's name $message in assertOutput()</error>
      <error line="207" code="50015">Argument $message is missing from the Docblock of assertOutput()</error>
      <error line="223" code="50015">Argument $message is missing from the Docblock of assertOutputPattern()</error>
      <error line="239" code="50014">Name of argument $pattern does not match with the DocBlock's name $message in assertNoOutputPattern()</error>
      <error line="239" code="50015">Argument $message is missing from the Docblock of assertNoOutputPattern()</error>
      <error line="255" code="50014">Name of argument $path does not match with the DocBlock's name $message in assertFileExists()</error>
      <error line="255" code="50015">Argument $message is missing from the Docblock of assertFileExists()</error>
      <error line="267" code="50014">Name of argument $path does not match with the DocBlock's name $message in assertFileNotExists()</error>
      <error line="267" code="50015">Argument $message is missing from the Docblock of assertFileNotExists()</error>
      <error line="279" code="50015">Argument $path is missing from the Docblock of assertFilePattern()</error>
      <error line="279" code="50015">Argument $message is missing from the Docblock of assertFilePattern()</error>
      <error line="295" code="50014">Name of argument $pattern does not match with the DocBlock's name $path in assertNoFilePattern()</error>
      <error line="295" code="50015">Argument $path is missing from the Docblock of assertNoFilePattern()</error>
      <error line="295" code="50015">Argument $message is missing from the Docblock of assertNoFilePattern()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/simpletest.php" hash="9a445e6a3db05813c3d9df4d640c214e" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Global state for SimpleTest and kicker script in future versions.</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: simpletest.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="23" package="SimpleTest&#10;   @subpackage   UnitTester">
      <extends/>
      <name>SimpleTest</name>
      <full_name>\SimpleTest</full_name>
      <docblock line="17">
        <description>Registry and test context.</description>
        <long-description>&lt;p&gt;Includes a few
   global options that I'm slowly getting rid of.&lt;/p&gt;</long-description>
        <tag line="17" name="package" description="SimpleTest&#10;   @subpackage   UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="29" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getVersion</name>
        <full_name>getVersion</full_name>
        <docblock line="25">
          <description>Reads the SimpleTest version from the release file.</description>
          <long-description>&lt;p&gt;@return string        Version string.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="39" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>ignore</name>
        <full_name>ignore</full_name>
        <docblock line="34">
          <description>Sets the name of a test case to ignore, usually
   because the class is an abstract case that should</description>
          <long-description>&lt;p&gt;@param string $class        Add a class to ignore.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="39">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="57" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>ignoreParentsIfIgnored</name>
        <full_name>ignoreParentsIfIgnored</full_name>
        <docblock line="44">
          <description>Scans the now complete ignore list, and adds
   all parent classes to the list.</description>
          <long-description>&lt;p&gt;If a class
   is not a runnable test case, then it's parents
   wouldn't be either. This is syntactic sugar
   to cut down on ommissions of ignore()'s or
   missing abstract declarations. This cannot
   be done whilst loading classes wiithout forcing
   a particular order on the class declarations and
   the ignore() calls. It's just nice to have the ignore()
   calls at the top of the file before the actual declarations.&lt;/p&gt;</long-description>
          <tag line="44" name="param" description="Class names of interest." type="array" variable="$classes">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$classes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="76" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>prefer</name>
        <full_name>prefer</full_name>
        <docblock line="69">
          <description>Puts the object to the global pool of 'preferred' objects
  which can be retrieved with SimpleTest :: preferred() method.</description>
          <long-description>&lt;p&gt;Instances of the same class are overwritten.&lt;/p&gt;</long-description>
          <tag line="69" name="param" description="Preferred object @see preferred()" type="object" variable="$object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$object</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="89" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>preferred</name>
        <full_name>preferred</full_name>
        <docblock line="81">
          <description>Retrieves 'preferred' objects from global pool.</description>
          <long-description>&lt;p&gt;Class filter
  can be applied in order to retrieve the object of the specific
  class&lt;/p&gt;</long-description>
          <tag line="81" name="param" description="Allowed classes or interfaces. @return array|object|null @see prefer()" type="array|string" variable="$classes">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$classes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="113" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>isIgnored</name>
        <full_name>isIgnored</full_name>
        <docblock line="104">
          <description>Test to see if a test case is in the ignore
   list.</description>
          <long-description>&lt;p&gt;Quite obviously the ignore list should
   be a separate object and will be one day.
   This method is internal to SimpleTest. Don't
   use it.&lt;/p&gt;</long-description>
          <tag line="104" name="param" description="Class name to test. @return boolean True if should not be run." type="string" variable="$class">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="127" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>useProxy</name>
        <full_name>useProxy</full_name>
        <docblock line="118">
          <description>Sets proxy to use on all requests for when
   testing from behind a firewall.</description>
          <long-description>&lt;p&gt;Set host
   to false to disable. This will take effect
   if there are no other proxy settings.&lt;/p&gt;</long-description>
          <tag line="118" name="param" description="Proxy host as URL. @param string $username Proxy username for authentication. @param string $password Proxy password for authentication." type="string" variable="$proxy">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$proxy</name>
          <default></default>
          <type/>
        </argument>
        <argument line="127">
          <name>$username</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="127">
          <name>$password</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="138" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getDefaultProxy</name>
        <full_name>getDefaultProxy</full_name>
        <docblock line="134">
          <description>Accessor for default proxy host.</description>
          <long-description>&lt;p&gt;@return string       Proxy URL.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="147" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getDefaultProxyUsername</name>
        <full_name>getDefaultProxyUsername</full_name>
        <docblock line="143">
          <description>Accessor for default proxy username.</description>
          <long-description>&lt;p&gt;@return string    Proxy username for authentication.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="156" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getDefaultProxyPassword</name>
        <full_name>getDefaultProxyPassword</full_name>
        <docblock line="152">
          <description>Accessor for default proxy password.</description>
          <long-description>&lt;p&gt;@return string    Proxy password for authentication.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="167" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getParsers</name>
        <full_name>getParsers</full_name>
        <docblock line="161">
          <description>Accessor for default HTML parsers.</description>
          <long-description>&lt;p&gt;@return array     List of parsers to try in
                     order until one responds true
                     to can().&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="178" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>setParsers</name>
        <full_name>setParsers</full_name>
        <docblock line="172">
          <description>Set the list of HTML parsers to attempt to use by default.</description>
          <long-description>&lt;p&gt;@param array $parsers    List of parsers to try in
                            order until one responds true
                            to can().&lt;/p&gt;</long-description>
        </docblock>
        <argument line="178">
          <name>$parsers</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="187" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getRegistry</name>
        <full_name>getRegistry</full_name>
        <docblock line="183">
          <description>Accessor for global registry of options.</description>
          <long-description>&lt;p&gt;@return hash           All stored values.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="200" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getContext</name>
        <full_name>getContext</full_name>
        <docblock line="195">
          <description>Accessor for the context of the current
   test run.</description>
          <long-description>&lt;p&gt;@return SimpleTestContext    Current test run.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="212" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getDefaults</name>
        <full_name>getDefaults</full_name>
        <docblock line="208">
          <description>Constant default values.</description>
          <long-description>&lt;p&gt;@return hash       All registry defaults.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="226" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>setMockBaseClass</name>
        <full_name>setMockBaseClass</full_name>
        <docblock line="223">
          <description></description>
          <long-description></long-description>
          <tag line="223" name="deprecated" description=""/>
        </docblock>
        <argument line="226">
          <name>$mock_base</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="234" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getMockBaseClass</name>
        <full_name>getMockBaseClass</full_name>
        <docblock line="231">
          <description></description>
          <long-description></long-description>
          <tag line="231" name="deprecated" description=""/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="248" package="SimpleTest">
      <extends/>
      <name>SimpleTestContext</name>
      <full_name>\SimpleTestContext</full_name>
      <docblock line="240">
        <description>Container for all components for a specific
   test run.</description>
        <long-description>&lt;p&gt;Makes things like error queues
   available to PHP event handlers, and also
   gets around some nasty reference issues in
   the mocks.&lt;/p&gt;</long-description>
        <tag line="240" name="package" description="SimpleTest"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="249" namespace="global" package="Default">
        <name>$test</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="250" namespace="global" package="Default">
        <name>$reporter</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="251" namespace="global" package="Default">
        <name>$resources</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="257" package="SimpleTest">
        <name>clear</name>
        <full_name>clear</full_name>
        <docblock line="253">
          <description>Clears down the current context.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="267" package="SimpleTest">
        <name>setTest</name>
        <full_name>setTest</full_name>
        <docblock line="261">
          <description>Sets the current test case instance.</description>
          <long-description>&lt;p&gt;This
   global instance can be used by the mock objects
   to send message to the test cases.&lt;/p&gt;</long-description>
          <tag line="261" name="param" description="Test case to register." type="\SimpleTestCase" variable="$test">
            <type by_reference="false">\SimpleTestCase</type>
          </tag>
        </docblock>
        <argument line="267">
          <name>$test</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="276" package="SimpleTest">
        <name>getTest</name>
        <full_name>getTest</full_name>
        <docblock line="272">
          <description>Accessor for currently running test case.</description>
          <long-description>&lt;p&gt;@return SimpleTestCase    Current test.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="286" package="SimpleTest">
        <name>setReporter</name>
        <full_name>setReporter</full_name>
        <docblock line="280">
          <description>Sets the current reporter.</description>
          <long-description>&lt;p&gt;This
   global instance can be used by the mock objects
   to send messages.&lt;/p&gt;</long-description>
          <tag line="280" name="param" description="Reporter to register." type="\SimpleReporter" variable="$reporter">
            <type by_reference="false">\SimpleReporter</type>
          </tag>
        </docblock>
        <argument line="286">
          <name>$reporter</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="295" package="SimpleTest">
        <name>getReporter</name>
        <full_name>getReporter</full_name>
        <docblock line="291">
          <description>Accessor for current reporter.</description>
          <long-description>&lt;p&gt;@return SimpleReporter    Current reporter.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="303" package="SimpleTest">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="299">
          <description>Accessor for the Singleton resource.</description>
          <long-description>&lt;p&gt;@return object       Global resource.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="303">
          <name>$resource</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="317" package="Default">
      <extends/>
      <name>SimpleStackTrace</name>
      <full_name>\SimpleStackTrace</full_name>
      <docblock line="311">
        <description>Interrogates the stack trace to recover the
   failure point.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="311" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="318" namespace="global" package="Default">
        <name>$prefixes</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="325" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="320">
          <description>Stashes the list of target prefixes.</description>
          <long-description>&lt;p&gt;@param array $prefixes      List of method prefixes
                               to search for.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="325">
          <name>$prefixes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="336" package="Default">
        <name>traceMethod</name>
        <full_name>traceMethod</full_name>
        <docblock line="329">
          <description>Extracts the last method name that was not within
   Simpletest itself.</description>
          <long-description>&lt;p&gt;Captures a stack trace if none given.&lt;/p&gt;</long-description>
          <tag line="329" name="param" description="List of stack frames. @return string Snippet of test report with line number and file." type="array" variable="$stack">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="336">
          <name>$stack</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="354" package="Default">
        <name>frameLiesWithinSimpleTestFolder</name>
        <full_name>frameLiesWithinSimpleTestFolder</full_name>
        <docblock line="349">
          <description>Test to see if error is generated by SimpleTest itself.</description>
          <long-description>&lt;p&gt;@param array $frame     PHP stack frame.&lt;/p&gt;</long-description>
          <tag line="349" name="return" description="True if a SimpleTest file." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="354">
          <name>$frame</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="371" package="Default">
        <name>frameMatchesPrefix</name>
        <full_name>frameMatchesPrefix</full_name>
        <docblock line="366">
          <description>Tries to determine if the method call is an assert, etc.</description>
          <long-description>&lt;p&gt;@param array $frame     PHP stack frame.&lt;/p&gt;</long-description>
          <tag line="366" name="return" description="True if matches a target." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="371">
          <name>$frame</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="384" package="Default">
        <name>captureTrace</name>
        <full_name>captureTrace</full_name>
        <docblock line="380">
          <description>Grabs a current stack trace.</description>
          <long-description>&lt;p&gt;@return array        Fulle trace.&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/simpletest.php</error>
      <error line="34" code="50015">Argument $class is missing from the Docblock of ignore()</error>
      <error line="118" code="50015">Argument $username is missing from the Docblock of useProxy()</error>
      <error line="118" code="50015">Argument $password is missing from the Docblock of useProxy()</error>
      <error line="172" code="50015">Argument $parsers is missing from the Docblock of setParsers()</error>
      <error line="223" code="50012">No short description for method setMockBaseClass()</error>
      <error line="223" code="50015">Argument $mock_base is missing from the Docblock of setMockBaseClass()</error>
      <error line="231" code="50012">No short description for method getMockBaseClass()</error>
      <error line="249" code="50018">No DocBlock was found for property $test</error>
      <error line="250" code="50018">No DocBlock was found for property $reporter</error>
      <error line="251" code="50018">No DocBlock was found for property $resources</error>
      <error line="299" code="50015">Argument $resource is missing from the Docblock of get()</error>
      <critical line="311" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="318" code="50018">No DocBlock was found for property $prefixes</error>
      <error line="320" code="50015">Argument $prefixes is missing from the Docblock of __construct()</error>
      <error line="349" code="50015">Argument $frame is missing from the Docblock of frameLiesWithinSimpleTestFolder()</error>
      <error line="366" code="50015">Argument $frame is missing from the Docblock of frameMatchesPrefix()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/socket.php" hash="987713db91a341b50a0d0696539353df" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="MockObjects&#10; @version    $Id: socket.php 1953 2009-09-20 01:26:25Z jsweat $"/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="21" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleStickyError</name>
      <full_name>\SimpleStickyError</full_name>
      <docblock line="15">
        <description>Stashes an error for later.</description>
        <long-description>&lt;p&gt;Useful for constructors
   until PHP gets exceptions.&lt;/p&gt;</long-description>
        <tag line="15" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$error</name>
        <default>'Constructor not chained'</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="24">
          <description>Sets the error to empty.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="37" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isError</name>
        <full_name>isError</full_name>
        <docblock line="32">
          <description>Test for an outstanding error.</description>
          <long-description>&lt;p&gt;@return boolean           True if there is an error.&lt;/p&gt;</long-description>
          <tag line="32" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getError</name>
        <full_name>getError</full_name>
        <docblock line="41">
          <description>Accessor for an outstanding error.</description>
          <long-description>&lt;p&gt;@return string     Empty string if no error otherwise
                      the error message.&lt;/p&gt;</long-description>
          <tag line="41" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setError</name>
        <full_name>setError</full_name>
        <docblock line="51">
          <description>Sets the internal error.</description>
          <long-description>&lt;p&gt;@param string       Error message to stash.&lt;/p&gt;</long-description>
          <tag line="51" name="access" description="protected"/>
        </docblock>
        <argument line="56">
          <name>$error</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="64" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clearError</name>
        <full_name>clearError</full_name>
        <docblock line="60">
          <description>Resets the error state to no error.</description>
          <long-description>&lt;p&gt;@access protected&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="73" package="SimpleTest&#10;   @subpackage WebTester">
      <extends>\SimpleStickyError</extends>
      <name>SimpleFileSocket</name>
      <full_name>\SimpleFileSocket</full_name>
      <docblock line="69">
        <description></description>
        <long-description></long-description>
        <tag line="69" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="74" namespace="global" package="Default">
        <name>$handle</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="75" namespace="global" package="Default">
        <name>$is_open</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="76" namespace="global" package="Default">
        <name>$sent</name>
        <default>''</default>
      </property>
      <property final="false" static="false" visibility="private" line="77" namespace="global" package="Default">
        <name>$block_size</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="79">
          <description>Opens a socket for reading and writing.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $file       Target URI to fetch.&lt;/p&gt;</long-description>
          <tag line="79" name="param" description="Size of chunk to read. @access public" type="integer" variable="$block_size">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$file</name>
          <default></default>
          <type/>
        </argument>
        <argument line="85">
          <name>$block_size</name>
          <default>1024</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="102" package="SimpleTest&#10;   @subpackage WebTester">
        <name>write</name>
        <full_name>write</full_name>
        <docblock line="96">
          <description>Writes some data to the socket and saves alocal copy.</description>
          <long-description>&lt;p&gt;@param string $message       String to send to socket.&lt;/p&gt;</long-description>
          <tag line="96" name="return" description="True if successful.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="SimpleTest&#10;   @subpackage WebTester">
        <name>read</name>
        <full_name>read</full_name>
        <docblock line="106">
          <description>Reads data from the socket.</description>
          <long-description>&lt;p&gt;The error suppresion
   is a workaround for PHP4 always throwing a warning
   with a secure socket.&lt;/p&gt;</long-description>
          <tag line="106" name="return" description="Incoming bytes. False&#10;                                    on error.&#10;   @access public" type="\integer/boolean">
            <type by_reference="false">\integer/boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="128" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isOpen</name>
        <full_name>isOpen</full_name>
        <docblock line="123">
          <description>Accessor for socket open state.</description>
          <long-description>&lt;p&gt;@return boolean           True if open.&lt;/p&gt;</long-description>
          <tag line="123" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="138" package="SimpleTest&#10;   @subpackage WebTester">
        <name>close</name>
        <full_name>close</full_name>
        <docblock line="132">
          <description>Closes the socket preventing further reads.</description>
          <long-description>&lt;p&gt;Cannot be reopened once closed.&lt;/p&gt;</long-description>
          <tag line="132" name="return" description="True if successful.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="149" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getSent</name>
        <full_name>getSent</full_name>
        <docblock line="144">
          <description>Accessor for content so far.</description>
          <long-description>&lt;p&gt;@return string        Bytes sent only.&lt;/p&gt;</long-description>
          <tag line="144" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="160" package="SimpleTest&#10;   @subpackage WebTester">
        <name>openFile</name>
        <full_name>openFile</full_name>
        <docblock line="153">
          <description>Actually opens the low level socket.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $file       SimpleUrl file target.&lt;/p&gt;</long-description>
          <tag line="153" name="param" description="Recipient of error message. @param integer $timeout Maximum time to wait for connection. @access protected" type="string" variable="$error">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="160">
          <name>$file</name>
          <default></default>
          <type/>
        </argument>
        <argument line="160">
          <name>$error</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="170" package="Default">
      <extends>\SimpleStickyError</extends>
      <name>SimpleSocket</name>
      <full_name>\SimpleSocket</full_name>
      <docblock line="165">
        <description>Wrapper for TCP/IP socket.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="165" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="171" namespace="global" package="Default">
        <name>$handle</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="172" namespace="global" package="Default">
        <name>$is_open</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="173" namespace="global" package="Default">
        <name>$sent</name>
        <default>''</default>
      </property>
      <property final="false" static="false" visibility="private" line="174" namespace="global" package="Default">
        <name>$lock_size</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="184" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="176">
          <description>Opens a socket for reading and writing.</description>
          <long-description>&lt;p&gt;@param string $host          Hostname to send request to.&lt;/p&gt;</long-description>
          <tag line="176" name="param" description="Port on remote machine to open. @param integer $timeout Connection timeout in seconds. @param integer $block_size Size of chunk to read. @access public" type="integer" variable="$port">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="184">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="184">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
        <argument line="184">
          <name>$block_size</name>
          <default>255</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="201" package="Default">
        <name>write</name>
        <full_name>write</full_name>
        <docblock line="195">
          <description>Writes some data to the socket and saves alocal copy.</description>
          <long-description>&lt;p&gt;@param string $message       String to send to socket.&lt;/p&gt;</long-description>
          <tag line="195" name="return" description="True if successful.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="226" package="Default">
        <name>read</name>
        <full_name>read</full_name>
        <docblock line="218">
          <description>Reads data from the socket.</description>
          <long-description>&lt;p&gt;The error suppresion
   is a workaround for PHP4 always throwing a warning
   with a secure socket.&lt;/p&gt;</long-description>
          <tag line="218" name="return" description="Incoming bytes. False&#10;                                    on error.&#10;   @access public" type="\integer/boolean">
            <type by_reference="false">\integer/boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="243" package="Default">
        <name>isOpen</name>
        <full_name>isOpen</full_name>
        <docblock line="238">
          <description>Accessor for socket open state.</description>
          <long-description>&lt;p&gt;@return boolean           True if open.&lt;/p&gt;</long-description>
          <tag line="238" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="253" package="Default">
        <name>close</name>
        <full_name>close</full_name>
        <docblock line="247">
          <description>Closes the socket preventing further reads.</description>
          <long-description>&lt;p&gt;Cannot be reopened once closed.&lt;/p&gt;</long-description>
          <tag line="247" name="return" description="True if successful.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="263" package="Default">
        <name>getSent</name>
        <full_name>getSent</full_name>
        <docblock line="258">
          <description>Accessor for content so far.</description>
          <long-description>&lt;p&gt;@return string        Bytes sent only.&lt;/p&gt;</long-description>
          <tag line="258" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="276" package="Default">
        <name>openSocket</name>
        <full_name>openSocket</full_name>
        <docblock line="267">
          <description>Actually opens the low level socket.</description>
          <long-description>&lt;p&gt;@param string $host          Host to connect to.&lt;/p&gt;</long-description>
          <tag line="267" name="param" description="Port on host. @param integer $error_number Recipient of error code. @param string $error Recipoent of error message. @param integer $timeout Maximum time to wait for connection. @access protected" type="integer" variable="$port">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="276">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="276">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="276">
          <name>$error_number</name>
          <default></default>
          <type/>
        </argument>
        <argument line="276">
          <name>$error</name>
          <default></default>
          <type/>
        </argument>
        <argument line="276">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="286" package="Default">
      <extends>\SimpleSocket</extends>
      <name>SimpleSecureSocket</name>
      <full_name>\SimpleSecureSocket</full_name>
      <docblock line="281">
        <description>Wrapper for TCP/IP socket over TLS.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="281" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="295" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="288">
          <description>Opens a secure socket for reading and writing.</description>
          <long-description>&lt;p&gt;@param string $host      Hostname to send request to.&lt;/p&gt;</long-description>
          <tag line="288" name="param" description="Port on remote machine to open. @param integer $timeout Connection timeout in seconds. @access public" type="integer" variable="$port">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="295">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="295">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="295">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="308" package="Default">
        <name>openSocket</name>
        <full_name>openSocket</full_name>
        <docblock line="299">
          <description>Actually opens the low level socket.</description>
          <long-description>&lt;p&gt;@param string $host          Host to connect to.&lt;/p&gt;</long-description>
          <tag line="299" name="param" description="Port on host. @param integer $error_number Recipient of error code. @param string $error Recipient of error message. @param integer $timeout Maximum time to wait for connection. @access protected" type="integer" variable="$port">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="308">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="308">
          <name>$port</name>
          <default></default>
          <type/>
        </argument>
        <argument line="308">
          <name>$error_number</name>
          <default></default>
          <type/>
        </argument>
        <argument line="308">
          <name>$error</name>
          <default></default>
          <type/>
        </argument>
        <argument line="308">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/socket.php</error>
      <error line="22" code="50018">No DocBlock was found for property $error</error>
      <error line="51" code="50015">Argument $error is missing from the Docblock of setError()</error>
      <critical line="69" code="50005">No short description for class \SimpleFileSocket</critical>
      <error line="74" code="50018">No DocBlock was found for property $handle</error>
      <error line="75" code="50018">No DocBlock was found for property $is_open</error>
      <error line="76" code="50018">No DocBlock was found for property $sent</error>
      <error line="77" code="50018">No DocBlock was found for property $block_size</error>
      <error line="79" code="50014">Name of argument $file does not match with the DocBlock's name $block_size in __construct()</error>
      <error line="79" code="50015">Argument $block_size is missing from the Docblock of __construct()</error>
      <error line="96" code="50015">Argument $message is missing from the Docblock of write()</error>
      <error line="153" code="50014">Name of argument $file does not match with the DocBlock's name $error in openFile()</error>
      <error line="153" code="50015">Argument $error is missing from the Docblock of openFile()</error>
      <critical line="165" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="171" code="50018">No DocBlock was found for property $handle</error>
      <error line="172" code="50018">No DocBlock was found for property $is_open</error>
      <error line="173" code="50018">No DocBlock was found for property $sent</error>
      <error line="174" code="50018">No DocBlock was found for property $lock_size</error>
      <error line="176" code="50014">Name of argument $host does not match with the DocBlock's name $port in __construct()</error>
      <error line="176" code="50015">Argument $port is missing from the Docblock of __construct()</error>
      <error line="176" code="50015">Argument $timeout is missing from the Docblock of __construct()</error>
      <error line="176" code="50015">Argument $block_size is missing from the Docblock of __construct()</error>
      <error line="195" code="50015">Argument $message is missing from the Docblock of write()</error>
      <error line="267" code="50014">Name of argument $host does not match with the DocBlock's name $port in openSocket()</error>
      <error line="267" code="50015">Argument $port is missing from the Docblock of openSocket()</error>
      <error line="267" code="50015">Argument $error_number is missing from the Docblock of openSocket()</error>
      <error line="267" code="50015">Argument $error is missing from the Docblock of openSocket()</error>
      <error line="267" code="50015">Argument $timeout is missing from the Docblock of openSocket()</error>
      <critical line="281" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="288" code="50014">Name of argument $host does not match with the DocBlock's name $port in __construct()</error>
      <error line="288" code="50015">Argument $port is missing from the Docblock of __construct()</error>
      <error line="288" code="50015">Argument $timeout is missing from the Docblock of __construct()</error>
      <error line="299" code="50014">Name of argument $host does not match with the DocBlock's name $port in openSocket()</error>
      <error line="299" code="50015">Argument $port is missing from the Docblock of openSocket()</error>
      <error line="299" code="50015">Argument $error_number is missing from the Docblock of openSocket()</error>
      <error line="299" code="50015">Argument $error is missing from the Docblock of openSocket()</error>
      <error line="299" code="50015">Argument $timeout is missing from the Docblock of openSocket()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/tag.php" hash="094d0d54df5f13cde7f46ef275d10e01" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Base include file for SimpleTest.</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: tag.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="22" package="Default">
      <extends/>
      <name>SimpleTagBuilder</name>
      <full_name>\SimpleTagBuilder</full_name>
      <docblock line="16">
        <description>Creates tags and widgets given HTML tag
   attributes.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="16" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Default">
        <name>createTag</name>
        <full_name>createTag</full_name>
        <docblock line="24">
          <description>Factory for the tag objects.</description>
          <long-description>&lt;p&gt;Creates the
   appropriate tag object for the incoming tag name
   and attributes.&lt;/p&gt;</long-description>
          <tag line="24" name="param" description="HTML tag name. @param hash $attributes Element attributes. @return SimpleTag Tag object. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="33">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="62" package="Default">
        <name>createSelectionTag</name>
        <full_name>createSelectionTag</full_name>
        <docblock line="56">
          <description>Factory for selection fields.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Element attributes.&lt;/p&gt;</long-description>
          <tag line="56" name="return" description="Tag object.&#10;   @access protected" type="\SimpleTag">
            <type by_reference="false">\SimpleTag</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="75" package="Default">
        <name>createInputTag</name>
        <full_name>createInputTag</full_name>
        <docblock line="69">
          <description>Factory for input tags.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Element attributes.&lt;/p&gt;</long-description>
          <tag line="69" name="return" description="Tag object.&#10;   @access protected" type="\SimpleTag">
            <type by_reference="false">\SimpleTag</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="102" package="Default">
        <name>keysToLowerCase</name>
        <full_name>keysToLowerCase</full_name>
        <docblock line="96">
          <description>Make the keys lower case for case insensitive look-ups.</description>
          <long-description>&lt;p&gt;@param hash $map   Hash to convert.&lt;/p&gt;</long-description>
          <tag line="96" name="return" description="Unchanged values, but keys lower case.&#10;   @access private" type="\hash">
            <type by_reference="false">\hash</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$map</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="116" package="Default">
      <extends/>
      <name>SimpleTag</name>
      <full_name>\SimpleTag</full_name>
      <docblock line="111">
        <description>HTML or XML tag.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="111" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="117" namespace="global" package="Default">
        <name>$name</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="118" namespace="global" package="Default">
        <name>$attributes</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="119" namespace="global" package="Default">
        <name>$content</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="129" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="121">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param string $name        Tag name.&lt;/p&gt;</long-description>
          <tag line="121" name="param" description="Attribute names and string values. Note that the keys must have been converted to lower case." type="\hash" variable="$attributes">
            <type by_reference="false">\hash</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="129">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="141" package="Default">
        <name>expectEndTag</name>
        <full_name>expectEndTag</full_name>
        <docblock line="135">
          <description>Check to see if the tag can have both start and
   end tags with content in between.</description>
          <long-description>&lt;p&gt;@return boolean        True if content allowed.&lt;/p&gt;</long-description>
          <tag line="135" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="Default">
        <name>isPrivateContent</name>
        <full_name>isPrivateContent</full_name>
        <docblock line="145">
          <description>The current tag should not swallow all content for
   itself as it's searchable page content.</description>
          <long-description>&lt;p&gt;Private
   content tags are usually widgets that contain default
   values.&lt;/p&gt;</long-description>
          <tag line="145" name="return" description="False as content is available&#10;                          to other tags by default.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="163" package="Default">
        <name>addContent</name>
        <full_name>addContent</full_name>
        <docblock line="158">
          <description>Appends string content to the current content.</description>
          <long-description>&lt;p&gt;@param string $content        Additional text.&lt;/p&gt;</long-description>
          <tag line="158" name="access" description="public"/>
        </docblock>
        <argument line="163">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="173" package="Default">
        <name>addTag</name>
        <full_name>addTag</full_name>
        <docblock line="168">
          <description>Adds an enclosed tag to the content.</description>
          <long-description>&lt;p&gt;@param SimpleTag $tag    New tag.&lt;/p&gt;</long-description>
          <tag line="168" name="access" description="public"/>
        </docblock>
        <argument line="173">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="180" package="Default">
        <name>addTags</name>
        <full_name>addTags</full_name>
        <docblock line="176">
          <description>Adds multiple enclosed tags to the content.</description>
          <long-description>&lt;p&gt;@param array            List of SimpleTag objects to be added.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="180">
          <name>$tags</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="191" package="Default">
        <name>getTagName</name>
        <full_name>getTagName</full_name>
        <docblock line="186">
          <description>Accessor for tag name.</description>
          <long-description>&lt;p&gt;@return string       Name of tag.&lt;/p&gt;</long-description>
          <tag line="186" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="200" package="Default">
        <name>getChildElements</name>
        <full_name>getChildElements</full_name>
        <docblock line="195">
          <description>List of legal child elements.</description>
          <long-description>&lt;p&gt;@return array        List of element names.&lt;/p&gt;</long-description>
          <tag line="195" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="210" package="Default">
        <name>getAttribute</name>
        <full_name>getAttribute</full_name>
        <docblock line="204">
          <description>Accessor for an attribute.</description>
          <long-description>&lt;p&gt;@param string $label    Attribute name.&lt;/p&gt;</long-description>
          <tag line="204" name="return" description="Attribute value.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="210">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="224" package="Default">
        <name>setAttribute</name>
        <full_name>setAttribute</full_name>
        <docblock line="218">
          <description>Sets an attribute.</description>
          <long-description>&lt;p&gt;@param string $label    Attribute name.&lt;/p&gt;</long-description>
          <tag line="218" name="return" description="$value   New attribute value.&#10;   @access protected" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="224">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="224">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="233" package="Default">
        <name>getContent</name>
        <full_name>getContent</full_name>
        <docblock line="228">
          <description>Accessor for the whole content so far.</description>
          <long-description>&lt;p&gt;@return string       Content as big raw string.&lt;/p&gt;</long-description>
          <tag line="228" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="244" package="Default">
        <name>getText</name>
        <full_name>getText</full_name>
        <docblock line="237">
          <description>Accessor for content reduced to visible text.</description>
          <long-description>&lt;p&gt;Acts
   like a text mode browser, normalising space and
   reducing images to their alt text.&lt;/p&gt;</long-description>
          <tag line="237" name="return" description="Content as plain text.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="254" package="Default">
        <name>isId</name>
        <full_name>isId</full_name>
        <docblock line="248">
          <description>Test to see if id attribute matches.</description>
          <long-description>&lt;p&gt;@param string $id        ID to test against.&lt;/p&gt;</long-description>
          <tag line="248" name="return" description="True on match.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="254">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="264" package="Default">
      <extends>\SimpleTag</extends>
      <name>SimpleBaseTag</name>
      <full_name>\SimpleBaseTag</full_name>
      <docblock line="259">
        <description>Base url.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="259" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="271" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="266">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="271">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="280" package="Default">
        <name>expectEndTag</name>
        <full_name>expectEndTag</full_name>
        <docblock line="275">
          <description>Base tag is not a block tag.</description>
          <long-description>&lt;p&gt;@return boolean       false&lt;/p&gt;</long-description>
          <tag line="275" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="290" package="Default">
      <extends>\SimpleTag</extends>
      <name>SimpleTitleTag</name>
      <full_name>\SimpleTitleTag</full_name>
      <docblock line="285">
        <description>Page title.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="285" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="297" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="292">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="297">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="307" package="Default">
      <extends>\SimpleTag</extends>
      <name>SimpleAnchorTag</name>
      <full_name>\SimpleAnchorTag</full_name>
      <docblock line="302">
        <description>Link.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="302" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="314" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="309">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="314">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="323" package="Default">
        <name>getHref</name>
        <full_name>getHref</full_name>
        <docblock line="318">
          <description>Accessor for URL as string.</description>
          <long-description>&lt;p&gt;@return string    Coerced as string.&lt;/p&gt;</long-description>
          <tag line="318" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="337" package="Default">
      <extends>\SimpleTag</extends>
      <name>SimpleWidget</name>
      <full_name>\SimpleWidget</full_name>
      <docblock line="332">
        <description>Form element.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="332" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="338" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="339" namespace="global" package="Default">
        <name>$label</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="340" namespace="global" package="Default">
        <name>$is_set</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="348" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="342">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param string $name        Tag name.&lt;/p&gt;</long-description>
          <tag line="342" name="param" description="Attribute names and string values." type="\hash" variable="$attributes">
            <type by_reference="false">\hash</type>
          </tag>
        </docblock>
        <argument line="348">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="348">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="361" package="Default">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="355">
          <description>Accessor for name submitted as the key in
   GET/POST privateiables hash.</description>
          <long-description>&lt;p&gt;@return string        Parsed value.&lt;/p&gt;</long-description>
          <tag line="355" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="370" package="Default">
        <name>getDefault</name>
        <full_name>getDefault</full_name>
        <docblock line="365">
          <description>Accessor for default value parsed with the tag.</description>
          <long-description>&lt;p&gt;@return string        Parsed value.&lt;/p&gt;</long-description>
          <tag line="365" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="381" package="Default">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="374">
          <description>Accessor for currently set value or default if
   none.</description>
          <long-description>&lt;p&gt;@return string      Value set by form or default
                       if none.&lt;/p&gt;</long-description>
          <tag line="374" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="394" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="388">
          <description>Sets the current form element value.</description>
          <long-description>&lt;p&gt;@param string $value       New value.&lt;/p&gt;</long-description>
          <tag line="388" name="return" description="True if allowed.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="394">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="405" package="Default">
        <name>resetValue</name>
        <full_name>resetValue</full_name>
        <docblock line="400">
          <description>Resets the form element value back to the
   default.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="415" package="Default">
        <name>setLabel</name>
        <full_name>setLabel</full_name>
        <docblock line="409">
          <description>Allows setting of a label externally, say by a
   label tag.</description>
          <long-description>&lt;p&gt;@param string $label    Label to attach.&lt;/p&gt;</long-description>
          <tag line="409" name="access" description="public"/>
        </docblock>
        <argument line="415">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="426" package="Default">
        <name>isLabel</name>
        <full_name>isLabel</full_name>
        <docblock line="420">
          <description>Reads external or internal label.</description>
          <long-description>&lt;p&gt;@param string $label    Label to test.&lt;/p&gt;</long-description>
          <tag line="420" name="return" description="True is match.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="426">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="435" package="Default">
        <name>write</name>
        <full_name>write</full_name>
        <docblock line="430">
          <description>Dispatches the value into the form encoded packet.</description>
          <long-description>&lt;p&gt;@param SimpleEncoding $encoding    Form packet.&lt;/p&gt;</long-description>
          <tag line="430" name="access" description="public"/>
        </docblock>
        <argument line="435">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="447" package="Default">
      <extends>\SimpleWidget</extends>
      <name>SimpleTextTag</name>
      <full_name>\SimpleTextTag</full_name>
      <docblock line="442">
        <description>Text, password and hidden field.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="442" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="454" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="449">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="454">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="466" package="Default">
        <name>expectEndTag</name>
        <full_name>expectEndTag</full_name>
        <docblock line="461">
          <description>Tag contains no content.</description>
          <long-description>&lt;p&gt;@return boolean        False.&lt;/p&gt;</long-description>
          <tag line="461" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="477" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="470">
          <description>Sets the current form element value.</description>
          <long-description>&lt;p&gt;Cannot
   change the value of a hidden field.&lt;/p&gt;</long-description>
          <tag line="470" name="param" description="New value. @return boolean True if allowed. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="477">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="490" package="Default">
      <extends>\SimpleWidget</extends>
      <name>SimpleSubmitTag</name>
      <full_name>\SimpleSubmitTag</full_name>
      <docblock line="485">
        <description>Submit button as input tag.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="485" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="497" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="492">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="497">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="509" package="Default">
        <name>expectEndTag</name>
        <full_name>expectEndTag</full_name>
        <docblock line="504">
          <description>Tag contains no end element.</description>
          <long-description>&lt;p&gt;@return boolean        False.&lt;/p&gt;</long-description>
          <tag line="504" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="519" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="513">
          <description>Disables the setting of the button value.</description>
          <long-description>&lt;p&gt;@param string $value       Ignored.&lt;/p&gt;</long-description>
          <tag line="513" name="return" description="True if allowed.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="519">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="528" package="Default">
        <name>getLabel</name>
        <full_name>getLabel</full_name>
        <docblock line="523">
          <description>Value of browser visible text.</description>
          <long-description>&lt;p&gt;@return string        Visible label.&lt;/p&gt;</long-description>
          <tag line="523" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="538" package="Default">
        <name>isLabel</name>
        <full_name>isLabel</full_name>
        <docblock line="532">
          <description>Test for a label match when searching.</description>
          <long-description>&lt;p&gt;@param string $label     Label to test.&lt;/p&gt;</long-description>
          <tag line="532" name="return" description="True on match.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="538">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="548" package="Default">
      <extends>\SimpleWidget</extends>
      <name>SimpleImageSubmitTag</name>
      <full_name>\SimpleImageSubmitTag</full_name>
      <docblock line="543">
        <description>Image button as input tag.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="543" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="555" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="550">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="555">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="564" package="Default">
        <name>expectEndTag</name>
        <full_name>expectEndTag</full_name>
        <docblock line="559">
          <description>Tag contains no end element.</description>
          <long-description>&lt;p&gt;@return boolean        False.&lt;/p&gt;</long-description>
          <tag line="559" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="574" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="568">
          <description>Disables the setting of the button value.</description>
          <long-description>&lt;p&gt;@param string $value       Ignored.&lt;/p&gt;</long-description>
          <tag line="568" name="return" description="True if allowed.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="574">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="583" package="Default">
        <name>getLabel</name>
        <full_name>getLabel</full_name>
        <docblock line="578">
          <description>Value of browser visible text.</description>
          <long-description>&lt;p&gt;@return string        Visible label.&lt;/p&gt;</long-description>
          <tag line="578" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="596" package="Default">
        <name>isLabel</name>
        <full_name>isLabel</full_name>
        <docblock line="590">
          <description>Test for a label match when searching.</description>
          <long-description>&lt;p&gt;@param string $label     Label to test.&lt;/p&gt;</long-description>
          <tag line="590" name="return" description="True on match.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="596">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="607" package="Default">
        <name>write</name>
        <full_name>write</full_name>
        <docblock line="600">
          <description>Dispatches the value into the form encoded packet.</description>
          <long-description>&lt;p&gt;@param SimpleEncoding $encoding    Form packet.&lt;/p&gt;</long-description>
          <tag line="600" name="param" description="X coordinate of click. @param integer $y Y coordinate of click. @access public" type="integer" variable="$x">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="607">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
        <argument line="607">
          <name>$x</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="607">
          <name>$y</name>
          <default>1</default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="623" package="Default">
      <extends>\SimpleWidget</extends>
      <name>SimpleButtonTag</name>
      <full_name>\SimpleButtonTag</full_name>
      <docblock line="618">
        <description>Submit button as button tag.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="618" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="631" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="625">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;Defaults are very browser dependent.&lt;/p&gt;</long-description>
          <tag line="625" name="param" description="Attribute names and string values." type="\hash" variable="$attributes">
            <type by_reference="false">\hash</type>
          </tag>
        </docblock>
        <argument line="631">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="641" package="Default">
        <name>expectEndTag</name>
        <full_name>expectEndTag</full_name>
        <docblock line="635">
          <description>Check to see if the tag can have both start and
   end tags with content in between.</description>
          <long-description>&lt;p&gt;@return boolean        True if content allowed.&lt;/p&gt;</long-description>
          <tag line="635" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="651" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="645">
          <description>Disables the setting of the button value.</description>
          <long-description>&lt;p&gt;@param string $value       Ignored.&lt;/p&gt;</long-description>
          <tag line="645" name="return" description="True if allowed.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="651">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="660" package="Default">
        <name>getLabel</name>
        <full_name>getLabel</full_name>
        <docblock line="655">
          <description>Value of browser visible text.</description>
          <long-description>&lt;p&gt;@return string        Visible label.&lt;/p&gt;</long-description>
          <tag line="655" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="670" package="Default">
        <name>isLabel</name>
        <full_name>isLabel</full_name>
        <docblock line="664">
          <description>Test for a label match when searching.</description>
          <long-description>&lt;p&gt;@param string $label     Label to test.&lt;/p&gt;</long-description>
          <tag line="664" name="return" description="True on match.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="670">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="680" package="Default">
      <extends>\SimpleWidget</extends>
      <name>SimpleTextAreaTag</name>
      <full_name>\SimpleTextAreaTag</full_name>
      <docblock line="675">
        <description>Content tag for text area.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="675" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="687" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="682">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="687">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="696" package="Default">
        <name>getDefault</name>
        <full_name>getDefault</full_name>
        <docblock line="691">
          <description>Accessor for starting value.</description>
          <long-description>&lt;p&gt;@return string        Parsed value.&lt;/p&gt;</long-description>
          <tag line="691" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="706" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="700">
          <description>Applies word wrapping if needed.</description>
          <long-description>&lt;p&gt;@param string $value      New value.&lt;/p&gt;</long-description>
          <tag line="700" name="return" description="True if allowed.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="706">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="715" package="Default">
        <name>wrapIsEnabled</name>
        <full_name>wrapIsEnabled</full_name>
        <docblock line="710">
          <description>Test to see if text should be wrapped.</description>
          <long-description>&lt;p&gt;@return boolean        True if wrapping on.&lt;/p&gt;</long-description>
          <tag line="710" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="735" package="Default">
        <name>wrap</name>
        <full_name>wrap</full_name>
        <docblock line="725">
          <description>Performs the formatting that is peculiar to
   this tag.</description>
          <long-description>&lt;p&gt;There is strange behaviour in this
   one, including stripping a leading new line.
   Go figure. I am using Firefox as a guide.&lt;/p&gt;</long-description>
          <tag line="725" name="param" description="Text to wrap. @return string Text wrapped with carriage returns and line feeds @access private" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="735">
          <name>$text</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="755" package="Default">
        <name>isPrivateContent</name>
        <full_name>isPrivateContent</full_name>
        <docblock line="750">
          <description>The content of textarea is not part of the page.</description>
          <long-description>&lt;p&gt;@return boolean        True.&lt;/p&gt;</long-description>
          <tag line="750" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="765" package="Default">
      <extends>\SimpleWidget</extends>
      <name>SimpleUploadTag</name>
      <full_name>\SimpleUploadTag</full_name>
      <docblock line="760">
        <description>File upload widget.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="760" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="772" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="767">
          <description>Starts with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="772">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="781" package="Default">
        <name>expectEndTag</name>
        <full_name>expectEndTag</full_name>
        <docblock line="776">
          <description>Tag contains no content.</description>
          <long-description>&lt;p&gt;@return boolean        False.&lt;/p&gt;</long-description>
          <tag line="776" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="790" package="Default">
        <name>write</name>
        <full_name>write</full_name>
        <docblock line="785">
          <description>Dispatches the value into the form encoded packet.</description>
          <long-description>&lt;p&gt;@param SimpleEncoding $encoding    Form packet.&lt;/p&gt;</long-description>
          <tag line="785" name="access" description="public"/>
        </docblock>
        <argument line="790">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="806" package="Default">
      <extends>\SimpleWidget</extends>
      <name>SimpleSelectionTag</name>
      <full_name>\SimpleSelectionTag</full_name>
      <docblock line="801">
        <description>Drop down widget.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="801" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="807" namespace="global" package="Default">
        <name>$options</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="808" namespace="global" package="Default">
        <name>$choice</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="815" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="810">
          <description>Starts with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="815">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="826" package="Default">
        <name>addTag</name>
        <full_name>addTag</full_name>
        <docblock line="821">
          <description>Adds an option tag to a selection field.</description>
          <long-description>&lt;p&gt;@param SimpleOptionTag $tag     New option.&lt;/p&gt;</long-description>
          <tag line="821" name="access" description="public"/>
        </docblock>
        <argument line="826">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="837" package="Default">
        <name>addContent</name>
        <full_name>addContent</full_name>
        <docblock line="832">
          <description>Text within the selection element is ignored.</description>
          <long-description>&lt;p&gt;@param string $content        Ignored.&lt;/p&gt;</long-description>
          <tag line="832" name="access" description="public"/>
        </docblock>
        <argument line="837">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="847" package="Default">
        <name>getDefault</name>
        <full_name>getDefault</full_name>
        <docblock line="841">
          <description>Scans options for defaults.</description>
          <long-description>&lt;p&gt;If none, then
   the first option is selected.&lt;/p&gt;</long-description>
          <tag line="841" name="return" description="Selected field.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="865" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="859">
          <description>Can only set allowed values.</description>
          <long-description>&lt;p&gt;@param string $value       New choice.&lt;/p&gt;</long-description>
          <tag line="859" name="return" description="True if allowed.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="865">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="881" package="Default">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="875">
          <description>Accessor for current selection value.</description>
          <long-description>&lt;p&gt;@return string      Value attribute or
                       content of opton.&lt;/p&gt;</long-description>
          <tag line="875" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="894" package="Default">
      <extends>\SimpleWidget</extends>
      <name>MultipleSelectionTag</name>
      <full_name>\MultipleSelectionTag</full_name>
      <docblock line="889">
        <description>Drop down widget.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="889" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="895" namespace="global" package="Default">
        <name>$options</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="896" namespace="global" package="Default">
        <name>$values</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="903" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="898">
          <description>Starts with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="903">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="914" package="Default">
        <name>addTag</name>
        <full_name>addTag</full_name>
        <docblock line="909">
          <description>Adds an option tag to a selection field.</description>
          <long-description>&lt;p&gt;@param SimpleOptionTag $tag     New option.&lt;/p&gt;</long-description>
          <tag line="909" name="access" description="public"/>
        </docblock>
        <argument line="914">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="925" package="Default">
        <name>addContent</name>
        <full_name>addContent</full_name>
        <docblock line="920">
          <description>Text within the selection element is ignored.</description>
          <long-description>&lt;p&gt;@param string $content        Ignored.&lt;/p&gt;</long-description>
          <tag line="920" name="access" description="public"/>
        </docblock>
        <argument line="925">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="935" package="Default">
        <name>getDefault</name>
        <full_name>getDefault</full_name>
        <docblock line="929">
          <description>Scans options for defaults to populate the
   value array().</description>
          <long-description>&lt;p&gt;@return array        Selected fields.&lt;/p&gt;</long-description>
          <tag line="929" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="953" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="945">
          <description>Can only set allowed values.</description>
          <long-description>&lt;p&gt;Any illegal value
   will result in a failure, but all correct values
   will be set.&lt;/p&gt;</long-description>
          <tag line="945" name="param" description="New choices. @return boolean True if all allowed. @access public" type="array" variable="$desired">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="953">
          <name>$desired</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="977" package="Default">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="972">
          <description>Accessor for current selection value.</description>
          <long-description>&lt;p&gt;@return array      List of currently set options.&lt;/p&gt;</long-description>
          <tag line="972" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="990" package="Default">
      <extends>\SimpleWidget</extends>
      <name>SimpleOptionTag</name>
      <full_name>\SimpleOptionTag</full_name>
      <docblock line="985">
        <description>Option for selection field.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="985" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="995" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="992">
          <description>Stashes the attributes.</description>
          <long-description></long-description>
        </docblock>
        <argument line="995">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1005" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="999">
          <description>Does nothing.</description>
          <long-description>&lt;p&gt;@param string $value      Ignored.&lt;/p&gt;</long-description>
          <tag line="999" name="return" description="Not allowed.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1005">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1015" package="Default">
        <name>isValue</name>
        <full_name>isValue</full_name>
        <docblock line="1009">
          <description>Test to see if a value matches the option.</description>
          <long-description>&lt;p&gt;@param string $compare    Value to compare with.&lt;/p&gt;</long-description>
          <tag line="1009" name="return" description="True if possible match.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1015">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1029" package="Default">
        <name>getDefault</name>
        <full_name>getDefault</full_name>
        <docblock line="1023">
          <description>Accessor for starting value.</description>
          <long-description>&lt;p&gt;Will be set to
   the option label if no value exists.&lt;/p&gt;</long-description>
          <tag line="1023" name="return" description="Parsed value.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1041" package="Default">
        <name>isPrivateContent</name>
        <full_name>isPrivateContent</full_name>
        <docblock line="1036">
          <description>The content of options is not part of the page.</description>
          <long-description>&lt;p&gt;@return boolean        True.&lt;/p&gt;</long-description>
          <tag line="1036" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1051" package="Default">
      <extends>\SimpleWidget</extends>
      <name>SimpleRadioButtonTag</name>
      <full_name>\SimpleRadioButtonTag</full_name>
      <docblock line="1046">
        <description>Radio button.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="1046" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1057" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="1053">
          <description>Stashes the attributes.</description>
          <long-description>&lt;p&gt;@param array $attributes        Hash of attributes.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="1057">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1069" package="Default">
        <name>expectEndTag</name>
        <full_name>expectEndTag</full_name>
        <docblock line="1064">
          <description>Tag contains no content.</description>
          <long-description>&lt;p&gt;@return boolean        False.&lt;/p&gt;</long-description>
          <tag line="1064" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1080" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="1073">
          <description>The only allowed value sn the one in the
   "value" attribute.</description>
          <long-description>&lt;p&gt;@param string $value      New value.&lt;/p&gt;</long-description>
          <tag line="1073" name="return" description="True if allowed.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1080">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1095" package="Default">
        <name>getDefault</name>
        <full_name>getDefault</full_name>
        <docblock line="1090">
          <description>Accessor for starting value.</description>
          <long-description>&lt;p&gt;@return string        Parsed value.&lt;/p&gt;</long-description>
          <tag line="1090" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1108" package="Default">
      <extends>\SimpleWidget</extends>
      <name>SimpleCheckboxTag</name>
      <full_name>\SimpleCheckboxTag</full_name>
      <docblock line="1103">
        <description>Checkbox widget.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="1103" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1115" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="1110">
          <description>Starts with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="1115">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1127" package="Default">
        <name>expectEndTag</name>
        <full_name>expectEndTag</full_name>
        <docblock line="1122">
          <description>Tag contains no content.</description>
          <long-description>&lt;p&gt;@return boolean        False.&lt;/p&gt;</long-description>
          <tag line="1122" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1140" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="1131">
          <description>The only allowed value in the one in the
   "value" attribute.</description>
          <long-description>&lt;p&gt;The default for this
   attribute is "on". If this widget is set to
   true, then the usual value will be taken.&lt;/p&gt;</long-description>
          <tag line="1131" name="param" description="New value. @return boolean True if allowed. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1140">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1159" package="Default">
        <name>getDefault</name>
        <full_name>getDefault</full_name>
        <docblock line="1153">
          <description>Accessor for starting value.</description>
          <long-description>&lt;p&gt;The default
   value is "on".&lt;/p&gt;</long-description>
          <tag line="1153" name="return" description="Parsed value.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1172" package="Default">
      <extends/>
      <name>SimpleTagGroup</name>
      <full_name>\SimpleTagGroup</full_name>
      <docblock line="1167">
        <description>A group of multiple widgets with some shared behaviour.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="1167" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="1173" namespace="global" package="Default">
        <name>$widgets</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1180" package="Default">
        <name>addWidget</name>
        <full_name>addWidget</full_name>
        <docblock line="1175">
          <description>Adds a tag to the group.</description>
          <long-description>&lt;p&gt;@param SimpleWidget $widget&lt;/p&gt;</long-description>
          <tag line="1175" name="access" description="public"/>
        </docblock>
        <argument line="1180">
          <name>$widget</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1189" package="Default">
        <name>getWidgets</name>
        <full_name>getWidgets</full_name>
        <docblock line="1184">
          <description>Accessor to widget set.</description>
          <long-description>&lt;p&gt;@return array        All widgets.&lt;/p&gt;</long-description>
          <tag line="1184" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1199" package="Default">
        <name>getAttribute</name>
        <full_name>getAttribute</full_name>
        <docblock line="1193">
          <description>Accessor for an attribute.</description>
          <long-description>&lt;p&gt;@param string $label    Attribute name.&lt;/p&gt;</long-description>
          <tag line="1193" name="return" description="Always false.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1199">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1209" package="Default">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="1203">
          <description>Fetches the name for the widget from the first
   member.</description>
          <long-description>&lt;p&gt;@return string        Name of widget.&lt;/p&gt;</long-description>
          <tag line="1203" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1222" package="Default">
        <name>isId</name>
        <full_name>isId</full_name>
        <docblock line="1215">
          <description>Scans the widgets for one with the appropriate
   ID field.</description>
          <long-description>&lt;p&gt;@param string $id        ID value to try.&lt;/p&gt;</long-description>
          <tag line="1215" name="return" description="True if matched.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1222">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1238" package="Default">
        <name>isLabel</name>
        <full_name>isLabel</full_name>
        <docblock line="1231">
          <description>Scans the widgets for one with the appropriate
   attached label.</description>
          <long-description>&lt;p&gt;@param string $label     Attached label to try.&lt;/p&gt;</long-description>
          <tag line="1231" name="return" description="True if matched.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1238">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1252" package="Default">
        <name>write</name>
        <full_name>write</full_name>
        <docblock line="1247">
          <description>Dispatches the value into the form encoded packet.</description>
          <long-description>&lt;p&gt;@param SimpleEncoding $encoding    Form packet.&lt;/p&gt;</long-description>
          <tag line="1247" name="access" description="public"/>
        </docblock>
        <argument line="1252">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1262" package="Default">
      <extends>\SimpleTagGroup</extends>
      <name>SimpleCheckboxGroup</name>
      <full_name>\SimpleCheckboxGroup</full_name>
      <docblock line="1257">
        <description>A group of tags with the same name within a form.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="1257" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1270" package="Default">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="1264">
          <description>Accessor for current selected widget or false
   if none.</description>
          <long-description>&lt;p&gt;@return string/array     Widget values or false if none.&lt;/p&gt;</long-description>
          <tag line="1264" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1286" package="Default">
        <name>getDefault</name>
        <full_name>getDefault</full_name>
        <docblock line="1281">
          <description>Accessor for starting value that is active.</description>
          <long-description>&lt;p&gt;@return string/array      Widget values or false if none.&lt;/p&gt;</long-description>
          <tag line="1281" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1304" package="Default">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="1297">
          <description>Accessor for current set values.</description>
          <long-description>&lt;p&gt;@param string/array/boolean $values   Either a single string, a
                                         hash or false for nothing set.&lt;/p&gt;</long-description>
          <tag line="1297" name="return" description="True if all values can be set.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1304">
          <name>$values</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1329" package="Default">
        <name>valuesArePossible</name>
        <full_name>valuesArePossible</full_name>
        <docblock line="1321">
          <description>Tests to see if a possible value set is legal.</description>
          <long-description>&lt;p&gt;@param string/array/boolean $values   Either a single string, a
                                         hash or false for nothing set.&lt;/p&gt;</long-description>
          <tag line="1321" name="return" description="False if trying to set a&#10;                                         missing value.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1329">
          <name>$values</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1349" package="Default">
        <name>coerceValues</name>
        <full_name>coerceValues</full_name>
        <docblock line="1341">
          <description>Converts the output to an appropriate format.</description>
          <long-description>&lt;p&gt;This means
   that no values is false, a single value is just that
   value and only two or more are contained in an array.&lt;/p&gt;</long-description>
          <tag line="1341" name="param" description="List of values of widgets. @return string/array/boolean Expected format for a tag. @access private" type="array" variable="$values">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1349">
          <name>$values</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1368" package="Default">
        <name>makeArray</name>
        <full_name>makeArray</full_name>
        <docblock line="1359">
          <description>Converts false or string into array.</description>
          <long-description>&lt;p&gt;The opposite of
   the coercian method.&lt;/p&gt;</long-description>
          <tag line="1359" name="param" description="A single item is converted to a one item list. False gives an empty list. @return array List of values, possibly empty. @access private" type="\string/array/boolean" variable="$value">
            <type by_reference="false">\string/array/boolean</type>
          </tag>
        </docblock>
        <argument line="1368">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1385" package="SimpleTest&#10;   @subpackage WebTester">
      <extends>\SimpleTagGroup</extends>
      <name>SimpleRadioGroup</name>
      <full_name>\SimpleRadioGroup</full_name>
      <docblock line="1379">
        <description>A group of tags with the same name within a form.</description>
        <long-description>&lt;p&gt;Used for radio buttons.&lt;/p&gt;</long-description>
        <tag line="1379" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1395" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setValue</name>
        <full_name>setValue</full_name>
        <docblock line="1387">
          <description>Each tag is tried in turn until one is
   successfully set.</description>
          <long-description>&lt;p&gt;The others will be
   unchecked if successful.&lt;/p&gt;</long-description>
          <tag line="1387" name="param" description="New value. @return boolean True if any allowed. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1395">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1415" package="SimpleTest&#10;   @subpackage WebTester">
        <name>valueIsPossible</name>
        <full_name>valueIsPossible</full_name>
        <docblock line="1409">
          <description>Tests to see if a value is allowed.</description>
          <long-description>&lt;p&gt;@param string    Attempted value.&lt;/p&gt;</long-description>
          <tag line="1409" name="return" description="True if a valid value.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1415">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1432" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getValue</name>
        <full_name>getValue</full_name>
        <docblock line="1425">
          <description>Accessor for current selected widget or false
   if none.</description>
          <long-description>&lt;p&gt;@return string/boolean   Value attribute or
                            content of opton.&lt;/p&gt;</long-description>
          <tag line="1425" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1448" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getDefault</name>
        <full_name>getDefault</full_name>
        <docblock line="1442">
          <description>Accessor for starting value that is active.</description>
          <long-description>&lt;p&gt;@return string/boolean      Value of first checked
                               widget or false if none.&lt;/p&gt;</long-description>
          <tag line="1442" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1464" package="Default">
      <extends>\SimpleTag</extends>
      <name>SimpleLabelTag</name>
      <full_name>\SimpleLabelTag</full_name>
      <docblock line="1459">
        <description>Tag to keep track of labels.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="1459" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1471" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="1466">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="1471">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1480" package="Default">
        <name>getFor</name>
        <full_name>getFor</full_name>
        <docblock line="1475">
          <description>Access for the ID to attach the label to.</description>
          <long-description>&lt;p&gt;@return string        For attribute.&lt;/p&gt;</long-description>
          <tag line="1475" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1490" package="Default">
      <extends>\SimpleTag</extends>
      <name>SimpleFormTag</name>
      <full_name>\SimpleFormTag</full_name>
      <docblock line="1485">
        <description>Tag to aid parsing the form.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="1485" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1497" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="1492">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="1497">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1507" package="Default">
      <extends>\SimpleTag</extends>
      <name>SimpleFrameTag</name>
      <full_name>\SimpleFrameTag</full_name>
      <docblock line="1502">
        <description>Tag to aid parsing the frames in a page.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="1502" name="subpackage" description="WebTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1514" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="1509">
          <description>Starts with a named tag with attributes only.</description>
          <long-description>&lt;p&gt;@param hash $attributes    Attribute names and
                              string values.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="1514">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1523" package="Default">
        <name>expectEndTag</name>
        <full_name>expectEndTag</full_name>
        <docblock line="1518">
          <description>Tag contains no content.</description>
          <long-description>&lt;p&gt;@return boolean        False.&lt;/p&gt;</long-description>
          <tag line="1518" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/tag.php</error>
      <critical line="16" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="24" code="50015">Argument $attributes is missing from the Docblock of createTag()</error>
      <error line="56" code="50015">Argument $attributes is missing from the Docblock of createSelectionTag()</error>
      <error line="69" code="50015">Argument $attributes is missing from the Docblock of createInputTag()</error>
      <error line="96" code="50015">Argument $map is missing from the Docblock of keysToLowerCase()</error>
      <critical line="111" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="117" code="50018">No DocBlock was found for property $name</error>
      <error line="118" code="50018">No DocBlock was found for property $attributes</error>
      <error line="119" code="50018">No DocBlock was found for property $content</error>
      <error line="121" code="50014">Name of argument $name does not match with the DocBlock's name $attributes in __construct()</error>
      <error line="121" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <error line="158" code="50015">Argument $content is missing from the Docblock of addContent()</error>
      <error line="168" code="50015">Argument $tag is missing from the Docblock of addTag()</error>
      <error line="176" code="50015">Argument $tags is missing from the Docblock of addTags()</error>
      <error line="204" code="50015">Argument $label is missing from the Docblock of getAttribute()</error>
      <error line="218" code="50015">Argument $label is missing from the Docblock of setAttribute()</error>
      <error line="218" code="50015">Argument $value is missing from the Docblock of setAttribute()</error>
      <error line="248" code="50015">Argument $id is missing from the Docblock of isId()</error>
      <critical line="259" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="266" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <critical line="285" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="292" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <critical line="302" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="309" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <critical line="332" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="338" code="50018">No DocBlock was found for property $value</error>
      <error line="339" code="50018">No DocBlock was found for property $label</error>
      <error line="340" code="50018">No DocBlock was found for property $is_set</error>
      <error line="342" code="50014">Name of argument $name does not match with the DocBlock's name $attributes in __construct()</error>
      <error line="342" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <error line="388" code="50015">Argument $value is missing from the Docblock of setValue()</error>
      <error line="409" code="50015">Argument $label is missing from the Docblock of setLabel()</error>
      <error line="420" code="50015">Argument $label is missing from the Docblock of isLabel()</error>
      <error line="430" code="50015">Argument $encoding is missing from the Docblock of write()</error>
      <critical line="442" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="449" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <critical line="485" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="492" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <error line="513" code="50015">Argument $value is missing from the Docblock of setValue()</error>
      <error line="532" code="50015">Argument $label is missing from the Docblock of isLabel()</error>
      <critical line="543" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="550" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <error line="568" code="50015">Argument $value is missing from the Docblock of setValue()</error>
      <error line="590" code="50015">Argument $label is missing from the Docblock of isLabel()</error>
      <error line="600" code="50014">Name of argument $encoding does not match with the DocBlock's name $x in write()</error>
      <error line="600" code="50015">Argument $x is missing from the Docblock of write()</error>
      <error line="600" code="50015">Argument $y is missing from the Docblock of write()</error>
      <critical line="618" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="645" code="50015">Argument $value is missing from the Docblock of setValue()</error>
      <error line="664" code="50015">Argument $label is missing from the Docblock of isLabel()</error>
      <critical line="675" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="682" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <error line="700" code="50015">Argument $value is missing from the Docblock of setValue()</error>
      <critical line="760" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="767" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <error line="785" code="50015">Argument $encoding is missing from the Docblock of write()</error>
      <critical line="801" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="807" code="50018">No DocBlock was found for property $options</error>
      <error line="808" code="50018">No DocBlock was found for property $choice</error>
      <error line="810" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <error line="821" code="50015">Argument $tag is missing from the Docblock of addTag()</error>
      <error line="832" code="50015">Argument $content is missing from the Docblock of addContent()</error>
      <error line="859" code="50015">Argument $value is missing from the Docblock of setValue()</error>
      <critical line="889" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="895" code="50018">No DocBlock was found for property $options</error>
      <error line="896" code="50018">No DocBlock was found for property $values</error>
      <error line="898" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <error line="909" code="50015">Argument $tag is missing from the Docblock of addTag()</error>
      <error line="920" code="50015">Argument $content is missing from the Docblock of addContent()</error>
      <critical line="985" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="992" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <error line="999" code="50015">Argument $value is missing from the Docblock of setValue()</error>
      <error line="1009" code="50015">Argument $compare is missing from the Docblock of isValue()</error>
      <critical line="1046" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="1053" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <error line="1073" code="50015">Argument $value is missing from the Docblock of setValue()</error>
      <critical line="1103" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="1110" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <critical line="1167" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="1173" code="50018">No DocBlock was found for property $widgets</error>
      <error line="1175" code="50015">Argument $widget is missing from the Docblock of addWidget()</error>
      <error line="1193" code="50015">Argument $label is missing from the Docblock of getAttribute()</error>
      <error line="1215" code="50015">Argument $id is missing from the Docblock of isId()</error>
      <error line="1231" code="50015">Argument $label is missing from the Docblock of isLabel()</error>
      <error line="1247" code="50015">Argument $encoding is missing from the Docblock of write()</error>
      <critical line="1257" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="1297" code="50015">Argument $values is missing from the Docblock of setValue()</error>
      <error line="1321" code="50015">Argument $values is missing from the Docblock of valuesArePossible()</error>
      <error line="1409" code="50015">Argument $value is missing from the Docblock of valueIsPossible()</error>
      <critical line="1459" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="1466" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <critical line="1485" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="1492" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
      <critical line="1502" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="1509" code="50015">Argument $attributes is missing from the Docblock of __construct()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/acceptance_test.php" hash="c6ee8f8135e5cbf1c2d3da81dc6ea234" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="7" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="9" package="Default">
      <extends>\WebTestCase</extends>
      <name>SimpleTestAcceptanceTest</name>
      <full_name>\SimpleTestAcceptanceTest</full_name>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="10" package="Default">
        <name>samples</name>
        <full_name>samples</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="15" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfLiveBrowser</name>
      <full_name>\TestOfLiveBrowser</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="16" package="Default">
        <name>samples</name>
        <full_name>samples</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="20" package="Default">
        <name>testGet</name>
        <full_name>testGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>testPost</name>
        <full_name>testPost</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="Default">
        <name>testAbsoluteLinkFollowing</name>
        <full_name>testAbsoluteLinkFollowing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Default">
        <name>testRelativeEncodedLinkFollowing</name>
        <full_name>testRelativeEncodedLinkFollowing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="Default">
        <name>testRelativeLinkFollowing</name>
        <full_name>testRelativeLinkFollowing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="64" package="Default">
        <name>testUnifiedClickLinkClicking</name>
        <full_name>testUnifiedClickLinkClicking</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="72" package="Default">
        <name>testIdLinkFollowing</name>
        <full_name>testIdLinkFollowing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="Default">
        <name>testCookieReading</name>
        <full_name>testCookieReading</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="89" package="Default">
        <name>testSimpleSubmit</name>
        <full_name>testSimpleSubmit</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="98" package="Default">
        <name>testUnifiedClickCanSubmit</name>
        <full_name>testUnifiedClickCanSubmit</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="107" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfLocalFileBrowser</name>
      <full_name>\TestOfLocalFileBrowser</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="108" package="Default">
        <name>samples</name>
        <full_name>samples</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="Default">
        <name>testGet</name>
        <full_name>testGet</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="123" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfRequestMethods</name>
      <full_name>\TestOfRequestMethods</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="124" package="Default">
        <name>samples</name>
        <full_name>samples</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="128" package="Default">
        <name>testHeadRequest</name>
        <full_name>testHeadRequest</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="134" package="Default">
        <name>testGetRequest</name>
        <full_name>testGetRequest</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="140" package="Default">
        <name>testPostWithPlainEncoding</name>
        <full_name>testPostWithPlainEncoding</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="147" package="Default">
        <name>testPostWithXmlEncoding</name>
        <full_name>testPostWithXmlEncoding</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="Default">
        <name>testPutWithPlainEncoding</name>
        <full_name>testPutWithPlainEncoding</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="161" package="Default">
        <name>testPutWithXmlEncoding</name>
        <full_name>testPutWithXmlEncoding</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="168" package="Default">
        <name>testDeleteRequest</name>
        <full_name>testDeleteRequest</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="177" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestRadioFields</name>
      <full_name>\TestRadioFields</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="178" package="Default">
        <name>testSetFieldAsInteger</name>
        <full_name>testSetFieldAsInteger</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="185" package="Default">
        <name>testSetFieldAsString</name>
        <full_name>testSetFieldAsString</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="193" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfLiveFetching</name>
      <full_name>\TestOfLiveFetching</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="194" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="198" package="Default">
        <name>testFormWithArrayBasedInputs</name>
        <full_name>testFormWithArrayBasedInputs</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="206" package="Default">
        <name>testFormWithQuotedValues</name>
        <full_name>testFormWithQuotedValues</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="214" package="Default">
        <name>testGet</name>
        <full_name>testGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="227" package="Default">
        <name>testSlowGet</name>
        <full_name>testSlowGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="231" package="Default">
        <name>testTimedOutGet</name>
        <full_name>testTimedOutGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="237" package="Default">
        <name>testPost</name>
        <full_name>testPost</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="243" package="Default">
        <name>testGetWithData</name>
        <full_name>testGetWithData</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="249" package="Default">
        <name>testPostWithData</name>
        <full_name>testPostWithData</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="255" package="Default">
        <name>testPostWithRecursiveData</name>
        <full_name>testPostWithRecursiveData</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="277" package="Default">
        <name>testRelativeGet</name>
        <full_name>testRelativeGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="283" package="Default">
        <name>testRelativePost</name>
        <full_name>testRelativePost</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="290" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfLinkFollowing</name>
      <full_name>\TestOfLinkFollowing</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="291" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="295" package="Default">
        <name>testLinkAssertions</name>
        <full_name>testLinkAssertions</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="302" package="Default">
        <name>testAbsoluteLinkFollowing</name>
        <full_name>testAbsoluteLinkFollowing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="308" package="Default">
        <name>testRelativeLinkFollowing</name>
        <full_name>testRelativeLinkFollowing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="314" package="Default">
        <name>testLinkIdFollowing</name>
        <full_name>testLinkIdFollowing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="321" package="Default">
        <name>testAbsoluteUrlBehavesAbsolutely</name>
        <full_name>testAbsoluteUrlBehavesAbsolutely</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="327" package="Default">
        <name>testRelativeUrlRespectsBaseTag</name>
        <full_name>testRelativeUrlRespectsBaseTag</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="334" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfLivePageLinkingWithMinimalLinks</name>
      <full_name>\TestOfLivePageLinkingWithMinimalLinks</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="335" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="339" package="Default">
        <name>testClickToExplicitelyNamedSelfReturns</name>
        <full_name>testClickToExplicitelyNamedSelfReturns</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="348" package="Default">
        <name>testClickToMissingPageReturnsToSamePage</name>
        <full_name>testClickToMissingPageReturnsToSamePage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="355" package="Default">
        <name>testClickToBareActionReturnsToSamePage</name>
        <full_name>testClickToBareActionReturnsToSamePage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="362" package="Default">
        <name>testClickToSingleQuestionMarkReturnsToSamePage</name>
        <full_name>testClickToSingleQuestionMarkReturnsToSamePage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="368" package="Default">
        <name>testClickToEmptyStringReturnsToSamePage</name>
        <full_name>testClickToEmptyStringReturnsToSamePage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="374" package="Default">
        <name>testClickToSingleDotGoesToCurrentDirectory</name>
        <full_name>testClickToSingleDotGoesToCurrentDirectory</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="382" package="Default">
        <name>testClickBackADirectoryLevel</name>
        <full_name>testClickBackADirectoryLevel</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="389" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfLiveFrontControllerEmulation</name>
      <full_name>\TestOfLiveFrontControllerEmulation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="390" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="394" package="Default">
        <name>testJumpToNamedPage</name>
        <full_name>testJumpToNamedPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="402" package="Default">
        <name>testJumpToUnnamedPage</name>
        <full_name>testJumpToUnnamedPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="410" package="Default">
        <name>testJumpToUnnamedPageWithBareParameter</name>
        <full_name>testJumpToUnnamedPageWithBareParameter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="418" package="Default">
        <name>testJumpToUnnamedPageWithEmptyQuery</name>
        <full_name>testJumpToUnnamedPageWithEmptyQuery</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="426" package="Default">
        <name>testJumpToUnnamedPageWithEmptyLink</name>
        <full_name>testJumpToUnnamedPageWithEmptyLink</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="434" package="Default">
        <name>testJumpBackADirectoryLevel</name>
        <full_name>testJumpBackADirectoryLevel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="440" package="Default">
        <name>testSubmitToNamedPage</name>
        <full_name>testSubmitToNamedPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="448" package="Default">
        <name>testSubmitToSameDirectory</name>
        <full_name>testSubmitToSameDirectory</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="455" package="Default">
        <name>testSubmitToEmptyAction</name>
        <full_name>testSubmitToEmptyAction</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="462" package="Default">
        <name>testSubmitToNoAction</name>
        <full_name>testSubmitToNoAction</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="469" package="Default">
        <name>testSubmitBackADirectoryLevel</name>
        <full_name>testSubmitBackADirectoryLevel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="475" package="Default">
        <name>testSubmitToNamedPageWithMixedPostAndGet</name>
        <full_name>testSubmitToNamedPageWithMixedPostAndGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="483" package="Default">
        <name>testSubmitToSameDirectoryMixedPostAndGet</name>
        <full_name>testSubmitToSameDirectoryMixedPostAndGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="490" package="Default">
        <name>testSubmitToEmptyActionMixedPostAndGet</name>
        <full_name>testSubmitToEmptyActionMixedPostAndGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="497" package="Default">
        <name>testSubmitToNoActionMixedPostAndGet</name>
        <full_name>testSubmitToNoActionMixedPostAndGet</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="505" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfLiveHeaders</name>
      <full_name>\TestOfLiveHeaders</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="506" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="510" package="Default">
        <name>testConfirmingHeaderExistence</name>
        <full_name>testConfirmingHeaderExistence</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="519" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfLiveRedirects</name>
      <full_name>\TestOfLiveRedirects</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="520" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="524" package="Default">
        <name>testNoRedirects</name>
        <full_name>testNoRedirects</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="530" package="Default">
        <name>testRedirects</name>
        <full_name>testRedirects</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="536" package="Default">
        <name>testRedirectLosesGetData</name>
        <full_name>testRedirectLosesGetData</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="541" package="Default">
        <name>testRedirectKeepsExtraRequestDataOfItsOwn</name>
        <full_name>testRedirectKeepsExtraRequestDataOfItsOwn</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="546" package="Default">
        <name>testRedirectLosesPostData</name>
        <full_name>testRedirectLosesPostData</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="552" package="Default">
        <name>testRedirectWithBaseUrlChange</name>
        <full_name>testRedirectWithBaseUrlChange</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="559" package="Default">
        <name>testRedirectWithDoubleBaseUrlChange</name>
        <full_name>testRedirectWithDoubleBaseUrlChange</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="565" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfLiveCookies</name>
      <full_name>\TestOfLiveCookies</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="566" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="570" package="Default">
        <name>here</name>
        <full_name>here</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="574" package="Default">
        <name>thisHost</name>
        <full_name>thisHost</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="579" package="Default">
        <name>thisPath</name>
        <full_name>thisPath</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="584" package="Default">
        <name>testCookieSettingAndAssertions</name>
        <full_name>testCookieSettingAndAssertions</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="597" package="Default">
        <name>testNoCookieSetWhenCookiesDisabled</name>
        <full_name>testNoCookieSetWhenCookiesDisabled</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="604" package="Default">
        <name>testCookieReading</name>
        <full_name>testCookieReading</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="611" package="Default">
        <name>testNoCookie</name>
        <full_name>testNoCookie</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="615" package="Default">
        <name>testNoCookieReadingWhenCookiesDisabled</name>
        <full_name>testNoCookieReadingWhenCookiesDisabled</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="623" package="Default">
        <name>testCookiePatternAssertions</name>
        <full_name>testCookiePatternAssertions</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="628" package="Default">
        <name>testTemporaryCookieExpiry</name>
        <full_name>testTemporaryCookieExpiry</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="635" package="Default">
        <name>testTimedCookieExpiryWith100SecondMargin</name>
        <full_name>testTimedCookieExpiryWith100SecondMargin</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="644" package="Default">
        <name>testNoClockOverDriftBy100Seconds</name>
        <full_name>testNoClockOverDriftBy100Seconds</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="652" package="Default">
        <name>testNoClockUnderDriftBy100Seconds</name>
        <full_name>testNoClockUnderDriftBy100Seconds</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="661" package="Default">
        <name>testCookiePath</name>
        <full_name>testCookiePath</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="670" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>LiveTestOfForms</name>
      <full_name>\LiveTestOfForms</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="671" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="675" package="Default">
        <name>testSimpleSubmit</name>
        <full_name>testSimpleSubmit</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="682" package="Default">
        <name>testDefaultFormValues</name>
        <full_name>testDefaultFormValues</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="706" package="Default">
        <name>testFormSubmissionByButtonLabel</name>
        <full_name>testFormSubmissionByButtonLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="726" package="Default">
        <name>testAdditionalFormValues</name>
        <full_name>testAdditionalFormValues</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="733" package="Default">
        <name>testFormSubmissionByName</name>
        <full_name>testFormSubmissionByName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="740" package="Default">
        <name>testFormSubmissionByNameAndAdditionalParameters</name>
        <full_name>testFormSubmissionByNameAndAdditionalParameters</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="747" package="Default">
        <name>testFormSubmissionBySubmitButtonLabeledSubmit</name>
        <full_name>testFormSubmissionBySubmitButtonLabeledSubmit</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="753" package="Default">
        <name>testFormSubmissionWithIds</name>
        <full_name>testFormSubmissionWithIds</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="783" package="Default">
        <name>testFormSubmissionWithIdsAndAdditionnalData</name>
        <full_name>testFormSubmissionWithIdsAndAdditionnalData</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="789" package="Default">
        <name>testFormSubmissionWithLabels</name>
        <full_name>testFormSubmissionWithLabels</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="819" package="Default">
        <name>testSettingCheckboxWithBooleanTrueSetsUnderlyingValue</name>
        <full_name>testSettingCheckboxWithBooleanTrueSetsUnderlyingValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="827" package="Default">
        <name>testFormSubmissionWithMixedPostAndGet</name>
        <full_name>testFormSubmissionWithMixedPostAndGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="836" package="Default">
        <name>testFormSubmissionWithMixedPostAndEncodedGet</name>
        <full_name>testFormSubmissionWithMixedPostAndEncodedGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="845" package="Default">
        <name>testFormSubmissionWithoutAction</name>
        <full_name>testFormSubmissionWithoutAction</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="853" package="Default">
        <name>testImageSubmissionByLabel</name>
        <full_name>testImageSubmissionByLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="861" package="Default">
        <name>testImageSubmissionByLabelWithAdditionalParameters</name>
        <full_name>testImageSubmissionByLabelWithAdditionalParameters</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="867" package="Default">
        <name>testImageSubmissionByName</name>
        <full_name>testImageSubmissionByName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="874" package="Default">
        <name>testImageSubmissionById</name>
        <full_name>testImageSubmissionById</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="881" package="Default">
        <name>testButtonSubmissionByLabel</name>
        <full_name>testButtonSubmissionByLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="887" package="Default">
        <name>testNamelessSubmitSendsNoValue</name>
        <full_name>testNamelessSubmitSendsNoValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="894" package="Default">
        <name>testNamelessImageSendsXAndYValues</name>
        <full_name>testNamelessImageSendsXAndYValues</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="902" package="Default">
        <name>testNamelessButtonSendsNoValue</name>
        <full_name>testNamelessButtonSendsNoValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="908" package="Default">
        <name>testSelfSubmit</name>
        <full_name>testSelfSubmit</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="918" package="Default">
        <name>testSelfSubmitWithParameters</name>
        <full_name>testSelfSubmitWithParameters</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="925" package="Default">
        <name>testSettingOfBlankOption</name>
        <full_name>testSettingOfBlankOption</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="932" package="Default">
        <name>testAssertingFieldValueWithPattern</name>
        <full_name>testAssertingFieldValueWithPattern</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="938" package="Default">
        <name>testSendingMultipartFormDataEncodedForm</name>
        <full_name>testSendingMultipartFormDataEncodedForm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="968" package="Default">
        <name>testSettingVariousBlanksInFields</name>
        <full_name>testSettingVariousBlanksInFields</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="996" package="Default">
        <name>testDefaultValueOfTextareaHasNewlinesAndWhitespacePreserved</name>
        <full_name>testDefaultValueOfTextareaHasNewlinesAndWhitespacePreserved</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1001" package="Default">
        <name>chars</name>
        <full_name>chars</full_name>
        <argument line="1001">
          <name>$t</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1007" package="Default">
        <name>testSubmissionOfBlankFields</name>
        <full_name>testSubmissionOfBlankFields</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1020" package="Default">
        <name>testDefaultValueOfTextareaHasNewlinesAndWhitespacePreservedOnSubmission</name>
        <full_name>testDefaultValueOfTextareaHasNewlinesAndWhitespacePreservedOnSubmission</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1026" package="Default">
        <name>testSubmissionOfEmptyValues</name>
        <full_name>testSubmissionOfEmptyValues</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1037" package="Default">
        <name>testSubmissionOfZeroes</name>
        <full_name>testSubmissionOfZeroes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1051" package="Default">
        <name>testSubmissionOfQuestionMarks</name>
        <full_name>testSubmissionOfQuestionMarks</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1065" package="Default">
        <name>testSubmissionOfHtmlEncodedValues</name>
        <full_name>testSubmissionOfHtmlEncodedValues</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1082" package="Default">
        <name>testFormActionRespectsBaseTag</name>
        <full_name>testFormActionRespectsBaseTag</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1090" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfLiveMultiValueWidgets</name>
      <full_name>\TestOfLiveMultiValueWidgets</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1091" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1095" package="Default">
        <name>testDefaultFormValueSubmission</name>
        <full_name>testDefaultFormValueSubmission</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1110" package="Default">
        <name>testSubmittingMultipleValues</name>
        <full_name>testSubmittingMultipleValues</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1131" package="Default">
        <name>testSettingByOptionValue</name>
        <full_name>testSettingByOptionValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1139" package="Default">
        <name>testSubmittingMultipleValuesByLabel</name>
        <full_name>testSubmittingMultipleValuesByLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1151" package="Default">
        <name>testSavantStyleHiddenFieldDefaults</name>
        <full_name>testSavantStyleHiddenFieldDefaults</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1160" package="Default">
        <name>testSavantStyleHiddenDefaultsAreOverridden</name>
        <full_name>testSavantStyleHiddenDefaultsAreOverridden</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1169" package="Default">
        <name>testSavantStyleFormSettingById</name>
        <full_name>testSavantStyleFormSettingById</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1181" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfFileUploads</name>
      <full_name>\TestOfFileUploads</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1182" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1186" package="Default">
        <name>testSingleFileUpload</name>
        <full_name>testSingleFileUpload</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1195" package="Default">
        <name>testMultipleFileUpload</name>
        <full_name>testMultipleFileUpload</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1208" package="Default">
        <name>testBinaryFileUpload</name>
        <full_name>testBinaryFileUpload</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1218" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfLiveHistoryNavigation</name>
      <full_name>\TestOfLiveHistoryNavigation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1219" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1223" package="Default">
        <name>testRetry</name>
        <full_name>testRetry</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1232" package="Default">
        <name>testOfBackButton</name>
        <full_name>testOfBackButton</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1243" package="Default">
        <name>testGetRetryResubmitsData</name>
        <full_name>testGetRetryResubmitsData</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1253" package="Default">
        <name>testGetRetryResubmitsExtraData</name>
        <full_name>testGetRetryResubmitsExtraData</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1264" package="Default">
        <name>testPostRetryResubmitsData</name>
        <full_name>testPostRetryResubmitsData</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1275" package="Default">
        <name>testGetRetryResubmitsRepeatedData</name>
        <full_name>testGetRetryResubmitsRepeatedData</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1286" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfLiveAuthentication</name>
      <full_name>\TestOfLiveAuthentication</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1287" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1291" package="Default">
        <name>testChallengeFromProtectedPage</name>
        <full_name>testChallengeFromProtectedPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1303" package="Default">
        <name>testTrailingSlashImpliedWithinRealm</name>
        <full_name>testTrailingSlashImpliedWithinRealm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1311" package="Default">
        <name>testTrailingSlashImpliedSettingRealm</name>
        <full_name>testTrailingSlashImpliedSettingRealm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1319" package="Default">
        <name>testEncodedAuthenticationFetchesPage</name>
        <full_name>testEncodedAuthenticationFetchesPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1324" package="Default">
        <name>testEncodedAuthenticationFetchesPageAfterTrailingSlashRedirect</name>
        <full_name>testEncodedAuthenticationFetchesPageAfterTrailingSlashRedirect</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1329" package="Default">
        <name>testRealmExtendsToWholeDirectory</name>
        <full_name>testRealmExtendsToWholeDirectory</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1338" package="Default">
        <name>testRedirectKeepsAuthentication</name>
        <full_name>testRedirectKeepsAuthentication</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1344" package="Default">
        <name>testRedirectKeepsEncodedAuthentication</name>
        <full_name>testRedirectKeepsEncodedAuthentication</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1350" package="Default">
        <name>testSessionRestartLosesAuthentication</name>
        <full_name>testSessionRestartLosesAuthentication</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1360" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfLoadingFrames</name>
      <full_name>\TestOfLoadingFrames</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1361" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1365" package="Default">
        <name>testNoFramesContentWhenFramesDisabled</name>
        <full_name>testNoFramesContentWhenFramesDisabled</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1372" package="Default">
        <name>testPatternMatchCanReadTheOnlyFrame</name>
        <full_name>testPatternMatchCanReadTheOnlyFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1378" package="Default">
        <name>testMessyFramesetResponsesByName</name>
        <full_name>testMessyFramesetResponsesByName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1435" package="Default">
        <name>testReloadingFramesetPage</name>
        <full_name>testReloadingFramesetPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1444" package="Default">
        <name>testReloadingSingleFrameWithCookieCounter</name>
        <full_name>testReloadingSingleFrameWithCookieCounter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1460" package="Default">
        <name>testReloadingFrameWhenUnfocusedReloadsWholeFrameset</name>
        <full_name>testReloadingFrameWhenUnfocusedReloadsWholeFrameset</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1477" package="Default">
        <name>testClickingNormalLinkReplacesJustThatFrame</name>
        <full_name>testClickingNormalLinkReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1484" package="Default">
        <name>testJumpToNamedPageReplacesJustThatFrame</name>
        <full_name>testJumpToNamedPageReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1493" package="Default">
        <name>testJumpToUnnamedPageReplacesJustThatFrame</name>
        <full_name>testJumpToUnnamedPageReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1502" package="Default">
        <name>testJumpToUnnamedPageWithBareParameterReplacesJustThatFrame</name>
        <full_name>testJumpToUnnamedPageWithBareParameterReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1511" package="Default">
        <name>testJumpToUnnamedPageWithEmptyQueryReplacesJustThatFrame</name>
        <full_name>testJumpToUnnamedPageWithEmptyQueryReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1520" package="Default">
        <name>testJumpToUnnamedPageWithEmptyLinkReplacesJustThatFrame</name>
        <full_name>testJumpToUnnamedPageWithEmptyLinkReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1529" package="Default">
        <name>testJumpBackADirectoryLevelReplacesJustThatFrame</name>
        <full_name>testJumpBackADirectoryLevelReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1536" package="Default">
        <name>testSubmitToNamedPageReplacesJustThatFrame</name>
        <full_name>testSubmitToNamedPageReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1545" package="Default">
        <name>testSubmitToSameDirectoryReplacesJustThatFrame</name>
        <full_name>testSubmitToSameDirectoryReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1553" package="Default">
        <name>testSubmitToEmptyActionReplacesJustThatFrame</name>
        <full_name>testSubmitToEmptyActionReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1561" package="Default">
        <name>testSubmitToNoActionReplacesJustThatFrame</name>
        <full_name>testSubmitToNoActionReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1569" package="Default">
        <name>testSubmitBackADirectoryLevelReplacesJustThatFrame</name>
        <full_name>testSubmitBackADirectoryLevelReplacesJustThatFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1576" package="Default">
        <name>testTopLinkExitsFrameset</name>
        <full_name>testTopLinkExitsFrameset</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1582" package="Default">
        <name>testLinkInOnePageCanLoadAnother</name>
        <full_name>testLinkInOnePageCanLoadAnother</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1591" package="Default">
        <name>testFrameWithRelativeLinksRespectsBaseTagForThatPage</name>
        <full_name>testFrameWithRelativeLinksRespectsBaseTagForThatPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1598" package="Default">
        <name>testRelativeLinkInFrameIsNotAffectedByFramesetBaseTag</name>
        <full_name>testRelativeLinkInFrameIsNotAffectedByFramesetBaseTag</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1607" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfFrameAuthentication</name>
      <full_name>\TestOfFrameAuthentication</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1608" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1612" package="Default">
        <name>testUnauthenticatedFrameSendsChallenge</name>
        <full_name>testUnauthenticatedFrameSendsChallenge</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1620" package="Default">
        <name>testCanReadFrameFromAlreadyAuthenticatedRealm</name>
        <full_name>testCanReadFrameFromAlreadyAuthenticatedRealm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1629" package="Default">
        <name>testCanAuthenticateFrame</name>
        <full_name>testCanAuthenticateFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1639" package="Default">
        <name>testCanAuthenticateRedirectedFrame</name>
        <full_name>testCanAuthenticateRedirectedFrame</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1651" package="Default">
      <extends>\SimpleTestAcceptanceTest</extends>
      <name>TestOfNestedFrames</name>
      <full_name>\TestOfNestedFrames</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1652" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1656" package="Default">
        <name>testCanNavigateToSpecificContent</name>
        <full_name>testCanNavigateToSpecificContent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1688" package="Default">
        <name>testReloadingFramesetPage</name>
        <full_name>testReloadingFramesetPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1697" package="Default">
        <name>testRetryingNestedPageOnlyRetriesThatSet</name>
        <full_name>testRetryingNestedPageOnlyRetriesThatSet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1716" package="Default">
        <name>testAuthenticatingNestedPage</name>
        <full_name>testAuthenticatingNestedPage</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/acceptance_test.php</error>
      <error line="9" code="50000">No DocBlock was found for \SimpleTestAcceptanceTest</error>
      <error line="10" code="50010">No DocBlock was found for method samples()</error>
      <error line="15" code="50000">No DocBlock was found for \TestOfLiveBrowser</error>
      <error line="16" code="50010">No DocBlock was found for method samples()</error>
      <error line="20" code="50010">No DocBlock was found for method testGet()</error>
      <error line="31" code="50010">No DocBlock was found for method testPost()</error>
      <error line="39" code="50010">No DocBlock was found for method testAbsoluteLinkFollowing()</error>
      <error line="47" code="50010">No DocBlock was found for method testRelativeEncodedLinkFollowing()</error>
      <error line="56" code="50010">No DocBlock was found for method testRelativeLinkFollowing()</error>
      <error line="64" code="50010">No DocBlock was found for method testUnifiedClickLinkClicking()</error>
      <error line="72" code="50010">No DocBlock was found for method testIdLinkFollowing()</error>
      <error line="80" code="50010">No DocBlock was found for method testCookieReading()</error>
      <error line="89" code="50010">No DocBlock was found for method testSimpleSubmit()</error>
      <error line="98" code="50010">No DocBlock was found for method testUnifiedClickCanSubmit()</error>
      <error line="107" code="50000">No DocBlock was found for \TestOfLocalFileBrowser</error>
      <error line="108" code="50010">No DocBlock was found for method samples()</error>
      <error line="112" code="50010">No DocBlock was found for method testGet()</error>
      <error line="123" code="50000">No DocBlock was found for \TestOfRequestMethods</error>
      <error line="124" code="50010">No DocBlock was found for method samples()</error>
      <error line="128" code="50010">No DocBlock was found for method testHeadRequest()</error>
      <error line="134" code="50010">No DocBlock was found for method testGetRequest()</error>
      <error line="140" code="50010">No DocBlock was found for method testPostWithPlainEncoding()</error>
      <error line="147" code="50010">No DocBlock was found for method testPostWithXmlEncoding()</error>
      <error line="154" code="50010">No DocBlock was found for method testPutWithPlainEncoding()</error>
      <error line="161" code="50010">No DocBlock was found for method testPutWithXmlEncoding()</error>
      <error line="168" code="50010">No DocBlock was found for method testDeleteRequest()</error>
      <error line="177" code="50000">No DocBlock was found for \TestRadioFields</error>
      <error line="178" code="50010">No DocBlock was found for method testSetFieldAsInteger()</error>
      <error line="185" code="50010">No DocBlock was found for method testSetFieldAsString()</error>
      <error line="193" code="50000">No DocBlock was found for \TestOfLiveFetching</error>
      <error line="194" code="50010">No DocBlock was found for method setUp()</error>
      <error line="198" code="50010">No DocBlock was found for method testFormWithArrayBasedInputs()</error>
      <error line="206" code="50010">No DocBlock was found for method testFormWithQuotedValues()</error>
      <error line="214" code="50010">No DocBlock was found for method testGet()</error>
      <error line="227" code="50010">No DocBlock was found for method testSlowGet()</error>
      <error line="231" code="50010">No DocBlock was found for method testTimedOutGet()</error>
      <error line="237" code="50010">No DocBlock was found for method testPost()</error>
      <error line="243" code="50010">No DocBlock was found for method testGetWithData()</error>
      <error line="249" code="50010">No DocBlock was found for method testPostWithData()</error>
      <error line="255" code="50010">No DocBlock was found for method testPostWithRecursiveData()</error>
      <error line="277" code="50010">No DocBlock was found for method testRelativeGet()</error>
      <error line="283" code="50010">No DocBlock was found for method testRelativePost()</error>
      <error line="290" code="50000">No DocBlock was found for \TestOfLinkFollowing</error>
      <error line="291" code="50010">No DocBlock was found for method setUp()</error>
      <error line="295" code="50010">No DocBlock was found for method testLinkAssertions()</error>
      <error line="302" code="50010">No DocBlock was found for method testAbsoluteLinkFollowing()</error>
      <error line="308" code="50010">No DocBlock was found for method testRelativeLinkFollowing()</error>
      <error line="314" code="50010">No DocBlock was found for method testLinkIdFollowing()</error>
      <error line="321" code="50010">No DocBlock was found for method testAbsoluteUrlBehavesAbsolutely()</error>
      <error line="327" code="50010">No DocBlock was found for method testRelativeUrlRespectsBaseTag()</error>
      <error line="334" code="50000">No DocBlock was found for \TestOfLivePageLinkingWithMinimalLinks</error>
      <error line="335" code="50010">No DocBlock was found for method setUp()</error>
      <error line="339" code="50010">No DocBlock was found for method testClickToExplicitelyNamedSelfReturns()</error>
      <error line="348" code="50010">No DocBlock was found for method testClickToMissingPageReturnsToSamePage()</error>
      <error line="355" code="50010">No DocBlock was found for method testClickToBareActionReturnsToSamePage()</error>
      <error line="362" code="50010">No DocBlock was found for method testClickToSingleQuestionMarkReturnsToSamePage()</error>
      <error line="368" code="50010">No DocBlock was found for method testClickToEmptyStringReturnsToSamePage()</error>
      <error line="374" code="50010">No DocBlock was found for method testClickToSingleDotGoesToCurrentDirectory()</error>
      <error line="382" code="50010">No DocBlock was found for method testClickBackADirectoryLevel()</error>
      <error line="389" code="50000">No DocBlock was found for \TestOfLiveFrontControllerEmulation</error>
      <error line="390" code="50010">No DocBlock was found for method setUp()</error>
      <error line="394" code="50010">No DocBlock was found for method testJumpToNamedPage()</error>
      <error line="402" code="50010">No DocBlock was found for method testJumpToUnnamedPage()</error>
      <error line="410" code="50010">No DocBlock was found for method testJumpToUnnamedPageWithBareParameter()</error>
      <error line="418" code="50010">No DocBlock was found for method testJumpToUnnamedPageWithEmptyQuery()</error>
      <error line="426" code="50010">No DocBlock was found for method testJumpToUnnamedPageWithEmptyLink()</error>
      <error line="434" code="50010">No DocBlock was found for method testJumpBackADirectoryLevel()</error>
      <error line="440" code="50010">No DocBlock was found for method testSubmitToNamedPage()</error>
      <error line="448" code="50010">No DocBlock was found for method testSubmitToSameDirectory()</error>
      <error line="455" code="50010">No DocBlock was found for method testSubmitToEmptyAction()</error>
      <error line="462" code="50010">No DocBlock was found for method testSubmitToNoAction()</error>
      <error line="469" code="50010">No DocBlock was found for method testSubmitBackADirectoryLevel()</error>
      <error line="475" code="50010">No DocBlock was found for method testSubmitToNamedPageWithMixedPostAndGet()</error>
      <error line="483" code="50010">No DocBlock was found for method testSubmitToSameDirectoryMixedPostAndGet()</error>
      <error line="490" code="50010">No DocBlock was found for method testSubmitToEmptyActionMixedPostAndGet()</error>
      <error line="497" code="50010">No DocBlock was found for method testSubmitToNoActionMixedPostAndGet()</error>
      <error line="505" code="50000">No DocBlock was found for \TestOfLiveHeaders</error>
      <error line="506" code="50010">No DocBlock was found for method setUp()</error>
      <error line="510" code="50010">No DocBlock was found for method testConfirmingHeaderExistence()</error>
      <error line="519" code="50000">No DocBlock was found for \TestOfLiveRedirects</error>
      <error line="520" code="50010">No DocBlock was found for method setUp()</error>
      <error line="524" code="50010">No DocBlock was found for method testNoRedirects()</error>
      <error line="530" code="50010">No DocBlock was found for method testRedirects()</error>
      <error line="536" code="50010">No DocBlock was found for method testRedirectLosesGetData()</error>
      <error line="541" code="50010">No DocBlock was found for method testRedirectKeepsExtraRequestDataOfItsOwn()</error>
      <error line="546" code="50010">No DocBlock was found for method testRedirectLosesPostData()</error>
      <error line="552" code="50010">No DocBlock was found for method testRedirectWithBaseUrlChange()</error>
      <error line="559" code="50010">No DocBlock was found for method testRedirectWithDoubleBaseUrlChange()</error>
      <error line="565" code="50000">No DocBlock was found for \TestOfLiveCookies</error>
      <error line="566" code="50010">No DocBlock was found for method setUp()</error>
      <error line="570" code="50010">No DocBlock was found for method here()</error>
      <error line="574" code="50010">No DocBlock was found for method thisHost()</error>
      <error line="579" code="50010">No DocBlock was found for method thisPath()</error>
      <error line="584" code="50010">No DocBlock was found for method testCookieSettingAndAssertions()</error>
      <error line="597" code="50010">No DocBlock was found for method testNoCookieSetWhenCookiesDisabled()</error>
      <error line="604" code="50010">No DocBlock was found for method testCookieReading()</error>
      <error line="611" code="50010">No DocBlock was found for method testNoCookie()</error>
      <error line="615" code="50010">No DocBlock was found for method testNoCookieReadingWhenCookiesDisabled()</error>
      <error line="623" code="50010">No DocBlock was found for method testCookiePatternAssertions()</error>
      <error line="628" code="50010">No DocBlock was found for method testTemporaryCookieExpiry()</error>
      <error line="635" code="50010">No DocBlock was found for method testTimedCookieExpiryWith100SecondMargin()</error>
      <error line="644" code="50010">No DocBlock was found for method testNoClockOverDriftBy100Seconds()</error>
      <error line="652" code="50010">No DocBlock was found for method testNoClockUnderDriftBy100Seconds()</error>
      <error line="661" code="50010">No DocBlock was found for method testCookiePath()</error>
      <error line="670" code="50000">No DocBlock was found for \LiveTestOfForms</error>
      <error line="671" code="50010">No DocBlock was found for method setUp()</error>
      <error line="675" code="50010">No DocBlock was found for method testSimpleSubmit()</error>
      <error line="682" code="50010">No DocBlock was found for method testDefaultFormValues()</error>
      <error line="706" code="50010">No DocBlock was found for method testFormSubmissionByButtonLabel()</error>
      <error line="726" code="50010">No DocBlock was found for method testAdditionalFormValues()</error>
      <error line="733" code="50010">No DocBlock was found for method testFormSubmissionByName()</error>
      <error line="740" code="50010">No DocBlock was found for method testFormSubmissionByNameAndAdditionalParameters()</error>
      <error line="747" code="50010">No DocBlock was found for method testFormSubmissionBySubmitButtonLabeledSubmit()</error>
      <error line="753" code="50010">No DocBlock was found for method testFormSubmissionWithIds()</error>
      <error line="783" code="50010">No DocBlock was found for method testFormSubmissionWithIdsAndAdditionnalData()</error>
      <error line="789" code="50010">No DocBlock was found for method testFormSubmissionWithLabels()</error>
      <error line="819" code="50010">No DocBlock was found for method testSettingCheckboxWithBooleanTrueSetsUnderlyingValue()</error>
      <error line="827" code="50010">No DocBlock was found for method testFormSubmissionWithMixedPostAndGet()</error>
      <error line="836" code="50010">No DocBlock was found for method testFormSubmissionWithMixedPostAndEncodedGet()</error>
      <error line="845" code="50010">No DocBlock was found for method testFormSubmissionWithoutAction()</error>
      <error line="853" code="50010">No DocBlock was found for method testImageSubmissionByLabel()</error>
      <error line="861" code="50010">No DocBlock was found for method testImageSubmissionByLabelWithAdditionalParameters()</error>
      <error line="867" code="50010">No DocBlock was found for method testImageSubmissionByName()</error>
      <error line="874" code="50010">No DocBlock was found for method testImageSubmissionById()</error>
      <error line="881" code="50010">No DocBlock was found for method testButtonSubmissionByLabel()</error>
      <error line="887" code="50010">No DocBlock was found for method testNamelessSubmitSendsNoValue()</error>
      <error line="894" code="50010">No DocBlock was found for method testNamelessImageSendsXAndYValues()</error>
      <error line="902" code="50010">No DocBlock was found for method testNamelessButtonSendsNoValue()</error>
      <error line="908" code="50010">No DocBlock was found for method testSelfSubmit()</error>
      <error line="918" code="50010">No DocBlock was found for method testSelfSubmitWithParameters()</error>
      <error line="925" code="50010">No DocBlock was found for method testSettingOfBlankOption()</error>
      <error line="932" code="50010">No DocBlock was found for method testAssertingFieldValueWithPattern()</error>
      <error line="938" code="50010">No DocBlock was found for method testSendingMultipartFormDataEncodedForm()</error>
      <error line="968" code="50010">No DocBlock was found for method testSettingVariousBlanksInFields()</error>
      <error line="996" code="50010">No DocBlock was found for method testDefaultValueOfTextareaHasNewlinesAndWhitespacePreserved()</error>
      <error line="1001" code="50010">No DocBlock was found for method chars()</error>
      <error line="1007" code="50010">No DocBlock was found for method testSubmissionOfBlankFields()</error>
      <error line="1020" code="50010">No DocBlock was found for method testDefaultValueOfTextareaHasNewlinesAndWhitespacePreservedOnSubmission()</error>
      <error line="1026" code="50010">No DocBlock was found for method testSubmissionOfEmptyValues()</error>
      <error line="1037" code="50010">No DocBlock was found for method testSubmissionOfZeroes()</error>
      <error line="1051" code="50010">No DocBlock was found for method testSubmissionOfQuestionMarks()</error>
      <error line="1065" code="50010">No DocBlock was found for method testSubmissionOfHtmlEncodedValues()</error>
      <error line="1082" code="50010">No DocBlock was found for method testFormActionRespectsBaseTag()</error>
      <error line="1090" code="50000">No DocBlock was found for \TestOfLiveMultiValueWidgets</error>
      <error line="1091" code="50010">No DocBlock was found for method setUp()</error>
      <error line="1095" code="50010">No DocBlock was found for method testDefaultFormValueSubmission()</error>
      <error line="1110" code="50010">No DocBlock was found for method testSubmittingMultipleValues()</error>
      <error line="1131" code="50010">No DocBlock was found for method testSettingByOptionValue()</error>
      <error line="1139" code="50010">No DocBlock was found for method testSubmittingMultipleValuesByLabel()</error>
      <error line="1151" code="50010">No DocBlock was found for method testSavantStyleHiddenFieldDefaults()</error>
      <error line="1160" code="50010">No DocBlock was found for method testSavantStyleHiddenDefaultsAreOverridden()</error>
      <error line="1169" code="50010">No DocBlock was found for method testSavantStyleFormSettingById()</error>
      <error line="1181" code="50000">No DocBlock was found for \TestOfFileUploads</error>
      <error line="1182" code="50010">No DocBlock was found for method setUp()</error>
      <error line="1186" code="50010">No DocBlock was found for method testSingleFileUpload()</error>
      <error line="1195" code="50010">No DocBlock was found for method testMultipleFileUpload()</error>
      <error line="1208" code="50010">No DocBlock was found for method testBinaryFileUpload()</error>
      <error line="1218" code="50000">No DocBlock was found for \TestOfLiveHistoryNavigation</error>
      <error line="1219" code="50010">No DocBlock was found for method setUp()</error>
      <error line="1223" code="50010">No DocBlock was found for method testRetry()</error>
      <error line="1232" code="50010">No DocBlock was found for method testOfBackButton()</error>
      <error line="1243" code="50010">No DocBlock was found for method testGetRetryResubmitsData()</error>
      <error line="1253" code="50010">No DocBlock was found for method testGetRetryResubmitsExtraData()</error>
      <error line="1264" code="50010">No DocBlock was found for method testPostRetryResubmitsData()</error>
      <error line="1275" code="50010">No DocBlock was found for method testGetRetryResubmitsRepeatedData()</error>
      <error line="1286" code="50000">No DocBlock was found for \TestOfLiveAuthentication</error>
      <error line="1287" code="50010">No DocBlock was found for method setUp()</error>
      <error line="1291" code="50010">No DocBlock was found for method testChallengeFromProtectedPage()</error>
      <error line="1303" code="50010">No DocBlock was found for method testTrailingSlashImpliedWithinRealm()</error>
      <error line="1311" code="50010">No DocBlock was found for method testTrailingSlashImpliedSettingRealm()</error>
      <error line="1319" code="50010">No DocBlock was found for method testEncodedAuthenticationFetchesPage()</error>
      <error line="1324" code="50010">No DocBlock was found for method testEncodedAuthenticationFetchesPageAfterTrailingSlashRedirect()</error>
      <error line="1329" code="50010">No DocBlock was found for method testRealmExtendsToWholeDirectory()</error>
      <error line="1338" code="50010">No DocBlock was found for method testRedirectKeepsAuthentication()</error>
      <error line="1344" code="50010">No DocBlock was found for method testRedirectKeepsEncodedAuthentication()</error>
      <error line="1350" code="50010">No DocBlock was found for method testSessionRestartLosesAuthentication()</error>
      <error line="1360" code="50000">No DocBlock was found for \TestOfLoadingFrames</error>
      <error line="1361" code="50010">No DocBlock was found for method setUp()</error>
      <error line="1365" code="50010">No DocBlock was found for method testNoFramesContentWhenFramesDisabled()</error>
      <error line="1372" code="50010">No DocBlock was found for method testPatternMatchCanReadTheOnlyFrame()</error>
      <error line="1378" code="50010">No DocBlock was found for method testMessyFramesetResponsesByName()</error>
      <error line="1435" code="50010">No DocBlock was found for method testReloadingFramesetPage()</error>
      <error line="1444" code="50010">No DocBlock was found for method testReloadingSingleFrameWithCookieCounter()</error>
      <error line="1460" code="50010">No DocBlock was found for method testReloadingFrameWhenUnfocusedReloadsWholeFrameset()</error>
      <error line="1477" code="50010">No DocBlock was found for method testClickingNormalLinkReplacesJustThatFrame()</error>
      <error line="1484" code="50010">No DocBlock was found for method testJumpToNamedPageReplacesJustThatFrame()</error>
      <error line="1493" code="50010">No DocBlock was found for method testJumpToUnnamedPageReplacesJustThatFrame()</error>
      <error line="1502" code="50010">No DocBlock was found for method testJumpToUnnamedPageWithBareParameterReplacesJustThatFrame()</error>
      <error line="1511" code="50010">No DocBlock was found for method testJumpToUnnamedPageWithEmptyQueryReplacesJustThatFrame()</error>
      <error line="1520" code="50010">No DocBlock was found for method testJumpToUnnamedPageWithEmptyLinkReplacesJustThatFrame()</error>
      <error line="1529" code="50010">No DocBlock was found for method testJumpBackADirectoryLevelReplacesJustThatFrame()</error>
      <error line="1536" code="50010">No DocBlock was found for method testSubmitToNamedPageReplacesJustThatFrame()</error>
      <error line="1545" code="50010">No DocBlock was found for method testSubmitToSameDirectoryReplacesJustThatFrame()</error>
      <error line="1553" code="50010">No DocBlock was found for method testSubmitToEmptyActionReplacesJustThatFrame()</error>
      <error line="1561" code="50010">No DocBlock was found for method testSubmitToNoActionReplacesJustThatFrame()</error>
      <error line="1569" code="50010">No DocBlock was found for method testSubmitBackADirectoryLevelReplacesJustThatFrame()</error>
      <error line="1576" code="50010">No DocBlock was found for method testTopLinkExitsFrameset()</error>
      <error line="1582" code="50010">No DocBlock was found for method testLinkInOnePageCanLoadAnother()</error>
      <error line="1591" code="50010">No DocBlock was found for method testFrameWithRelativeLinksRespectsBaseTagForThatPage()</error>
      <error line="1598" code="50010">No DocBlock was found for method testRelativeLinkInFrameIsNotAffectedByFramesetBaseTag()</error>
      <error line="1607" code="50000">No DocBlock was found for \TestOfFrameAuthentication</error>
      <error line="1608" code="50010">No DocBlock was found for method setUp()</error>
      <error line="1612" code="50010">No DocBlock was found for method testUnauthenticatedFrameSendsChallenge()</error>
      <error line="1620" code="50010">No DocBlock was found for method testCanReadFrameFromAlreadyAuthenticatedRealm()</error>
      <error line="1629" code="50010">No DocBlock was found for method testCanAuthenticateFrame()</error>
      <error line="1639" code="50010">No DocBlock was found for method testCanAuthenticateRedirectedFrame()</error>
      <error line="1651" code="50000">No DocBlock was found for \TestOfNestedFrames</error>
      <error line="1652" code="50010">No DocBlock was found for method setUp()</error>
      <error line="1656" code="50010">No DocBlock was found for method testCanNavigateToSpecificContent()</error>
      <error line="1688" code="50010">No DocBlock was found for method testReloadingFramesetPage()</error>
      <error line="1697" code="50010">No DocBlock was found for method testRetryingNestedPageOnlyRetriesThatSet()</error>
      <error line="1716" code="50010">No DocBlock was found for method testAuthenticatingNestedPage()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/adapter_test.php" hash="111ca103ac802130d2285135e629e99d" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="6" package="Default">
      <extends/>
      <name>SameTestClass</name>
      <full_name>\SameTestClass</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="9" package="Default">
      <extends>\PHPUnit_TestCase</extends>
      <name>TestOfPearAdapter</name>
      <full_name>\TestOfPearAdapter</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="11" package="Default">
        <name>testBoolean</name>
        <full_name>testBoolean</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="16" package="Default">
        <name>testName</name>
        <full_name>testName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="20" package="Default">
        <name>testPass</name>
        <full_name>testPass</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Default">
        <name>testNulls</name>
        <full_name>testNulls</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>testType</name>
        <full_name>testType</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="35" package="Default">
        <name>testEquals</name>
        <full_name>testEquals</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Default">
        <name>testSame</name>
        <full_name>testSame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="46" package="Default">
        <name>testRegExp</name>
        <full_name>testRegExp</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/adapter_test.php</error>
      <error line="6" code="50000">No DocBlock was found for \SameTestClass</error>
      <error line="9" code="50000">No DocBlock was found for \TestOfPearAdapter</error>
      <error line="11" code="50010">No DocBlock was found for method testBoolean()</error>
      <error line="16" code="50010">No DocBlock was found for method testName()</error>
      <error line="20" code="50010">No DocBlock was found for method testPass()</error>
      <error line="24" code="50010">No DocBlock was found for method testNulls()</error>
      <error line="31" code="50010">No DocBlock was found for method testType()</error>
      <error line="35" code="50010">No DocBlock was found for method testEquals()</error>
      <error line="41" code="50010">No DocBlock was found for method testSame()</error>
      <error line="46" code="50010">No DocBlock was found for method testRegExp()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/all_tests.php" hash="cf395413f086675894674b331644d26c" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="4" package="Default">
      <extends>\TestSuite</extends>
      <name>AllTests</name>
      <full_name>\AllTests</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="5" package="Default">
        <name>AllTests</name>
        <full_name>AllTests</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/all_tests.php</error>
      <error line="4" code="50000">No DocBlock was found for \AllTests</error>
      <error line="5" code="50010">No DocBlock was found for method AllTests()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/arguments_test.php" hash="af57ce41b865bb9fb2a7842c1e374d6d" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="6" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfCommandLineArgumentParsing</name>
      <full_name>\TestOfCommandLineArgumentParsing</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="7" package="Default">
        <name>testArgumentListWithJustProgramNameGivesFalseToEveryName</name>
        <full_name>testArgumentListWithJustProgramNameGivesFalseToEveryName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="13" package="Default">
        <name>testSingleArgumentNameRecordedAsTrue</name>
        <full_name>testSingleArgumentNameRecordedAsTrue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="18" package="Default">
        <name>testSingleArgumentCanBeGivenAValue</name>
        <full_name>testSingleArgumentCanBeGivenAValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="Default">
        <name>testSingleArgumentCanBeGivenSpaceSeparatedValue</name>
        <full_name>testSingleArgumentCanBeGivenSpaceSeparatedValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Default">
        <name>testWillBuildArrayFromRepeatedValue</name>
        <full_name>testWillBuildArrayFromRepeatedValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Default">
        <name>testWillBuildArrayFromMultiplyRepeatedValues</name>
        <full_name>testWillBuildArrayFromMultiplyRepeatedValues</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="38" package="Default">
        <name>testCanParseLongFormArguments</name>
        <full_name>testCanParseLongFormArguments</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>testGetsFullSetOfResultsAsHash</name>
        <full_name>testGetsFullSetOfResultsAsHash</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="51" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfHelpOutput</name>
      <full_name>\TestOfHelpOutput</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Default">
        <name>testDisplaysGeneralHelpBanner</name>
        <full_name>testDisplaysGeneralHelpBanner</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="57" package="Default">
        <name>testDisplaysOnlySingleLineEndings</name>
        <full_name>testDisplaysOnlySingleLineEndings</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="Default">
        <name>testDisplaysHelpOnShortFlag</name>
        <full_name>testDisplaysHelpOnShortFlag</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="68" package="Default">
        <name>testHasAtleastFourSpacesAfterLongestFlag</name>
        <full_name>testHasAtleastFourSpacesAfterLongestFlag</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Default">
        <name>testCanDisplaysMultipleFlagsForEachOption</name>
        <full_name>testCanDisplaysMultipleFlagsForEachOption</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/arguments_test.php</error>
      <error line="6" code="50000">No DocBlock was found for \TestOfCommandLineArgumentParsing</error>
      <error line="7" code="50010">No DocBlock was found for method testArgumentListWithJustProgramNameGivesFalseToEveryName()</error>
      <error line="13" code="50010">No DocBlock was found for method testSingleArgumentNameRecordedAsTrue()</error>
      <error line="18" code="50010">No DocBlock was found for method testSingleArgumentCanBeGivenAValue()</error>
      <error line="23" code="50010">No DocBlock was found for method testSingleArgumentCanBeGivenSpaceSeparatedValue()</error>
      <error line="28" code="50010">No DocBlock was found for method testWillBuildArrayFromRepeatedValue()</error>
      <error line="33" code="50010">No DocBlock was found for method testWillBuildArrayFromMultiplyRepeatedValues()</error>
      <error line="38" code="50010">No DocBlock was found for method testCanParseLongFormArguments()</error>
      <error line="44" code="50010">No DocBlock was found for method testGetsFullSetOfResultsAsHash()</error>
      <error line="51" code="50000">No DocBlock was found for \TestOfHelpOutput</error>
      <error line="52" code="50010">No DocBlock was found for method testDisplaysGeneralHelpBanner()</error>
      <error line="57" code="50010">No DocBlock was found for method testDisplaysOnlySingleLineEndings()</error>
      <error line="62" code="50010">No DocBlock was found for method testDisplaysHelpOnShortFlag()</error>
      <error line="68" code="50010">No DocBlock was found for method testHasAtleastFourSpacesAfterLongestFlag()</error>
      <error line="76" code="50010">No DocBlock was found for method testCanDisplaysMultipleFlagsForEachOption()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/authentication_test.php" hash="105bc700c2b4f4ee8b910929049b260b" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="8" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfRealm</name>
      <full_name>\TestOfRealm</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="10" package="Default">
        <name>testWithinSameUrl</name>
        <full_name>testWithinSameUrl</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="18" package="Default">
        <name>testInsideWithLongerUrl</name>
        <full_name>testInsideWithLongerUrl</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="26" package="Default">
        <name>testBelowRootIsOutside</name>
        <full_name>testBelowRootIsOutside</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="34" package="Default">
        <name>testOldNetscapeDefinitionIsOutside</name>
        <full_name>testOldNetscapeDefinitionIsOutside</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="42" package="Default">
        <name>testInsideWithMissingTrailingSlash</name>
        <full_name>testInsideWithMissingTrailingSlash</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="50" package="Default">
        <name>testDifferentPageNameStillInside</name>
        <full_name>testDifferentPageNameStillInside</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Default">
        <name>testNewUrlInSameDirectoryDoesNotChangeRealm</name>
        <full_name>testNewUrlInSameDirectoryDoesNotChangeRealm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="69" package="Default">
        <name>testNewUrlMakesRealmTheCommonPath</name>
        <full_name>testNewUrlMakesRealmTheCommonPath</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="89" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfAuthenticator</name>
      <full_name>\TestOfAuthenticator</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="91" package="Default">
        <name>testNoRealms</name>
        <full_name>testNoRealms</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="98" package="Default">
        <name>createSingleRealm</name>
        <full_name>createSingleRealm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="108" package="Default">
        <name>testOutsideRealm</name>
        <full_name>testOutsideRealm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="117" package="Default">
        <name>testWithinRealm</name>
        <full_name>testWithinRealm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="126" package="Default">
        <name>testRestartingClearsRealm</name>
        <full_name>testRestartingClearsRealm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="136" package="Default">
        <name>testDifferentHostIsOutsideRealm</name>
        <full_name>testDifferentHostIsOutsideRealm</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/authentication_test.php</error>
      <error line="8" code="50000">No DocBlock was found for \TestOfRealm</error>
      <error line="10" code="50010">No DocBlock was found for method testWithinSameUrl()</error>
      <error line="18" code="50010">No DocBlock was found for method testInsideWithLongerUrl()</error>
      <error line="26" code="50010">No DocBlock was found for method testBelowRootIsOutside()</error>
      <error line="34" code="50010">No DocBlock was found for method testOldNetscapeDefinitionIsOutside()</error>
      <error line="42" code="50010">No DocBlock was found for method testInsideWithMissingTrailingSlash()</error>
      <error line="50" code="50010">No DocBlock was found for method testDifferentPageNameStillInside()</error>
      <error line="58" code="50010">No DocBlock was found for method testNewUrlInSameDirectoryDoesNotChangeRealm()</error>
      <error line="69" code="50010">No DocBlock was found for method testNewUrlMakesRealmTheCommonPath()</error>
      <error line="89" code="50000">No DocBlock was found for \TestOfAuthenticator</error>
      <error line="91" code="50010">No DocBlock was found for method testNoRealms()</error>
      <error line="98" code="50010">No DocBlock was found for method createSingleRealm()</error>
      <error line="108" code="50010">No DocBlock was found for method testOutsideRealm()</error>
      <error line="117" code="50010">No DocBlock was found for method testWithinRealm()</error>
      <error line="126" code="50010">No DocBlock was found for method testRestartingClearsRealm()</error>
      <error line="136" code="50010">No DocBlock was found for method testDifferentHostIsOutsideRealm()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/autorun_test.php" hash="b2f18b3829976d867730fdddd44afdc1" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="5" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfAutorun</name>
      <full_name>\TestOfAutorun</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="6" package="Default">
        <name>testLoadIfIncluded</name>
        <full_name>testLoadIfIncluded</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="12" package="Default">
        <name>testExitStatusOneIfTestsFail</name>
        <full_name>testExitStatusOneIfTestsFail</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="17" package="Default">
        <name>testExitStatusZeroIfTestsPass</name>
        <full_name>testExitStatusZeroIfTestsPass</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/autorun_test.php</error>
      <error line="5" code="50000">No DocBlock was found for \TestOfAutorun</error>
      <error line="6" code="50010">No DocBlock was found for method testLoadIfIncluded()</error>
      <error line="12" code="50010">No DocBlock was found for method testExitStatusOneIfTestsFail()</error>
      <error line="17" code="50010">No DocBlock was found for method testExitStatusZeroIfTestsPass()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/bad_test_suite.php" hash="b074e3650d82f46727f3ca7c99aa7b2b" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="4" package="Default">
      <extends>\TestSuite</extends>
      <name>BadTestCases</name>
      <full_name>\BadTestCases</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="5" package="Default">
        <name>BadTestCases</name>
        <full_name>BadTestCases</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/bad_test_suite.php</error>
      <error line="4" code="50000">No DocBlock was found for \BadTestCases</error>
      <error line="5" code="50010">No DocBlock was found for method BadTestCases()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/browser_test.php" hash="019fdce11bb919e930f8e1336a91b83f" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="7" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="8" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="23" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfHistory</name>
      <full_name>\TestOfHistory</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="25" package="Default">
        <name>testEmptyHistoryHasFalseContents</name>
        <full_name>testEmptyHistoryHasFalseContents</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>testCannotMoveInEmptyHistory</name>
        <full_name>testCannotMoveInEmptyHistory</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="37" package="Default">
        <name>testCurrentTargetAccessors</name>
        <full_name>testCurrentTargetAccessors</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="46" package="Default">
        <name>testSecondEntryAccessors</name>
        <full_name>testSecondEntryAccessors</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="60" package="Default">
        <name>testGoingBackwards</name>
        <full_name>testGoingBackwards</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="Default">
        <name>testGoingBackwardsOffBeginning</name>
        <full_name>testGoingBackwardsOffBeginning</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="83" package="Default">
        <name>testGoingForwardsOffEnd</name>
        <full_name>testGoingForwardsOffEnd</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="93" package="Default">
        <name>testGoingBackwardsAndForwards</name>
        <full_name>testGoingBackwardsAndForwards</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="109" package="Default">
        <name>testNewEntryReplacesNextOne</name>
        <full_name>testNewEntryReplacesNextOne</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="125" package="Default">
        <name>testNewEntryDropsFutureEntries</name>
        <full_name>testNewEntryDropsFutureEntries</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="149" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfParsedPageAccess</name>
      <full_name>\TestOfParsedPageAccess</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="151" package="Default">
        <name>loadPage</name>
        <full_name>loadPage</full_name>
        <argument line="151">
          <name>$page</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="165" package="Default">
        <name>testAccessorsWhenNoPage</name>
        <full_name>testAccessorsWhenNoPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="173" package="Default">
        <name>testParse</name>
        <full_name>testParse</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="197" package="Default">
        <name>testLinkAffirmationWhenPresent</name>
        <full_name>testLinkAffirmationWhenPresent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="205" package="Default">
        <name>testLinkAffirmationByIdWhenPresent</name>
        <full_name>testLinkAffirmationByIdWhenPresent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="214" package="Default">
        <name>testSettingFieldIsPassedToPage</name>
        <full_name>testSettingFieldIsPassedToPage</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="224" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfBrowserNavigation</name>
      <full_name>\TestOfBrowserNavigation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="225" package="Default">
        <name>createBrowser</name>
        <full_name>createBrowser</full_name>
        <argument line="225">
          <name>$agent</name>
          <default></default>
          <type/>
        </argument>
        <argument line="225">
          <name>$page</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="233" package="Default">
        <name>testBrowserRequestMethods</name>
        <full_name>testBrowserRequestMethods</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="268" package="Default">
        <name>testClickLinkRequestsPage</name>
        <full_name>testClickLinkRequestsPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="291" package="Default">
        <name>testClickLinkWithUnknownFrameStillRequestsWholePage</name>
        <full_name>testClickLinkWithUnknownFrameStillRequestsWholePage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="320" package="Default">
        <name>testClickingMissingLinkFails</name>
        <full_name>testClickingMissingLinkFails</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="333" package="Default">
        <name>testClickIndexedLink</name>
        <full_name>testClickIndexedLink</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="353" package="Default">
        <name>testClinkLinkById</name>
        <full_name>testClinkLinkById</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="371" package="Default">
        <name>testClickingMissingLinkIdFails</name>
        <full_name>testClickingMissingLinkIdFails</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="383" package="Default">
        <name>testSubmitFormByLabel</name>
        <full_name>testSubmitFormByLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="407" package="Default">
        <name>testDefaultSubmitFormByLabel</name>
        <full_name>testDefaultSubmitFormByLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="431" package="Default">
        <name>testSubmitFormByName</name>
        <full_name>testSubmitFormByName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="450" package="Default">
        <name>testSubmitFormById</name>
        <full_name>testSubmitFormById</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="470" package="Default">
        <name>testSubmitFormByImageLabel</name>
        <full_name>testSubmitFormByImageLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="490" package="Default">
        <name>testSubmitFormByImageName</name>
        <full_name>testSubmitFormByImageName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="510" package="Default">
        <name>testSubmitFormByImageId</name>
        <full_name>testSubmitFormByImageId</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="530" package="Default">
        <name>testSubmitFormByFormId</name>
        <full_name>testSubmitFormByFormId</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="554" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfBrowserFrames</name>
      <full_name>\TestOfBrowserFrames</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="556" package="Default">
        <name>createBrowser</name>
        <full_name>createBrowser</full_name>
        <argument line="556">
          <name>$agent</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="563" package="Default">
        <name>createUserAgent</name>
        <full_name>createUserAgent</full_name>
        <argument line="563">
          <name>$pages</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="575" package="Default">
        <name>testSimplePageHasNoFrames</name>
        <full_name>testSimplePageHasNoFrames</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="584" package="Default">
        <name>testFramesetWithSingleFrame</name>
        <full_name>testFramesetWithSingleFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="595" package="Default">
        <name>testTitleTakenFromFramesetPage</name>
        <full_name>testTitleTakenFromFramesetPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="605" package="Default">
        <name>testFramesetWithSingleUnnamedFrame</name>
        <full_name>testFramesetWithSingleUnnamedFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="618" package="Default">
        <name>testFramesetWithMultipleFrames</name>
        <full_name>testFramesetWithMultipleFrames</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="638" package="Default">
        <name>testFrameFocusByName</name>
        <full_name>testFrameFocusByName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="658" package="Default">
        <name>testFramesetWithSomeNamedFrames</name>
        <full_name>testFramesetWithSomeNamedFrames</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="681" package="Default">
        <name>testFrameFocusWithMixedNamesAndIndexes</name>
        <full_name>testFrameFocusWithMixedNamesAndIndexes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="707" package="Default">
        <name>testNestedFrameset</name>
        <full_name>testNestedFrameset</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="726" package="Default">
        <name>testCanNavigateToNestedFrame</name>
        <full_name>testCanNavigateToNestedFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="764" package="Default">
        <name>testCanNavigateToNestedFrameByIndex</name>
        <full_name>testCanNavigateToNestedFrameByIndex</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/browser_test.php</error>
      <error line="23" code="50000">No DocBlock was found for \TestOfHistory</error>
      <error line="25" code="50010">No DocBlock was found for method testEmptyHistoryHasFalseContents()</error>
      <error line="31" code="50010">No DocBlock was found for method testCannotMoveInEmptyHistory()</error>
      <error line="37" code="50010">No DocBlock was found for method testCurrentTargetAccessors()</error>
      <error line="46" code="50010">No DocBlock was found for method testSecondEntryAccessors()</error>
      <error line="60" code="50010">No DocBlock was found for method testGoingBackwards()</error>
      <error line="73" code="50010">No DocBlock was found for method testGoingBackwardsOffBeginning()</error>
      <error line="83" code="50010">No DocBlock was found for method testGoingForwardsOffEnd()</error>
      <error line="93" code="50010">No DocBlock was found for method testGoingBackwardsAndForwards()</error>
      <error line="109" code="50010">No DocBlock was found for method testNewEntryReplacesNextOne()</error>
      <error line="125" code="50010">No DocBlock was found for method testNewEntryDropsFutureEntries()</error>
      <error line="149" code="50000">No DocBlock was found for \TestOfParsedPageAccess</error>
      <error line="151" code="50010">No DocBlock was found for method loadPage()</error>
      <error line="165" code="50010">No DocBlock was found for method testAccessorsWhenNoPage()</error>
      <error line="173" code="50010">No DocBlock was found for method testParse()</error>
      <error line="197" code="50010">No DocBlock was found for method testLinkAffirmationWhenPresent()</error>
      <error line="205" code="50010">No DocBlock was found for method testLinkAffirmationByIdWhenPresent()</error>
      <error line="214" code="50010">No DocBlock was found for method testSettingFieldIsPassedToPage()</error>
      <error line="224" code="50000">No DocBlock was found for \TestOfBrowserNavigation</error>
      <error line="225" code="50010">No DocBlock was found for method createBrowser()</error>
      <error line="233" code="50010">No DocBlock was found for method testBrowserRequestMethods()</error>
      <error line="268" code="50010">No DocBlock was found for method testClickLinkRequestsPage()</error>
      <error line="291" code="50010">No DocBlock was found for method testClickLinkWithUnknownFrameStillRequestsWholePage()</error>
      <error line="320" code="50010">No DocBlock was found for method testClickingMissingLinkFails()</error>
      <error line="333" code="50010">No DocBlock was found for method testClickIndexedLink()</error>
      <error line="353" code="50010">No DocBlock was found for method testClinkLinkById()</error>
      <error line="371" code="50010">No DocBlock was found for method testClickingMissingLinkIdFails()</error>
      <error line="383" code="50010">No DocBlock was found for method testSubmitFormByLabel()</error>
      <error line="407" code="50010">No DocBlock was found for method testDefaultSubmitFormByLabel()</error>
      <error line="431" code="50010">No DocBlock was found for method testSubmitFormByName()</error>
      <error line="450" code="50010">No DocBlock was found for method testSubmitFormById()</error>
      <error line="470" code="50010">No DocBlock was found for method testSubmitFormByImageLabel()</error>
      <error line="490" code="50010">No DocBlock was found for method testSubmitFormByImageName()</error>
      <error line="510" code="50010">No DocBlock was found for method testSubmitFormByImageId()</error>
      <error line="530" code="50010">No DocBlock was found for method testSubmitFormByFormId()</error>
      <error line="554" code="50000">No DocBlock was found for \TestOfBrowserFrames</error>
      <error line="556" code="50010">No DocBlock was found for method createBrowser()</error>
      <error line="563" code="50010">No DocBlock was found for method createUserAgent()</error>
      <error line="575" code="50010">No DocBlock was found for method testSimplePageHasNoFrames()</error>
      <error line="584" code="50010">No DocBlock was found for method testFramesetWithSingleFrame()</error>
      <error line="595" code="50010">No DocBlock was found for method testTitleTakenFromFramesetPage()</error>
      <error line="605" code="50010">No DocBlock was found for method testFramesetWithSingleUnnamedFrame()</error>
      <error line="618" code="50010">No DocBlock was found for method testFramesetWithMultipleFrames()</error>
      <error line="638" code="50010">No DocBlock was found for method testFrameFocusByName()</error>
      <error line="658" code="50010">No DocBlock was found for method testFramesetWithSomeNamedFrames()</error>
      <error line="681" code="50010">No DocBlock was found for method testFrameFocusWithMixedNamesAndIndexes()</error>
      <error line="707" code="50010">No DocBlock was found for method testNestedFrameset()</error>
      <error line="726" code="50010">No DocBlock was found for method testCanNavigateToNestedFrame()</error>
      <error line="764" code="50010">No DocBlock was found for method testCanNavigateToNestedFrameByIndex()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/collector_test.php" hash="88e19f96aa0f73edbebad9143f841a76" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="8" package="Default">
      <extends>\EqualExpectation</extends>
      <name>PathEqualExpectation</name>
      <full_name>\PathEqualExpectation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="9" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="9">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="9">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="13" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <argument line="13">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="18" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfCollector</name>
      <full_name>\TestOfCollector</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="19" package="Default">
        <name>testCollectionIsAddedToGroup</name>
        <full_name>testCollectionIsAddedToGroup</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="30" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfPatternCollector</name>
      <full_name>\TestOfPatternCollector</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Default">
        <name>testAddingEverythingToGroup</name>
        <full_name>testAddingEverythingToGroup</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="42" package="Default">
        <name>testOnlyMatchedFilesAreAddedToGroup</name>
        <full_name>testOnlyMatchedFilesAreAddedToGroup</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/collector_test.php</error>
      <error line="8" code="50000">No DocBlock was found for \PathEqualExpectation</error>
      <error line="9" code="50010">No DocBlock was found for method __construct()</error>
      <error line="13" code="50010">No DocBlock was found for method test()</error>
      <error line="18" code="50000">No DocBlock was found for \TestOfCollector</error>
      <error line="19" code="50010">No DocBlock was found for method testCollectionIsAddedToGroup()</error>
      <error line="30" code="50000">No DocBlock was found for \TestOfPatternCollector</error>
      <error line="32" code="50010">No DocBlock was found for method testAddingEverythingToGroup()</error>
      <error line="42" code="50010">No DocBlock was found for method testOnlyMatchedFilesAreAddedToGroup()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/command_line_test.php" hash="35200bb34bdf0ff1bf549fadc2e4ba12" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="5" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfCommandLineParsing</name>
      <full_name>\TestOfCommandLineParsing</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="7" package="Default">
        <name>testDefaultsToEmptyStringToMeanNullToTheSelectiveReporter</name>
        <full_name>testDefaultsToEmptyStringToMeanNullToTheSelectiveReporter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="13" package="Default">
        <name>testNotXmlByDefault</name>
        <full_name>testNotXmlByDefault</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="18" package="Default">
        <name>testCanDetectRequestForXml</name>
        <full_name>testCanDetectRequestForXml</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="Default">
        <name>testCanReadAssignmentSyntax</name>
        <full_name>testCanReadAssignmentSyntax</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Default">
        <name>testCanReadFollowOnSyntax</name>
        <full_name>testCanReadFollowOnSyntax</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Default">
        <name>testCanReadShortForms</name>
        <full_name>testCanReadShortForms</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/command_line_test.php</error>
      <error line="5" code="50000">No DocBlock was found for \TestOfCommandLineParsing</error>
      <error line="7" code="50010">No DocBlock was found for method testDefaultsToEmptyStringToMeanNullToTheSelectiveReporter()</error>
      <error line="13" code="50010">No DocBlock was found for method testNotXmlByDefault()</error>
      <error line="18" code="50010">No DocBlock was found for method testCanDetectRequestForXml()</error>
      <error line="23" code="50010">No DocBlock was found for method testCanReadAssignmentSyntax()</error>
      <error line="28" code="50010">No DocBlock was found for method testCanReadFollowOnSyntax()</error>
      <error line="33" code="50010">No DocBlock was found for method testCanReadShortForms()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/compatibility_test.php" hash="25516845fccf96266b623619651b2f87" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <interface namespace="global" line="8" package="Default">
      <name>ComparisonInterface</name>
      <full_name>\ComparisonInterface</full_name>
    </interface>
    <class final="false" abstract="false" namespace="global" line="6" package="Default">
      <extends/>
      <name>ComparisonClass</name>
      <full_name>\ComparisonClass</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="7" package="Default">
      <extends>\ComparisonClass</extends>
      <name>ComparisonSubclass</name>
      <full_name>\ComparisonSubclass</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="9" package="Default">
      <extends/>
      <implements>\ComparisonInterface</implements>
      <name>ComparisonClassWithInterface</name>
      <full_name>\ComparisonClassWithInterface</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="11" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfCompatibility</name>
      <full_name>\TestOfCompatibility</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="13" package="Default">
        <name>testIsA</name>
        <full_name>testIsA</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="25" package="Default">
        <name>testIdentityOfNumericStrings</name>
        <full_name>testIdentityOfNumericStrings</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>testIdentityOfObjects</name>
        <full_name>testIdentityOfObjects</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="37" package="Default">
        <name>testReferences</name>
        <full_name>testReferences</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Default">
        <name>testObjectReferences</name>
        <full_name>testObjectReferences</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="77" package="Default">
        <name>testInteraceComparison</name>
        <full_name>testInteraceComparison</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/compatibility_test.php</error>
      <error line="6" code="50000">No DocBlock was found for \ComparisonClass</error>
      <error line="7" code="50000">No DocBlock was found for \ComparisonSubclass</error>
      <error line="9" code="50000">No DocBlock was found for \ComparisonClassWithInterface</error>
      <error line="11" code="50000">No DocBlock was found for \TestOfCompatibility</error>
      <error line="13" code="50010">No DocBlock was found for method testIsA()</error>
      <error line="25" code="50010">No DocBlock was found for method testIdentityOfNumericStrings()</error>
      <error line="31" code="50010">No DocBlock was found for method testIdentityOfObjects()</error>
      <error line="37" code="50010">No DocBlock was found for method testReferences()</error>
      <error line="52" code="50010">No DocBlock was found for method testObjectReferences()</error>
      <error line="77" code="50010">No DocBlock was found for method testInteraceComparison()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/cookies_test.php" hash="5881ab682a47c1cebe2e481ed8dce41f" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="6" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfCookie</name>
      <full_name>\TestOfCookie</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="8" package="Default">
        <name>testCookieDefaults</name>
        <full_name>testCookieDefaults</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="17" package="Default">
        <name>testCookieAccessors</name>
        <full_name>testCookieAccessors</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>testFullHostname</name>
        <full_name>testFullHostname</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="Default">
        <name>testHostTruncation</name>
        <full_name>testHostTruncation</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="49" package="Default">
        <name>testBadHosts</name>
        <full_name>testBadHosts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Default">
        <name>testHostValidity</name>
        <full_name>testHostValidity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="67" package="Default">
        <name>testPathValidity</name>
        <full_name>testPathValidity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="74" package="Default">
        <name>testSessionExpiring</name>
        <full_name>testSessionExpiring</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="79" package="Default">
        <name>testTimestampExpiry</name>
        <full_name>testTimestampExpiry</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="86" package="Default">
        <name>testDateExpiry</name>
        <full_name>testDateExpiry</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="96" package="Default">
        <name>testAging</name>
        <full_name>testAging</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="105" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfCookieJar</name>
      <full_name>\TestOfCookieJar</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="107" package="Default">
        <name>testAddCookie</name>
        <full_name>testAddCookie</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="113" package="Default">
        <name>testHostFilter</name>
        <full_name>testHostFilter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="135" package="Default">
        <name>testPathFilter</name>
        <full_name>testPathFilter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="146" package="Default">
        <name>testPathFilterDeeply</name>
        <full_name>testPathFilterDeeply</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="157" package="Default">
        <name>testMultipleCookieWithDifferentPathsButSameName</name>
        <full_name>testMultipleCookieWithDifferentPathsButSameName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="178" package="Default">
        <name>testOverwrite</name>
        <full_name>testOverwrite</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="185" package="Default">
        <name>testClearSessionCookies</name>
        <full_name>testClearSessionCookies</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="192" package="Default">
        <name>testExpiryFilterByDate</name>
        <full_name>testExpiryFilterByDate</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="201" package="Default">
        <name>testExpiryFilterByAgeing</name>
        <full_name>testExpiryFilterByAgeing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="211" package="Default">
        <name>testCookieClearing</name>
        <full_name>testCookieClearing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="218" package="Default">
        <name>testCookieClearByLoweringDate</name>
        <full_name>testCookieClearByLoweringDate</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/cookies_test.php</error>
      <error line="6" code="50000">No DocBlock was found for \TestOfCookie</error>
      <error line="8" code="50010">No DocBlock was found for method testCookieDefaults()</error>
      <error line="17" code="50010">No DocBlock was found for method testCookieAccessors()</error>
      <error line="31" code="50010">No DocBlock was found for method testFullHostname()</error>
      <error line="39" code="50010">No DocBlock was found for method testHostTruncation()</error>
      <error line="49" code="50010">No DocBlock was found for method testBadHosts()</error>
      <error line="58" code="50010">No DocBlock was found for method testHostValidity()</error>
      <error line="67" code="50010">No DocBlock was found for method testPathValidity()</error>
      <error line="74" code="50010">No DocBlock was found for method testSessionExpiring()</error>
      <error line="79" code="50010">No DocBlock was found for method testTimestampExpiry()</error>
      <error line="86" code="50010">No DocBlock was found for method testDateExpiry()</error>
      <error line="96" code="50010">No DocBlock was found for method testAging()</error>
      <error line="105" code="50000">No DocBlock was found for \TestOfCookieJar</error>
      <error line="107" code="50010">No DocBlock was found for method testAddCookie()</error>
      <error line="113" code="50010">No DocBlock was found for method testHostFilter()</error>
      <error line="135" code="50010">No DocBlock was found for method testPathFilter()</error>
      <error line="146" code="50010">No DocBlock was found for method testPathFilterDeeply()</error>
      <error line="157" code="50010">No DocBlock was found for method testMultipleCookieWithDifferentPathsButSameName()</error>
      <error line="178" code="50010">No DocBlock was found for method testOverwrite()</error>
      <error line="185" code="50010">No DocBlock was found for method testClearSessionCookies()</error>
      <error line="192" code="50010">No DocBlock was found for method testExpiryFilterByDate()</error>
      <error line="201" code="50010">No DocBlock was found for method testExpiryFilterByAgeing()</error>
      <error line="211" code="50010">No DocBlock was found for method testCookieClearing()</error>
      <error line="218" code="50010">No DocBlock was found for method testCookieClearByLoweringDate()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/detached_test.php" hash="71bdddc83b4f3d95cd8b893897f39137" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name>../detached.php</name>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name>../reporter.php</name>
    </include>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/detached_test.php</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/dumper_test.php" hash="606c78a428b0732746b21b1943914dfa" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="5" package="Default">
      <extends/>
      <name>DumperDummy</name>
      <full_name>\DumperDummy</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="8" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfTextFormatting</name>
      <full_name>\TestOfTextFormatting</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="10" package="Default">
        <name>testClipping</name>
        <full_name>testClipping</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="42" package="Default">
        <name>testDescribeNull</name>
        <full_name>testDescribeNull</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Default">
        <name>testDescribeBoolean</name>
        <full_name>testDescribeBoolean</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="54" package="Default">
        <name>testDescribeString</name>
        <full_name>testDescribeString</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="60" package="Default">
        <name>testDescribeInteger</name>
        <full_name>testDescribeInteger</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="Default">
        <name>testDescribeFloat</name>
        <full_name>testDescribeFloat</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="72" package="Default">
        <name>testDescribeArray</name>
        <full_name>testDescribeArray</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="78" package="Default">
        <name>testDescribeObject</name>
        <full_name>testDescribeObject</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/dumper_test.php</error>
      <error line="5" code="50000">No DocBlock was found for \DumperDummy</error>
      <error line="8" code="50000">No DocBlock was found for \TestOfTextFormatting</error>
      <error line="10" code="50010">No DocBlock was found for method testClipping()</error>
      <error line="42" code="50010">No DocBlock was found for method testDescribeNull()</error>
      <error line="47" code="50010">No DocBlock was found for method testDescribeBoolean()</error>
      <error line="54" code="50010">No DocBlock was found for method testDescribeString()</error>
      <error line="60" code="50010">No DocBlock was found for method testDescribeInteger()</error>
      <error line="66" code="50010">No DocBlock was found for method testDescribeFloat()</error>
      <error line="72" code="50010">No DocBlock was found for method testDescribeArray()</error>
      <error line="78" code="50010">No DocBlock was found for method testDescribeObject()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/eclipse_test.php" hash="9600bea1564acfd0853b846ac52053d1" package="Default">
    <include line="9" type="Include Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="12" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfEclipse</name>
      <full_name>\TestOfEclipse</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="14" package="Default">
        <name>testPass</name>
        <full_name>testPass</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/eclipse_test.php</error>
      <error line="12" code="50000">No DocBlock was found for \TestOfEclipse</error>
      <error line="14" code="50010">No DocBlock was found for method testPass()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/encoding_test.php" hash="b874c5e074692475c3f4dfb0d50bf4f0" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="9" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfEncodedParts</name>
      <full_name>\TestOfEncodedParts</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="11" package="Default">
        <name>testFormEncodedAsKeyEqualsValue</name>
        <full_name>testFormEncodedAsKeyEqualsValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="16" package="Default">
        <name>testMimeEncodedAsHeadersAndContent</name>
        <full_name>testMimeEncodedAsHeadersAndContent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="Default">
        <name>testAttachmentEncodedAsHeadersWithDispositionAndContent</name>
        <full_name>testAttachmentEncodedAsHeadersWithDispositionAndContent</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="32" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfEncoding</name>
      <full_name>\TestOfEncoding</full_name>
      <property final="false" static="false" visibility="private" line="33" namespace="global" package="Default">
        <name>$content_so_far</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="35" package="Default">
        <name>write</name>
        <full_name>write</full_name>
        <argument line="35">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="Default">
        <name>clear</name>
        <full_name>clear</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="43" package="Default">
        <name>assertWritten</name>
        <full_name>assertWritten</full_name>
        <argument line="43">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
        <argument line="43">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
        <argument line="43">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="49" package="Default">
        <name>testGetEmpty</name>
        <full_name>testGetEmpty</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="55" package="Default">
        <name>testPostEmpty</name>
        <full_name>testPostEmpty</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="61" package="Default">
        <name>testPrefilled</name>
        <full_name>testPrefilled</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="67" package="Default">
        <name>testPrefilledWithTwoLevels</name>
        <full_name>testPrefilledWithTwoLevels</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Default">
        <name>testPrefilledWithThreeLevels</name>
        <full_name>testPrefilledWithThreeLevels</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="Default">
        <name>testPrefilledWithObject</name>
        <full_name>testPrefilledWithObject</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="91" package="Default">
        <name>testMultiplePrefilled</name>
        <full_name>testMultiplePrefilled</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="101" package="Default">
        <name>testSingleParameter</name>
        <full_name>testSingleParameter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="108" package="Default">
        <name>testFalseParameter</name>
        <full_name>testFalseParameter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="115" package="Default">
        <name>testUrlEncoding</name>
        <full_name>testUrlEncoding</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="Default">
        <name>testUrlEncodingOfKey</name>
        <full_name>testUrlEncodingOfKey</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="127" package="Default">
        <name>testMultipleParameter</name>
        <full_name>testMultipleParameter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="134" package="Default">
        <name>testEmptyParameters</name>
        <full_name>testEmptyParameters</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="141" package="Default">
        <name>testRepeatedParameter</name>
        <full_name>testRepeatedParameter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="149" package="Default">
        <name>testAddingLists</name>
        <full_name>testAddingLists</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="156" package="Default">
        <name>testMergeInHash</name>
        <full_name>testMergeInHash</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="163" package="Default">
        <name>testMergeInObject</name>
        <full_name>testMergeInObject</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="170" package="Default">
        <name>testPrefilledMultipart</name>
        <full_name>testPrefilledMultipart</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="181" package="Default">
        <name>testAttachment</name>
        <full_name>testAttachment</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="194" package="Default">
        <name>testEntityEncodingDefaultContentType</name>
        <full_name>testEntityEncodingDefaultContentType</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="200" package="Default">
        <name>testEntityEncodingTextBody</name>
        <full_name>testEntityEncodingTextBody</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="206" package="Default">
        <name>testEntityEncodingXmlBody</name>
        <full_name>testEntityEncodingXmlBody</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="213" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfEncodingHeaders</name>
      <full_name>\TestOfEncodingHeaders</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="215" package="Default">
        <name>testEmptyEncodingWritesZeroContentLength</name>
        <full_name>testEmptyEncodingWritesZeroContentLength</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="223" package="Default">
        <name>testTextEncodingWritesDefaultContentType</name>
        <full_name>testTextEncodingWritesDefaultContentType</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="231" package="Default">
        <name>testEmptyMultipartEncodingWritesEndBoundaryContentLength</name>
        <full_name>testEmptyMultipartEncodingWritesEndBoundaryContentLength</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/encoding_test.php</error>
      <error line="9" code="50000">No DocBlock was found for \TestOfEncodedParts</error>
      <error line="11" code="50010">No DocBlock was found for method testFormEncodedAsKeyEqualsValue()</error>
      <error line="16" code="50010">No DocBlock was found for method testMimeEncodedAsHeadersAndContent()</error>
      <error line="23" code="50010">No DocBlock was found for method testAttachmentEncodedAsHeadersWithDispositionAndContent()</error>
      <error line="32" code="50000">No DocBlock was found for \TestOfEncoding</error>
      <error line="33" code="50018">No DocBlock was found for property $content_so_far</error>
      <error line="35" code="50010">No DocBlock was found for method write()</error>
      <error line="39" code="50010">No DocBlock was found for method clear()</error>
      <error line="43" code="50010">No DocBlock was found for method assertWritten()</error>
      <error line="49" code="50010">No DocBlock was found for method testGetEmpty()</error>
      <error line="55" code="50010">No DocBlock was found for method testPostEmpty()</error>
      <error line="61" code="50010">No DocBlock was found for method testPrefilled()</error>
      <error line="67" code="50010">No DocBlock was found for method testPrefilledWithTwoLevels()</error>
      <error line="76" code="50010">No DocBlock was found for method testPrefilledWithThreeLevels()</error>
      <error line="85" code="50010">No DocBlock was found for method testPrefilledWithObject()</error>
      <error line="91" code="50010">No DocBlock was found for method testMultiplePrefilled()</error>
      <error line="101" code="50010">No DocBlock was found for method testSingleParameter()</error>
      <error line="108" code="50010">No DocBlock was found for method testFalseParameter()</error>
      <error line="115" code="50010">No DocBlock was found for method testUrlEncoding()</error>
      <error line="121" code="50010">No DocBlock was found for method testUrlEncodingOfKey()</error>
      <error line="127" code="50010">No DocBlock was found for method testMultipleParameter()</error>
      <error line="134" code="50010">No DocBlock was found for method testEmptyParameters()</error>
      <error line="141" code="50010">No DocBlock was found for method testRepeatedParameter()</error>
      <error line="149" code="50010">No DocBlock was found for method testAddingLists()</error>
      <error line="156" code="50010">No DocBlock was found for method testMergeInHash()</error>
      <error line="163" code="50010">No DocBlock was found for method testMergeInObject()</error>
      <error line="170" code="50010">No DocBlock was found for method testPrefilledMultipart()</error>
      <error line="181" code="50010">No DocBlock was found for method testAttachment()</error>
      <error line="194" code="50010">No DocBlock was found for method testEntityEncodingDefaultContentType()</error>
      <error line="200" code="50010">No DocBlock was found for method testEntityEncodingTextBody()</error>
      <error line="206" code="50010">No DocBlock was found for method testEntityEncodingXmlBody()</error>
      <error line="213" code="50000">No DocBlock was found for \TestOfEncodingHeaders</error>
      <error line="215" code="50010">No DocBlock was found for method testEmptyEncodingWritesZeroContentLength()</error>
      <error line="223" code="50010">No DocBlock was found for method testTextEncodingWritesDefaultContentType()</error>
      <error line="231" code="50010">No DocBlock was found for method testEmptyMultipartEncodingWritesEndBoundaryContentLength()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/errors_test.php" hash="cfb17661312c034889e795dcd0187ec6" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfErrorQueue</name>
      <full_name>\TestOfErrorQueue</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="12" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="18" package="Default">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Default">
        <name>testExpectationMatchCancelsIncomingError</name>
        <full_name>testExpectationMatchCancelsIncomingError</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="39" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfErrorTrap</name>
      <full_name>\TestOfErrorTrap</full_name>
      <property final="false" static="false" visibility="private" line="40" namespace="global" package="Default">
        <name>$old</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="42" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Default">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Default">
        <name>testQueueStartsEmpty</name>
        <full_name>testQueueStartsEmpty</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Default">
        <name>testErrorsAreSwallowedByMatchingExpectation</name>
        <full_name>testErrorsAreSwallowedByMatchingExpectation</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="63" package="Default">
        <name>testErrorsAreSwallowedInOrder</name>
        <full_name>testErrorsAreSwallowedInOrder</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="70" package="Default">
        <name>testAnyErrorCanBeSwallowed</name>
        <full_name>testAnyErrorCanBeSwallowed</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="Default">
        <name>testErrorCanBeSwallowedByPatternMatching</name>
        <full_name>testErrorCanBeSwallowedByPatternMatching</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="Default">
        <name>testErrorWithPercentsPassesWithNoSprintfError</name>
        <full_name>testErrorWithPercentsPassesWithNoSprintfError</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="86" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfErrors</name>
      <full_name>\TestOfErrors</full_name>
      <property final="false" static="false" visibility="private" line="87" namespace="global" package="Default">
        <name>$old</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="89" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="93" package="Default">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="97" package="Default">
        <name>testDefaultWhenAllReported</name>
        <full_name>testDefaultWhenAllReported</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="103" package="Default">
        <name>testNoticeWhenReported</name>
        <full_name>testNoticeWhenReported</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="109" package="Default">
        <name>testWarningWhenReported</name>
        <full_name>testWarningWhenReported</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="115" package="Default">
        <name>testErrorWhenReported</name>
        <full_name>testErrorWhenReported</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="Default">
        <name>testNoNoticeWhenNotReported</name>
        <full_name>testNoNoticeWhenNotReported</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="126" package="Default">
        <name>testNoWarningWhenNotReported</name>
        <full_name>testNoWarningWhenNotReported</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="131" package="Default">
        <name>testNoticeSuppressedWhenReported</name>
        <full_name>testNoticeSuppressedWhenReported</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="136" package="Default">
        <name>testWarningSuppressedWhenReported</name>
        <full_name>testWarningSuppressedWhenReported</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="141" package="Default">
        <name>testErrorWithPercentsReportedWithNoSprintfError</name>
        <full_name>testErrorWithPercentsReportedWithNoSprintfError</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="147" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfPHP52RecoverableErrors</name>
      <full_name>\TestOfPHP52RecoverableErrors</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="148" package="Default">
        <name>skip</name>
        <full_name>skip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="Default">
        <name>testError</name>
        <full_name>testError</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="168" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfErrorsExcludingPHP52AndAbove</name>
      <full_name>\TestOfErrorsExcludingPHP52AndAbove</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="169" package="Default">
        <name>skip</name>
        <full_name>skip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="175" package="Default">
        <name>testNoErrorWhenNotReported</name>
        <full_name>testNoErrorWhenNotReported</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="180" package="Default">
        <name>testErrorSuppressedWhenReported</name>
        <full_name>testErrorSuppressedWhenReported</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="193" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfNotEnoughErrors</name>
      <full_name>\TestOfNotEnoughErrors</full_name>
      <docblock line="187">
        <description>This test is ignored as it is used by {@link TestRunnerForLeftOverAndNotEnoughErrors}
to verify that it fails as expected.</description>
        <long-description></long-description>
        <tag line="187" name="ignore" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="194" package="Default">
        <name>testExpectTwoErrorsThrowOne</name>
        <full_name>testExpectTwoErrorsThrowOne</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="208" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfLeftOverErrors</name>
      <full_name>\TestOfLeftOverErrors</full_name>
      <docblock line="202">
        <description>This test is ignored as it is used by {@link TestRunnerForLeftOverAndNotEnoughErrors}
to verify that it fails as expected.</description>
        <long-description></long-description>
        <tag line="202" name="ignore" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="209" package="Default">
        <name>testExpectOneErrorGetTwo</name>
        <full_name>testExpectOneErrorGetTwo</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="216" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestRunnerForLeftOverAndNotEnoughErrors</name>
      <full_name>\TestRunnerForLeftOverAndNotEnoughErrors</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="217" package="Default">
        <name>testRunLeftOverErrorsTestCase</name>
        <full_name>testRunLeftOverErrorsTestCase</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="222" package="Default">
        <name>testRunNotEnoughErrors</name>
        <full_name>testRunNotEnoughErrors</full_name>
      </method>
    </class>
    <markers>
      <todo line="228">Add stacked error handler test</todo>
    </markers>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/errors_test.php</error>
      <error line="10" code="50000">No DocBlock was found for \TestOfErrorQueue</error>
      <error line="12" code="50010">No DocBlock was found for method setUp()</error>
      <error line="18" code="50010">No DocBlock was found for method tearDown()</error>
      <error line="24" code="50010">No DocBlock was found for method testExpectationMatchCancelsIncomingError()</error>
      <error line="39" code="50000">No DocBlock was found for \TestOfErrorTrap</error>
      <error line="40" code="50018">No DocBlock was found for property $old</error>
      <error line="42" code="50010">No DocBlock was found for method setUp()</error>
      <error line="47" code="50010">No DocBlock was found for method tearDown()</error>
      <error line="52" code="50010">No DocBlock was found for method testQueueStartsEmpty()</error>
      <error line="58" code="50010">No DocBlock was found for method testErrorsAreSwallowedByMatchingExpectation()</error>
      <error line="63" code="50010">No DocBlock was found for method testErrorsAreSwallowedInOrder()</error>
      <error line="70" code="50010">No DocBlock was found for method testAnyErrorCanBeSwallowed()</error>
      <error line="75" code="50010">No DocBlock was found for method testErrorCanBeSwallowedByPatternMatching()</error>
      <error line="80" code="50010">No DocBlock was found for method testErrorWithPercentsPassesWithNoSprintfError()</error>
      <error line="86" code="50000">No DocBlock was found for \TestOfErrors</error>
      <error line="87" code="50018">No DocBlock was found for property $old</error>
      <error line="89" code="50010">No DocBlock was found for method setUp()</error>
      <error line="93" code="50010">No DocBlock was found for method tearDown()</error>
      <error line="97" code="50010">No DocBlock was found for method testDefaultWhenAllReported()</error>
      <error line="103" code="50010">No DocBlock was found for method testNoticeWhenReported()</error>
      <error line="109" code="50010">No DocBlock was found for method testWarningWhenReported()</error>
      <error line="115" code="50010">No DocBlock was found for method testErrorWhenReported()</error>
      <error line="121" code="50010">No DocBlock was found for method testNoNoticeWhenNotReported()</error>
      <error line="126" code="50010">No DocBlock was found for method testNoWarningWhenNotReported()</error>
      <error line="131" code="50010">No DocBlock was found for method testNoticeSuppressedWhenReported()</error>
      <error line="136" code="50010">No DocBlock was found for method testWarningSuppressedWhenReported()</error>
      <error line="141" code="50010">No DocBlock was found for method testErrorWithPercentsReportedWithNoSprintfError()</error>
      <error line="147" code="50000">No DocBlock was found for \TestOfPHP52RecoverableErrors</error>
      <error line="148" code="50010">No DocBlock was found for method skip()</error>
      <error line="154" code="50010">No DocBlock was found for method testError()</error>
      <error line="168" code="50000">No DocBlock was found for \TestOfErrorsExcludingPHP52AndAbove</error>
      <error line="169" code="50010">No DocBlock was found for method skip()</error>
      <error line="175" code="50010">No DocBlock was found for method testNoErrorWhenNotReported()</error>
      <error line="180" code="50010">No DocBlock was found for method testErrorSuppressedWhenReported()</error>
      <error line="194" code="50010">No DocBlock was found for method testExpectTwoErrorsThrowOne()</error>
      <error line="209" code="50010">No DocBlock was found for method testExpectOneErrorGetTwo()</error>
      <error line="216" code="50000">No DocBlock was found for \TestRunnerForLeftOverAndNotEnoughErrors</error>
      <error line="217" code="50010">No DocBlock was found for method testRunLeftOverErrorsTestCase()</error>
      <error line="222" code="50010">No DocBlock was found for method testRunNotEnoughErrors()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/exceptions_test.php" hash="aa67c88301c903306d5bb48d294c2840" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends>\Exception</extends>
      <name>MyTestException</name>
      <full_name>\MyTestException</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="11" package="Default">
      <extends>\MyTestException</extends>
      <name>HigherTestException</name>
      <full_name>\HigherTestException</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="12" package="Default">
      <extends>\Exception</extends>
      <name>OtherTestException</name>
      <full_name>\OtherTestException</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="14" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfExceptionExpectation</name>
      <full_name>\TestOfExceptionExpectation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="16" package="Default">
        <name>testExceptionClassAsStringWillMatchExceptionsRootedOnThatClass</name>
        <full_name>testExceptionClassAsStringWillMatchExceptionsRootedOnThatClass</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="Default">
        <name>testMatchesClassAndMessageWhenExceptionExpected</name>
        <full_name>testMatchesClassAndMessageWhenExceptionExpected</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Default">
        <name>testMessagelessExceptionMatchesOnlyOnClass</name>
        <full_name>testMessagelessExceptionMatchesOnlyOnClass</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="39" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfExceptionTrap</name>
      <full_name>\TestOfExceptionTrap</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Default">
        <name>testNoExceptionsInQueueMeansNoTestMessages</name>
        <full_name>testNoExceptionsInQueueMeansNoTestMessages</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="Default">
        <name>testMatchingExceptionGivesTrue</name>
        <full_name>testMatchingExceptionGivesTrue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Default">
        <name>testMatchingExceptionTriggersAssertion</name>
        <full_name>testMatchingExceptionTriggersAssertion</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="70" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfCatchingExceptions</name>
      <full_name>\TestOfCatchingExceptions</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="72" package="Default">
        <name>testCanCatchAnyExpectedException</name>
        <full_name>testCanCatchAnyExpectedException</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="77" package="Default">
        <name>testCanMatchExceptionByClass</name>
        <full_name>testCanMatchExceptionByClass</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="82" package="Default">
        <name>testCanMatchExceptionExactly</name>
        <full_name>testCanMatchExceptionExactly</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="Default">
        <name>testLastListedExceptionIsTheOneThatCounts</name>
        <full_name>testLastListedExceptionIsTheOneThatCounts</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="94" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfIgnoringExceptions</name>
      <full_name>\TestOfIgnoringExceptions</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="96" package="Default">
        <name>testCanIgnoreAnyException</name>
        <full_name>testCanIgnoreAnyException</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="101" package="Default">
        <name>testCanIgnoreSpecificException</name>
        <full_name>testCanIgnoreSpecificException</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="Default">
        <name>testCanIgnoreExceptionExactly</name>
        <full_name>testCanIgnoreExceptionExactly</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="111" package="Default">
        <name>testIgnoredExceptionsDoNotMaskExpectedExceptions</name>
        <full_name>testIgnoredExceptionsDoNotMaskExpectedExceptions</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="117" package="Default">
        <name>testCanIgnoreMultipleExceptions</name>
        <full_name>testCanIgnoreMultipleExceptions</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="124" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfCallingTearDownAfterExceptions</name>
      <full_name>\TestOfCallingTearDownAfterExceptions</full_name>
      <property final="false" static="false" visibility="private" line="125" namespace="global" package="Default">
        <name>$debri</name>
        <default>0</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="127" package="Default">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="131" package="Default">
        <name>testLeaveSomeDebri</name>
        <full_name>testLeaveSomeDebri</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="137" package="Default">
        <name>testDebriWasRemovedOnce</name>
        <full_name>testDebriWasRemovedOnce</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="142" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfExceptionThrownInSetUpDoesNotRunTestBody</name>
      <full_name>\TestOfExceptionThrownInSetUpDoesNotRunTestBody</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="144" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="149" package="Default">
        <name>testShouldNotBeRun</name>
        <full_name>testShouldNotBeRun</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="153" package="Default">
        <name>testShouldNotBeRunEither</name>
        <full_name>testShouldNotBeRunEither</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="158" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfExpectExceptionWithSetUp</name>
      <full_name>\TestOfExpectExceptionWithSetUp</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="160" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="164" package="Default">
        <name>testThisExceptionShouldBeCaught</name>
        <full_name>testThisExceptionShouldBeCaught</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="168" package="Default">
        <name>testJustThrowingMyTestException</name>
        <full_name>testJustThrowingMyTestException</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="173" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfThrowingExceptionsInTearDown</name>
      <full_name>\TestOfThrowingExceptionsInTearDown</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="175" package="Default">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="179" package="Default">
        <name>testDoesntFatal</name>
        <full_name>testDoesntFatal</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/exceptions_test.php</error>
      <error line="10" code="50000">No DocBlock was found for \MyTestException</error>
      <error line="11" code="50000">No DocBlock was found for \HigherTestException</error>
      <error line="12" code="50000">No DocBlock was found for \OtherTestException</error>
      <error line="14" code="50000">No DocBlock was found for \TestOfExceptionExpectation</error>
      <error line="16" code="50010">No DocBlock was found for method testExceptionClassAsStringWillMatchExceptionsRootedOnThatClass()</error>
      <error line="23" code="50010">No DocBlock was found for method testMatchesClassAndMessageWhenExceptionExpected()</error>
      <error line="32" code="50010">No DocBlock was found for method testMessagelessExceptionMatchesOnlyOnClass()</error>
      <error line="39" code="50000">No DocBlock was found for \TestOfExceptionTrap</error>
      <error line="41" code="50010">No DocBlock was found for method testNoExceptionsInQueueMeansNoTestMessages()</error>
      <error line="48" code="50010">No DocBlock was found for method testMatchingExceptionGivesTrue()</error>
      <error line="58" code="50010">No DocBlock was found for method testMatchingExceptionTriggersAssertion()</error>
      <error line="70" code="50000">No DocBlock was found for \TestOfCatchingExceptions</error>
      <error line="72" code="50010">No DocBlock was found for method testCanCatchAnyExpectedException()</error>
      <error line="77" code="50010">No DocBlock was found for method testCanMatchExceptionByClass()</error>
      <error line="82" code="50010">No DocBlock was found for method testCanMatchExceptionExactly()</error>
      <error line="87" code="50010">No DocBlock was found for method testLastListedExceptionIsTheOneThatCounts()</error>
      <error line="94" code="50000">No DocBlock was found for \TestOfIgnoringExceptions</error>
      <error line="96" code="50010">No DocBlock was found for method testCanIgnoreAnyException()</error>
      <error line="101" code="50010">No DocBlock was found for method testCanIgnoreSpecificException()</error>
      <error line="106" code="50010">No DocBlock was found for method testCanIgnoreExceptionExactly()</error>
      <error line="111" code="50010">No DocBlock was found for method testIgnoredExceptionsDoNotMaskExpectedExceptions()</error>
      <error line="117" code="50010">No DocBlock was found for method testCanIgnoreMultipleExceptions()</error>
      <error line="124" code="50000">No DocBlock was found for \TestOfCallingTearDownAfterExceptions</error>
      <error line="125" code="50018">No DocBlock was found for property $debri</error>
      <error line="127" code="50010">No DocBlock was found for method tearDown()</error>
      <error line="131" code="50010">No DocBlock was found for method testLeaveSomeDebri()</error>
      <error line="137" code="50010">No DocBlock was found for method testDebriWasRemovedOnce()</error>
      <error line="142" code="50000">No DocBlock was found for \TestOfExceptionThrownInSetUpDoesNotRunTestBody</error>
      <error line="144" code="50010">No DocBlock was found for method setUp()</error>
      <error line="149" code="50010">No DocBlock was found for method testShouldNotBeRun()</error>
      <error line="153" code="50010">No DocBlock was found for method testShouldNotBeRunEither()</error>
      <error line="158" code="50000">No DocBlock was found for \TestOfExpectExceptionWithSetUp</error>
      <error line="160" code="50010">No DocBlock was found for method setUp()</error>
      <error line="164" code="50010">No DocBlock was found for method testThisExceptionShouldBeCaught()</error>
      <error line="168" code="50010">No DocBlock was found for method testJustThrowingMyTestException()</error>
      <error line="173" code="50000">No DocBlock was found for \TestOfThrowingExceptionsInTearDown</error>
      <error line="175" code="50010">No DocBlock was found for method tearDown()</error>
      <error line="179" code="50010">No DocBlock was found for method testDoesntFatal()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/expectation_test.php" hash="af09df52c7feee4064284b8edf7344ba" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="6" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfEquality</name>
      <full_name>\TestOfEquality</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="8" package="Default">
        <name>testBoolean</name>
        <full_name>testBoolean</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="14" package="Default">
        <name>testStringMatch</name>
        <full_name>testStringMatch</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="20" package="Default">
        <name>testInteger</name>
        <full_name>testInteger</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="26" package="Default">
        <name>testFloat</name>
        <full_name>testFloat</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Default">
        <name>testArray</name>
        <full_name>testArray</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="38" package="Default">
        <name>testHash</name>
        <full_name>testHash</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>testHashWithOutOfOrderKeysShouldStillMatch</name>
        <full_name>testHashWithOutOfOrderKeysShouldStillMatch</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="50" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfWithin</name>
      <full_name>\TestOfWithin</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Default">
        <name>testWithinFloatingPointMargin</name>
        <full_name>testWithinFloatingPointMargin</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="Default">
        <name>testOutsideFloatingPointMargin</name>
        <full_name>testOutsideFloatingPointMargin</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="71" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfInequality</name>
      <full_name>\TestOfInequality</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="Default">
        <name>testStringMismatch</name>
        <full_name>testStringMismatch</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="80" package="Default">
      <extends/>
      <name>RecursiveNasty</name>
      <full_name>\RecursiveNasty</full_name>
      <property final="false" static="false" visibility="private" line="81" namespace="global" package="Default">
        <name>$me</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="83" package="Default">
        <name>RecursiveNasty</name>
        <full_name>RecursiveNasty</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="88" package="Default">
      <extends/>
      <name>OpaqueContainer</name>
      <full_name>\OpaqueContainer</full_name>
      <property final="false" static="false" visibility="private" line="89" namespace="global" package="Default">
        <name>$stuff</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="90" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="92" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="92">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="97" package="Default">
      <extends>\OpaqueContainer</extends>
      <name>DerivedOpaqueContainer</name>
      <full_name>\DerivedOpaqueContainer</full_name>
      <property final="false" static="false" visibility="private" line="100" namespace="global" package="Default">
        <name>$new_value</name>
        <default>1</default>
      </property>
      <property final="false" static="false" visibility="private" line="104" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="106">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="106">
          <name>$base_value</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="112" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfIdentity</name>
      <full_name>\TestOfIdentity</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="Default">
        <name>testType</name>
        <full_name>testType</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="Default">
        <name>_testNastyPhp5Bug</name>
        <full_name>_testNastyPhp5Bug</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="125" package="Default">
        <name>_testReallyHorribleRecursiveStructure</name>
        <full_name>_testReallyHorribleRecursiveStructure</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="130" package="Default">
        <name>testCanComparePrivateMembers</name>
        <full_name>testCanComparePrivateMembers</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="136" package="Default">
        <name>testCanComparePrivateMembersOfObjectsInArrays</name>
        <full_name>testCanComparePrivateMembersOfObjectsInArrays</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="142" package="Default">
        <name>testCanComparePrivateMembersOfObjectsWherePrivateMemberOfBaseClassIsObscured</name>
        <full_name>testCanComparePrivateMembersOfObjectsWherePrivateMemberOfBaseClassIsObscured</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="151" package="Default">
      <extends/>
      <name>TransparentContainer</name>
      <full_name>\TransparentContainer</full_name>
      <property final="false" static="false" visibility="public" line="152" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="154">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="159" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfMemberComparison</name>
      <full_name>\TestOfMemberComparison</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="161" package="Default">
        <name>testMemberExpectationCanMatchPublicMember</name>
        <full_name>testMemberExpectationCanMatchPublicMember</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="167" package="Default">
        <name>testMemberExpectationCanMatchPrivateMember</name>
        <full_name>testMemberExpectationCanMatchPrivateMember</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="173" package="Default">
        <name>testMemberExpectationCanMatchPrivateMemberObscuredByDerivedClass</name>
        <full_name>testMemberExpectationCanMatchPrivateMemberObscuredByDerivedClass</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="183" package="Default">
      <extends/>
      <name>DummyReferencedObject</name>
      <full_name>\DummyReferencedObject</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="185" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfReference</name>
      <full_name>\TestOfReference</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="187" package="Default">
        <name>testReference</name>
        <full_name>testReference</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="200" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfNonIdentity</name>
      <full_name>\TestOfNonIdentity</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="202" package="Default">
        <name>testType</name>
        <full_name>testType</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="210" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfPatterns</name>
      <full_name>\TestOfPatterns</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="212" package="Default">
        <name>testWanted</name>
        <full_name>testWanted</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="218" package="Default">
        <name>testUnwanted</name>
        <full_name>testUnwanted</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="225" package="Default">
      <extends/>
      <name>ExpectedMethodTarget</name>
      <full_name>\ExpectedMethodTarget</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="226" package="Default">
        <name>hasThisMethod</name>
        <full_name>hasThisMethod</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="229" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfMethodExistence</name>
      <full_name>\TestOfMethodExistence</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="231" package="Default">
        <name>testHasMethod</name>
        <full_name>testHasMethod</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="240" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfIsA</name>
      <full_name>\TestOfIsA</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="242" package="Default">
        <name>testString</name>
        <full_name>testString</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="248" package="Default">
        <name>testBoolean</name>
        <full_name>testBoolean</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="254" package="Default">
        <name>testBool</name>
        <full_name>testBool</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="260" package="Default">
        <name>testDouble</name>
        <full_name>testDouble</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="266" package="Default">
        <name>testFloat</name>
        <full_name>testFloat</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="272" package="Default">
        <name>testReal</name>
        <full_name>testReal</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="278" package="Default">
        <name>testInteger</name>
        <full_name>testInteger</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="284" package="Default">
        <name>testInt</name>
        <full_name>testInt</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="290" package="Default">
        <name>testScalar</name>
        <full_name>testScalar</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="296" package="Default">
        <name>testNumeric</name>
        <full_name>testNumeric</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="302" package="Default">
        <name>testNull</name>
        <full_name>testNull</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="309" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfNotA</name>
      <full_name>\TestOfNotA</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="311" package="Default">
        <name>testString</name>
        <full_name>testString</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/expectation_test.php</error>
      <error line="6" code="50000">No DocBlock was found for \TestOfEquality</error>
      <error line="8" code="50010">No DocBlock was found for method testBoolean()</error>
      <error line="14" code="50010">No DocBlock was found for method testStringMatch()</error>
      <error line="20" code="50010">No DocBlock was found for method testInteger()</error>
      <error line="26" code="50010">No DocBlock was found for method testFloat()</error>
      <error line="32" code="50010">No DocBlock was found for method testArray()</error>
      <error line="38" code="50010">No DocBlock was found for method testHash()</error>
      <error line="44" code="50010">No DocBlock was found for method testHashWithOutOfOrderKeysShouldStillMatch()</error>
      <error line="50" code="50000">No DocBlock was found for \TestOfWithin</error>
      <error line="52" code="50010">No DocBlock was found for method testWithinFloatingPointMargin()</error>
      <error line="62" code="50010">No DocBlock was found for method testOutsideFloatingPointMargin()</error>
      <error line="71" code="50000">No DocBlock was found for \TestOfInequality</error>
      <error line="73" code="50010">No DocBlock was found for method testStringMismatch()</error>
      <error line="80" code="50000">No DocBlock was found for \RecursiveNasty</error>
      <error line="81" code="50018">No DocBlock was found for property $me</error>
      <error line="83" code="50010">No DocBlock was found for method RecursiveNasty()</error>
      <error line="88" code="50000">No DocBlock was found for \OpaqueContainer</error>
      <error line="89" code="50018">No DocBlock was found for property $stuff</error>
      <error line="90" code="50018">No DocBlock was found for property $value</error>
      <error line="92" code="50010">No DocBlock was found for method __construct()</error>
      <error line="97" code="50000">No DocBlock was found for \DerivedOpaqueContainer</error>
      <error line="100" code="50018">No DocBlock was found for property $new_value</error>
      <error line="104" code="50018">No DocBlock was found for property $value</error>
      <error line="106" code="50010">No DocBlock was found for method __construct()</error>
      <error line="112" code="50000">No DocBlock was found for \TestOfIdentity</error>
      <error line="114" code="50010">No DocBlock was found for method testType()</error>
      <error line="121" code="50010">No DocBlock was found for method _testNastyPhp5Bug()</error>
      <error line="125" code="50010">No DocBlock was found for method _testReallyHorribleRecursiveStructure()</error>
      <error line="130" code="50010">No DocBlock was found for method testCanComparePrivateMembers()</error>
      <error line="136" code="50010">No DocBlock was found for method testCanComparePrivateMembersOfObjectsInArrays()</error>
      <error line="142" code="50010">No DocBlock was found for method testCanComparePrivateMembersOfObjectsWherePrivateMemberOfBaseClassIsObscured()</error>
      <error line="151" code="50000">No DocBlock was found for \TransparentContainer</error>
      <error line="152" code="50018">No DocBlock was found for property $value</error>
      <error line="154" code="50010">No DocBlock was found for method __construct()</error>
      <error line="159" code="50000">No DocBlock was found for \TestOfMemberComparison</error>
      <error line="161" code="50010">No DocBlock was found for method testMemberExpectationCanMatchPublicMember()</error>
      <error line="167" code="50010">No DocBlock was found for method testMemberExpectationCanMatchPrivateMember()</error>
      <error line="173" code="50010">No DocBlock was found for method testMemberExpectationCanMatchPrivateMemberObscuredByDerivedClass()</error>
      <error line="183" code="50000">No DocBlock was found for \DummyReferencedObject</error>
      <error line="185" code="50000">No DocBlock was found for \TestOfReference</error>
      <error line="187" code="50010">No DocBlock was found for method testReference()</error>
      <error line="200" code="50000">No DocBlock was found for \TestOfNonIdentity</error>
      <error line="202" code="50010">No DocBlock was found for method testType()</error>
      <error line="210" code="50000">No DocBlock was found for \TestOfPatterns</error>
      <error line="212" code="50010">No DocBlock was found for method testWanted()</error>
      <error line="218" code="50010">No DocBlock was found for method testUnwanted()</error>
      <error line="225" code="50000">No DocBlock was found for \ExpectedMethodTarget</error>
      <error line="226" code="50010">No DocBlock was found for method hasThisMethod()</error>
      <error line="229" code="50000">No DocBlock was found for \TestOfMethodExistence</error>
      <error line="231" code="50010">No DocBlock was found for method testHasMethod()</error>
      <error line="240" code="50000">No DocBlock was found for \TestOfIsA</error>
      <error line="242" code="50010">No DocBlock was found for method testString()</error>
      <error line="248" code="50010">No DocBlock was found for method testBoolean()</error>
      <error line="254" code="50010">No DocBlock was found for method testBool()</error>
      <error line="260" code="50010">No DocBlock was found for method testDouble()</error>
      <error line="266" code="50010">No DocBlock was found for method testFloat()</error>
      <error line="272" code="50010">No DocBlock was found for method testReal()</error>
      <error line="278" code="50010">No DocBlock was found for method testInteger()</error>
      <error line="284" code="50010">No DocBlock was found for method testInt()</error>
      <error line="290" code="50010">No DocBlock was found for method testScalar()</error>
      <error line="296" code="50010">No DocBlock was found for method testNumeric()</error>
      <error line="302" code="50010">No DocBlock was found for method testNull()</error>
      <error line="309" code="50000">No DocBlock was found for \TestOfNotA</error>
      <error line="311" code="50010">No DocBlock was found for method testString()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/form_test.php" hash="b739d690c271ce00c7a2fbc051d7d69f" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="7" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfForm</name>
      <full_name>\TestOfForm</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="12" package="Default">
        <name>page</name>
        <full_name>page</full_name>
        <argument line="12">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="12">
          <name>$action</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="19" package="Default">
        <name>testFormAttributes</name>
        <full_name>testFormAttributes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="27" package="Default">
        <name>testAction</name>
        <full_name>testAction</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="36" package="Default">
        <name>testEmptyAction</name>
        <full_name>testEmptyAction</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>testMissingAction</name>
        <full_name>testMissingAction</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Default">
        <name>testRootAction</name>
        <full_name>testRootAction</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="63" package="Default">
        <name>testDefaultFrameTargetOnForm</name>
        <full_name>testDefaultFrameTargetOnForm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="75" package="Default">
        <name>testTextWidget</name>
        <full_name>testTextWidget</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="86" package="Default">
        <name>testTextWidgetById</name>
        <full_name>testTextWidgetById</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="95" package="Default">
        <name>testTextWidgetByLabel</name>
        <full_name>testTextWidgetByLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="105" package="Default">
        <name>testSubmitEmpty</name>
        <full_name>testSubmitEmpty</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="110" package="Default">
        <name>testSubmitButton</name>
        <full_name>testSubmitButton</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="128" package="Default">
        <name>testSubmitWithAdditionalParameters</name>
        <full_name>testSubmitWithAdditionalParameters</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="137" package="Default">
        <name>testSubmitButtonWithLabelOfSubmit</name>
        <full_name>testSubmitButtonWithLabelOfSubmit</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="149" package="Default">
        <name>testSubmitButtonWithWhitespacePaddedLabelOfSubmit</name>
        <full_name>testSubmitButtonWithWhitespacePaddedLabelOfSubmit</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="158" package="Default">
        <name>testImageSubmitButton</name>
        <full_name>testImageSubmitButton</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="180" package="Default">
        <name>testImageSubmitButtonWithAdditionalData</name>
        <full_name>testImageSubmitButtonWithAdditionalData</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="192" package="Default">
        <name>testButtonTag</name>
        <full_name>testButtonTag</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="211" package="Default">
        <name>testMultipleFieldsWithSameNameSubmitted</name>
        <full_name>testMultipleFieldsWithSameNameSubmitted</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="226" package="Default">
        <name>testSingleSelectFieldSubmitted</name>
        <full_name>testSingleSelectFieldSubmitted</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="237" package="Default">
        <name>testSingleSelectFieldSubmittedWithPost</name>
        <full_name>testSingleSelectFieldSubmittedWithPost</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="248" package="Default">
        <name>testUnchecked</name>
        <full_name>testUnchecked</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="259" package="Default">
        <name>testChecked</name>
        <full_name>testChecked</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="270" package="Default">
        <name>testSingleUncheckedRadioButton</name>
        <full_name>testSingleUncheckedRadioButton</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="279" package="Default">
        <name>testSingleCheckedRadioButton</name>
        <full_name>testSingleCheckedRadioButton</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="287" package="Default">
        <name>testUncheckedRadioButtons</name>
        <full_name>testUncheckedRadioButtons</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="302" package="Default">
        <name>testCheckedRadioButtons</name>
        <full_name>testCheckedRadioButtons</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="313" package="Default">
        <name>testMultipleFieldsWithSameKey</name>
        <full_name>testMultipleFieldsWithSameKey</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="324" package="Default">
        <name>testRemoveGetParamsFromAction</name>
        <full_name>testRemoveGetParamsFromAction</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/form_test.php</error>
      <error line="10" code="50000">No DocBlock was found for \TestOfForm</error>
      <error line="12" code="50010">No DocBlock was found for method page()</error>
      <error line="19" code="50010">No DocBlock was found for method testFormAttributes()</error>
      <error line="27" code="50010">No DocBlock was found for method testAction()</error>
      <error line="36" code="50010">No DocBlock was found for method testEmptyAction()</error>
      <error line="44" code="50010">No DocBlock was found for method testMissingAction()</error>
      <error line="52" code="50010">No DocBlock was found for method testRootAction()</error>
      <error line="63" code="50010">No DocBlock was found for method testDefaultFrameTargetOnForm()</error>
      <error line="75" code="50010">No DocBlock was found for method testTextWidget()</error>
      <error line="86" code="50010">No DocBlock was found for method testTextWidgetById()</error>
      <error line="95" code="50010">No DocBlock was found for method testTextWidgetByLabel()</error>
      <error line="105" code="50010">No DocBlock was found for method testSubmitEmpty()</error>
      <error line="110" code="50010">No DocBlock was found for method testSubmitButton()</error>
      <error line="128" code="50010">No DocBlock was found for method testSubmitWithAdditionalParameters()</error>
      <error line="137" code="50010">No DocBlock was found for method testSubmitButtonWithLabelOfSubmit()</error>
      <error line="149" code="50010">No DocBlock was found for method testSubmitButtonWithWhitespacePaddedLabelOfSubmit()</error>
      <error line="158" code="50010">No DocBlock was found for method testImageSubmitButton()</error>
      <error line="180" code="50010">No DocBlock was found for method testImageSubmitButtonWithAdditionalData()</error>
      <error line="192" code="50010">No DocBlock was found for method testButtonTag()</error>
      <error line="211" code="50010">No DocBlock was found for method testMultipleFieldsWithSameNameSubmitted()</error>
      <error line="226" code="50010">No DocBlock was found for method testSingleSelectFieldSubmitted()</error>
      <error line="237" code="50010">No DocBlock was found for method testSingleSelectFieldSubmittedWithPost()</error>
      <error line="248" code="50010">No DocBlock was found for method testUnchecked()</error>
      <error line="259" code="50010">No DocBlock was found for method testChecked()</error>
      <error line="270" code="50010">No DocBlock was found for method testSingleUncheckedRadioButton()</error>
      <error line="279" code="50010">No DocBlock was found for method testSingleCheckedRadioButton()</error>
      <error line="287" code="50010">No DocBlock was found for method testUncheckedRadioButtons()</error>
      <error line="302" code="50010">No DocBlock was found for method testCheckedRadioButtons()</error>
      <error line="313" code="50010">No DocBlock was found for method testMultipleFieldsWithSameKey()</error>
      <error line="324" code="50010">No DocBlock was found for method testRemoveGetParamsFromAction()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/frames_test.php" hash="313fb6e392f307877aa54d1eca73fbfb" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfFrameset</name>
      <full_name>\TestOfFrameset</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="12" package="Default">
        <name>testTitleReadFromFramesetPage</name>
        <full_name>testTitleReadFromFramesetPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="19" package="Default">
        <name>TestHeadersReadFromFramesetByDefault</name>
        <full_name>TestHeadersReadFromFramesetByDefault</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="38" package="Default">
        <name>testEmptyFramesetHasNoContent</name>
        <full_name>testEmptyFramesetHasNoContent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Default">
        <name>testRawContentIsFromOnlyFrame</name>
        <full_name>testRawContentIsFromOnlyFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="57" package="Default">
        <name>testRawContentIsFromAllFrames</name>
        <full_name>testRawContentIsFromAllFrames</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="Default">
        <name>testTextContentIsFromOnlyFrame</name>
        <full_name>testTextContentIsFromOnlyFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="Default">
        <name>testTextContentIsFromAllFrames</name>
        <full_name>testTextContentIsFromAllFrames</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="101" package="Default">
        <name>testFieldFoundIsFirstInFramelist</name>
        <full_name>testFieldFoundIsFirstInFramelist</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="Default">
        <name>testFrameReplacementByIndex</name>
        <full_name>testFrameReplacementByIndex</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="137" package="Default">
        <name>testFrameReplacementByName</name>
        <full_name>testFrameReplacementByName</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="154" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfFrameNavigation</name>
      <full_name>\TestOfFrameNavigation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="156" package="Default">
        <name>testStartsWithoutFrameFocus</name>
        <full_name>testStartsWithoutFrameFocus</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="163" package="Default">
        <name>testCanFocusOnSingleFrame</name>
        <full_name>testCanFocusOnSingleFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="181" package="Default">
        <name>testContentComesFromFrameInFocus</name>
        <full_name>testContentComesFromFrameInFocus</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="211" package="Default">
        <name>testCanFocusByName</name>
        <full_name>testCanFocusByName</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="241" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfFramesetPageInterface</name>
      <full_name>\TestOfFramesetPageInterface</full_name>
      <property final="false" static="false" visibility="private" line="242" namespace="global" package="Default">
        <name>$page_interface</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="243" namespace="global" package="Default">
        <name>$frameset_interface</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="245" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="251" package="Default">
        <name>assertListInAnyOrder</name>
        <full_name>assertListInAnyOrder</full_name>
        <argument line="251">
          <name>$list</name>
          <default></default>
          <type/>
        </argument>
        <argument line="251">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="257" package="Default">
        <name>getPageMethods</name>
        <full_name>getPageMethods</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="277" package="Default">
        <name>getFramesetMethods</name>
        <full_name>getFramesetMethods</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="294" package="Default">
        <name>testFramsetHasPageInterface</name>
        <full_name>testFramsetHasPageInterface</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="305" package="Default">
        <name>testHeadersReadFromFrameIfInFocus</name>
        <full_name>testHeadersReadFromFrameIfInFocus</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="338" package="Default">
        <name>testUrlsComeFromBothFrames</name>
        <full_name>testUrlsComeFromBothFrames</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="360" package="Default">
        <name>testLabelledUrlsComeFromBothFrames</name>
        <full_name>testLabelledUrlsComeFromBothFrames</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="386" package="Default">
        <name>testUrlByIdComesFromFirstFrameToRespond</name>
        <full_name>testUrlByIdComesFromFirstFrameToRespond</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="407" package="Default">
        <name>testReadUrlsFromFrameInFocus</name>
        <full_name>testReadUrlsFromFrameInFocus</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="432" package="Default">
        <name>testReadFrameTaggedUrlsFromFrameInFocus</name>
        <full_name>testReadFrameTaggedUrlsFromFrameInFocus</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="451" package="Default">
        <name>testFindingFormsById</name>
        <full_name>testFindingFormsById</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="468" package="Default">
        <name>testFindingFormsBySubmit</name>
        <full_name>testFindingFormsBySubmit</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="488" package="Default">
        <name>testFindingFormsByImage</name>
        <full_name>testFindingFormsByImage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="508" package="Default">
        <name>testSettingAllFrameFieldsWhenNoFrameFocus</name>
        <full_name>testSettingAllFrameFieldsWhenNoFrameFocus</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="521" package="Default">
        <name>testOnlySettingFieldFromFocusedFrame</name>
        <full_name>testOnlySettingFieldFromFocusedFrame</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="535" package="Default">
        <name>testOnlyGettingFieldFromFocusedFrame</name>
        <full_name>testOnlyGettingFieldFromFocusedFrame</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/frames_test.php</error>
      <error line="10" code="50000">No DocBlock was found for \TestOfFrameset</error>
      <error line="12" code="50010">No DocBlock was found for method testTitleReadFromFramesetPage()</error>
      <error line="19" code="50010">No DocBlock was found for method TestHeadersReadFromFramesetByDefault()</error>
      <error line="38" code="50010">No DocBlock was found for method testEmptyFramesetHasNoContent()</error>
      <error line="45" code="50010">No DocBlock was found for method testRawContentIsFromOnlyFrame()</error>
      <error line="57" code="50010">No DocBlock was found for method testRawContentIsFromAllFrames()</error>
      <error line="73" code="50010">No DocBlock was found for method testTextContentIsFromOnlyFrame()</error>
      <error line="85" code="50010">No DocBlock was found for method testTextContentIsFromAllFrames()</error>
      <error line="101" code="50010">No DocBlock was found for method testFieldFoundIsFirstInFramelist()</error>
      <error line="121" code="50010">No DocBlock was found for method testFrameReplacementByIndex()</error>
      <error line="137" code="50010">No DocBlock was found for method testFrameReplacementByName()</error>
      <error line="154" code="50000">No DocBlock was found for \TestOfFrameNavigation</error>
      <error line="156" code="50010">No DocBlock was found for method testStartsWithoutFrameFocus()</error>
      <error line="163" code="50010">No DocBlock was found for method testCanFocusOnSingleFrame()</error>
      <error line="181" code="50010">No DocBlock was found for method testContentComesFromFrameInFocus()</error>
      <error line="211" code="50010">No DocBlock was found for method testCanFocusByName()</error>
      <error line="241" code="50000">No DocBlock was found for \TestOfFramesetPageInterface</error>
      <error line="242" code="50018">No DocBlock was found for property $page_interface</error>
      <error line="243" code="50018">No DocBlock was found for property $frameset_interface</error>
      <error line="245" code="50010">No DocBlock was found for method __construct()</error>
      <error line="251" code="50010">No DocBlock was found for method assertListInAnyOrder()</error>
      <error line="257" code="50010">No DocBlock was found for method getPageMethods()</error>
      <error line="277" code="50010">No DocBlock was found for method getFramesetMethods()</error>
      <error line="294" code="50010">No DocBlock was found for method testFramsetHasPageInterface()</error>
      <error line="305" code="50010">No DocBlock was found for method testHeadersReadFromFrameIfInFocus()</error>
      <error line="338" code="50010">No DocBlock was found for method testUrlsComeFromBothFrames()</error>
      <error line="360" code="50010">No DocBlock was found for method testLabelledUrlsComeFromBothFrames()</error>
      <error line="386" code="50010">No DocBlock was found for method testUrlByIdComesFromFirstFrameToRespond()</error>
      <error line="407" code="50010">No DocBlock was found for method testReadUrlsFromFrameInFocus()</error>
      <error line="432" code="50010">No DocBlock was found for method testReadFrameTaggedUrlsFromFrameInFocus()</error>
      <error line="451" code="50010">No DocBlock was found for method testFindingFormsById()</error>
      <error line="468" code="50010">No DocBlock was found for method testFindingFormsBySubmit()</error>
      <error line="488" code="50010">No DocBlock was found for method testFindingFormsByImage()</error>
      <error line="508" code="50010">No DocBlock was found for method testSettingAllFrameFieldsWhenNoFrameFocus()</error>
      <error line="521" code="50010">No DocBlock was found for method testOnlySettingFieldFromFocusedFrame()</error>
      <error line="535" code="50010">No DocBlock was found for method testOnlyGettingFieldFromFocusedFrame()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/http_test.php" hash="9dea14b29ab2136582a33c4232880df5" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="7" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="20" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfDirectRoute</name>
      <full_name>\TestOfDirectRoute</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="22" package="Default">
        <name>testDefaultGetRequest</name>
        <full_name>testDefaultGetRequest</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="34" package="Default">
        <name>testDefaultPostRequest</name>
        <full_name>testDefaultPostRequest</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Default">
        <name>testDefaultDeleteRequest</name>
        <full_name>testDefaultDeleteRequest</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="59" package="Default">
        <name>testDefaultHeadRequest</name>
        <full_name>testDefaultHeadRequest</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="Default">
        <name>testGetWithPort</name>
        <full_name>testGetWithPort</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="Default">
        <name>testGetWithParameters</name>
        <full_name>testGetWithParameters</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="100" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfProxyRoute</name>
      <full_name>\TestOfProxyRoute</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="102" package="Default">
        <name>testDefaultGet</name>
        <full_name>testDefaultGet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="117" package="Default">
        <name>testDefaultPost</name>
        <full_name>testDefaultPost</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="Default">
        <name>testGetWithPort</name>
        <full_name>testGetWithPort</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="147" package="Default">
        <name>testGetWithParameters</name>
        <full_name>testGetWithParameters</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="162" package="Default">
        <name>testGetWithAuthentication</name>
        <full_name>testGetWithAuthentication</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="183" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfHttpRequest</name>
      <full_name>\TestOfHttpRequest</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="185" package="Default">
        <name>testReadingBadConnection</name>
        <full_name>testReadingBadConnection</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="194" package="Default">
        <name>testReadingGoodConnection</name>
        <full_name>testReadingGoodConnection</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="206" package="Default">
        <name>testWritingAdditionalHeaders</name>
        <full_name>testWritingAdditionalHeaders</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="220" package="Default">
        <name>testCookieWriting</name>
        <full_name>testCookieWriting</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="237" package="Default">
        <name>testMultipleCookieWriting</name>
        <full_name>testMultipleCookieWriting</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="253" package="Default">
        <name>testReadingDeleteConnection</name>
        <full_name>testReadingDeleteConnection</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="265" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfHttpPostRequest</name>
      <full_name>\TestOfHttpPostRequest</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="267" package="Default">
        <name>testReadingBadConnectionCausesErrorBecauseOfDeadSocket</name>
        <full_name>testReadingBadConnectionCausesErrorBecauseOfDeadSocket</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="276" package="Default">
        <name>testReadingGoodConnection</name>
        <full_name>testReadingGoodConnection</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="291" package="Default">
        <name>testContentHeadersCalculatedWithUrlEncodedParams</name>
        <full_name>testContentHeadersCalculatedWithUrlEncodedParams</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="308" package="Default">
        <name>testContentHeadersCalculatedWithRawEntityBody</name>
        <full_name>testContentHeadersCalculatedWithRawEntityBody</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="325" package="Default">
        <name>testContentHeadersCalculatedWithXmlEntityBody</name>
        <full_name>testContentHeadersCalculatedWithXmlEntityBody</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="343" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfHttpHeaders</name>
      <full_name>\TestOfHttpHeaders</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="345" package="Default">
        <name>testParseBasicHeaders</name>
        <full_name>testParseBasicHeaders</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="357" package="Default">
        <name>testNonStandardResponseHeader</name>
        <full_name>testNonStandardResponseHeader</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="364" package="Default">
        <name>testCanParseMultipleCookies</name>
        <full_name>testCanParseMultipleCookies</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="380" package="Default">
        <name>testCanRecogniseRedirect</name>
        <full_name>testCanRecogniseRedirect</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="391" package="Default">
        <name>testCanParseChallenge</name>
        <full_name>testCanParseChallenge</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="402" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfHttpResponse</name>
      <full_name>\TestOfHttpResponse</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="404" package="Default">
        <name>testBadRequest</name>
        <full_name>testBadRequest</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="415" package="Default">
        <name>testBadSocketDuringResponse</name>
        <full_name>testBadSocketDuringResponse</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="428" package="Default">
        <name>testIncompleteHeader</name>
        <full_name>testIncompleteHeader</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="440" package="Default">
        <name>testParseOfResponseHeadersWhenChunked</name>
        <full_name>testParseOfResponseHeadersWhenChunked</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="462" package="Default">
        <name>testRedirect</name>
        <full_name>testRedirect</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="477" package="Default">
        <name>testRedirectWithPort</name>
        <full_name>testRedirectWithPort</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/http_test.php</error>
      <error line="20" code="50000">No DocBlock was found for \TestOfDirectRoute</error>
      <error line="22" code="50010">No DocBlock was found for method testDefaultGetRequest()</error>
      <error line="34" code="50010">No DocBlock was found for method testDefaultPostRequest()</error>
      <error line="47" code="50010">No DocBlock was found for method testDefaultDeleteRequest()</error>
      <error line="59" code="50010">No DocBlock was found for method testDefaultHeadRequest()</error>
      <error line="71" code="50010">No DocBlock was found for method testGetWithPort()</error>
      <error line="85" code="50010">No DocBlock was found for method testGetWithParameters()</error>
      <error line="100" code="50000">No DocBlock was found for \TestOfProxyRoute</error>
      <error line="102" code="50010">No DocBlock was found for method testDefaultGet()</error>
      <error line="117" code="50010">No DocBlock was found for method testDefaultPost()</error>
      <error line="132" code="50010">No DocBlock was found for method testGetWithPort()</error>
      <error line="147" code="50010">No DocBlock was found for method testGetWithParameters()</error>
      <error line="162" code="50010">No DocBlock was found for method testGetWithAuthentication()</error>
      <error line="183" code="50000">No DocBlock was found for \TestOfHttpRequest</error>
      <error line="185" code="50010">No DocBlock was found for method testReadingBadConnection()</error>
      <error line="194" code="50010">No DocBlock was found for method testReadingGoodConnection()</error>
      <error line="206" code="50010">No DocBlock was found for method testWritingAdditionalHeaders()</error>
      <error line="220" code="50010">No DocBlock was found for method testCookieWriting()</error>
      <error line="237" code="50010">No DocBlock was found for method testMultipleCookieWriting()</error>
      <error line="253" code="50010">No DocBlock was found for method testReadingDeleteConnection()</error>
      <error line="265" code="50000">No DocBlock was found for \TestOfHttpPostRequest</error>
      <error line="267" code="50010">No DocBlock was found for method testReadingBadConnectionCausesErrorBecauseOfDeadSocket()</error>
      <error line="276" code="50010">No DocBlock was found for method testReadingGoodConnection()</error>
      <error line="291" code="50010">No DocBlock was found for method testContentHeadersCalculatedWithUrlEncodedParams()</error>
      <error line="308" code="50010">No DocBlock was found for method testContentHeadersCalculatedWithRawEntityBody()</error>
      <error line="325" code="50010">No DocBlock was found for method testContentHeadersCalculatedWithXmlEntityBody()</error>
      <error line="343" code="50000">No DocBlock was found for \TestOfHttpHeaders</error>
      <error line="345" code="50010">No DocBlock was found for method testParseBasicHeaders()</error>
      <error line="357" code="50010">No DocBlock was found for method testNonStandardResponseHeader()</error>
      <error line="364" code="50010">No DocBlock was found for method testCanParseMultipleCookies()</error>
      <error line="380" code="50010">No DocBlock was found for method testCanRecogniseRedirect()</error>
      <error line="391" code="50010">No DocBlock was found for method testCanParseChallenge()</error>
      <error line="402" code="50000">No DocBlock was found for \TestOfHttpResponse</error>
      <error line="404" code="50010">No DocBlock was found for method testBadRequest()</error>
      <error line="415" code="50010">No DocBlock was found for method testBadSocketDuringResponse()</error>
      <error line="428" code="50010">No DocBlock was found for method testIncompleteHeader()</error>
      <error line="440" code="50010">No DocBlock was found for method testParseOfResponseHeadersWhenChunked()</error>
      <error line="462" code="50010">No DocBlock was found for method testRedirect()</error>
      <error line="477" code="50010">No DocBlock was found for method testRedirectWithPort()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/interfaces_test.php" hash="34fe900a3eddf1a6dc3fff68463cacbd" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Include" package="Default">
      <name/>
    </include>
    <include line="8" type="Include" package="Default">
      <name/>
    </include>
    <interface namespace="global" line="11" package="Default">
      <name>DummyInterface</name>
      <full_name>\DummyInterface</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="12" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="13" package="Default">
        <name>anotherMethod</name>
        <full_name>anotherMethod</full_name>
        <argument line="13">
          <name>$a</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="14" package="Default">
        <name>referenceMethod</name>
        <full_name>referenceMethod</full_name>
        <argument line="14">
          <name>$a</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </interface>
    <interface namespace="global" line="118" package="Default">
      <name>SampleInterfaceWithConstruct</name>
      <full_name>\SampleInterfaceWithConstruct</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="119" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="119">
          <name>$something</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </interface>
    <interface namespace="global" line="128" package="Default">
      <name>SampleInterfaceWithClone</name>
      <full_name>\SampleInterfaceWithClone</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="129" package="Default">
        <name>__clone</name>
        <full_name>__clone</full_name>
      </method>
    </interface>
    <class final="false" abstract="false" namespace="global" line="20" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfMockInterfaces</name>
      <full_name>\TestOfMockInterfaces</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="22" package="Default">
        <name>testCanMockAnInterface</name>
        <full_name>testCanMockAnInterface</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>testMockedInterfaceExpectsParameters</name>
        <full_name>testMockedInterfaceExpectsParameters</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="37" package="Default">
        <name>testCannotPartiallyMockAnInterface</name>
        <full_name>testCannotPartiallyMockAnInterface</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="42" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfSpl</name>
      <full_name>\TestOfSpl</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>skip</name>
        <full_name>skip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="Default">
        <name>testCanMockAllSplClasses</name>
        <full_name>testCanMockAllSplClasses</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="74" package="Default">
        <name>testExtensionOfCommonSplClasses</name>
        <full_name>testExtensionOfCommonSplClasses</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="86" package="Default">
      <extends/>
      <name>WithHint</name>
      <full_name>\WithHint</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="Default">
        <name>hinted</name>
        <full_name>hinted</full_name>
        <argument line="87">
          <name>$object</name>
          <default></default>
          <type>\DummyInterface</type>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="90" package="Default">
      <extends/>
      <implements>\DummyInterface</implements>
      <name>ImplementsDummy</name>
      <full_name>\ImplementsDummy</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="91" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="92" package="Default">
        <name>anotherMethod</name>
        <full_name>anotherMethod</full_name>
        <argument line="92">
          <name>$a</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="93" package="Default">
        <name>referenceMethod</name>
        <full_name>referenceMethod</full_name>
        <argument line="93">
          <name>$a</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Default">
        <name>extraMethod</name>
        <full_name>extraMethod</full_name>
        <argument line="94">
          <name>$a</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="98" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfImplementations</name>
      <full_name>\TestOfImplementations</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="100" package="Default">
        <name>testMockedInterfaceCanPassThroughTypeHint</name>
        <full_name>testMockedInterfaceCanPassThroughTypeHint</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="Default">
        <name>testImplementedInterfacesAreCarried</name>
        <full_name>testImplementedInterfacesAreCarried</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="Default">
        <name>testNoSpuriousWarningsWhenSkippingDefaultedParameter</name>
        <full_name>testNoSpuriousWarningsWhenSkippingDefaultedParameter</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="122" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfInterfaceMocksWithConstruct</name>
      <full_name>\TestOfInterfaceMocksWithConstruct</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="123" package="Default">
        <name>TODO_testBasicConstructOfAnInterface</name>
        <full_name>TODO_testBasicConstructOfAnInterface</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="132" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfSampleInterfaceWithClone</name>
      <full_name>\TestOfSampleInterfaceWithClone</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="133" package="Default">
        <name>testCanMockWithoutErrors</name>
        <full_name>testCanMockWithoutErrors</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/interfaces_test.php</error>
      <error line="12" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="13" code="50010">No DocBlock was found for method anotherMethod()</error>
      <error line="14" code="50010">No DocBlock was found for method referenceMethod()</error>
      <error line="119" code="50010">No DocBlock was found for method __construct()</error>
      <error line="129" code="50010">No DocBlock was found for method __clone()</error>
      <error line="20" code="50000">No DocBlock was found for \TestOfMockInterfaces</error>
      <error line="22" code="50010">No DocBlock was found for method testCanMockAnInterface()</error>
      <error line="31" code="50010">No DocBlock was found for method testMockedInterfaceExpectsParameters()</error>
      <error line="37" code="50010">No DocBlock was found for method testCannotPartiallyMockAnInterface()</error>
      <error line="42" code="50000">No DocBlock was found for \TestOfSpl</error>
      <error line="44" code="50010">No DocBlock was found for method skip()</error>
      <error line="48" code="50010">No DocBlock was found for method testCanMockAllSplClasses()</error>
      <error line="74" code="50010">No DocBlock was found for method testExtensionOfCommonSplClasses()</error>
      <error line="86" code="50000">No DocBlock was found for \WithHint</error>
      <error line="87" code="50010">No DocBlock was found for method hinted()</error>
      <error line="90" code="50000">No DocBlock was found for \ImplementsDummy</error>
      <error line="91" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="92" code="50010">No DocBlock was found for method anotherMethod()</error>
      <error line="93" code="50010">No DocBlock was found for method referenceMethod()</error>
      <error line="94" code="50010">No DocBlock was found for method extraMethod()</error>
      <error line="98" code="50000">No DocBlock was found for \TestOfImplementations</error>
      <error line="100" code="50010">No DocBlock was found for method testMockedInterfaceCanPassThroughTypeHint()</error>
      <error line="106" code="50010">No DocBlock was found for method testImplementedInterfacesAreCarried()</error>
      <error line="112" code="50010">No DocBlock was found for method testNoSpuriousWarningsWhenSkippingDefaultedParameter()</error>
      <error line="122" code="50000">No DocBlock was found for \TestOfInterfaceMocksWithConstruct</error>
      <error line="123" code="50010">No DocBlock was found for method TODO_testBasicConstructOfAnInterface()</error>
      <error line="132" code="50000">No DocBlock was found for \TestOfSampleInterfaceWithClone</error>
      <error line="133" code="50010">No DocBlock was found for method testCanMockWithoutErrors()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/interfaces_test_php5_1.php" hash="3fed2c081527ce61268dfc9fee33139d" package="Default">
    <interface namespace="global" line="3" package="Default">
      <name>SampleInterfaceWithHintInSignature</name>
      <full_name>\SampleInterfaceWithHintInSignature</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="4" package="Default">
        <name>method</name>
        <full_name>method</full_name>
        <argument line="4">
          <name>$hinted</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </interface>
    <class final="false" abstract="false" namespace="global" line="7" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfInterfaceMocksWithHintInSignature</name>
      <full_name>\TestOfInterfaceMocksWithHintInSignature</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="8" package="Default">
        <name>testBasicConstructOfAnInterfaceWithHintInSignature</name>
        <full_name>testBasicConstructOfAnInterfaceWithHintInSignature</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/interfaces_test_php5_1.php</error>
      <error line="4" code="50010">No DocBlock was found for method method()</error>
      <error line="7" code="50000">No DocBlock was found for \TestOfInterfaceMocksWithHintInSignature</error>
      <error line="8" code="50010">No DocBlock was found for method testBasicConstructOfAnInterfaceWithHintInSignature()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/live_test.php" hash="7ca11eda571fb0b5ddf8e90d78f767db" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="12" package="Default">
      <extends>\UnitTestCase</extends>
      <name>LiveHttpTestCase</name>
      <full_name>\LiveHttpTestCase</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="14" package="Default">
        <name>testBadSocket</name>
        <full_name>testBadSocket</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Default">
        <name>testSocketClosure</name>
        <full_name>testSocketClosure</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="35" package="Default">
        <name>testRecordOfSentCharacters</name>
        <full_name>testRecordOfSentCharacters</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/live_test.php</error>
      <error line="12" code="50000">No DocBlock was found for \LiveHttpTestCase</error>
      <error line="14" code="50010">No DocBlock was found for method testBadSocket()</error>
      <error line="24" code="50010">No DocBlock was found for method testSocketClosure()</error>
      <error line="35" code="50010">No DocBlock was found for method testRecordOfSentCharacters()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/mock_objects_test.php" hash="ac349818b93e7658dee4e45f713298e3" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="7" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfAnythingExpectation</name>
      <full_name>\TestOfAnythingExpectation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="8" package="Default">
        <name>testSimpleInteger</name>
        <full_name>testSimpleInteger</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="16" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfParametersExpectation</name>
      <full_name>\TestOfParametersExpectation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="18" package="Default">
        <name>testEmptyMatch</name>
        <full_name>testEmptyMatch</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Default">
        <name>testSingleMatch</name>
        <full_name>testSingleMatch</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="30" package="Default">
        <name>testAnyMatch</name>
        <full_name>testAnyMatch</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="36" package="Default">
        <name>testMissingParameter</name>
        <full_name>testMissingParameter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Default">
        <name>testNullParameter</name>
        <full_name>testNullParameter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Default">
        <name>testAnythingExpectations</name>
        <full_name>testAnythingExpectations</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="54" package="Default">
        <name>testOtherExpectations</name>
        <full_name>testOtherExpectations</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="Default">
        <name>testIdentityOnly</name>
        <full_name>testIdentityOnly</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="68" package="Default">
        <name>testLongList</name>
        <full_name>testLongList</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="77" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfSimpleSignatureMap</name>
      <full_name>\TestOfSimpleSignatureMap</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="79" package="Default">
        <name>testEmpty</name>
        <full_name>testEmpty</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="Default">
        <name>testDifferentCallSignaturesCanHaveDifferentReferences</name>
        <full_name>testDifferentCallSignaturesCanHaveDifferentReferences</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="95" package="Default">
        <name>testWildcard</name>
        <full_name>testWildcard</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="103" package="Default">
        <name>testAllWildcard</name>
        <full_name>testAllWildcard</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="Default">
        <name>testOrdering</name>
        <full_name>testOrdering</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="132" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfCallSchedule</name>
      <full_name>\TestOfCallSchedule</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="133" package="Default">
        <name>testCanBeSetToAlwaysReturnTheSameReference</name>
        <full_name>testCanBeSetToAlwaysReturnTheSameReference</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="141" package="Default">
        <name>testSpecificSignaturesOverrideTheAlwaysCase</name>
        <full_name>testSpecificSignaturesOverrideTheAlwaysCase</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="151" package="Default">
        <name>testReturnsCanBeSetOverTime</name>
        <full_name>testReturnsCanBeSetOverTime</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="161" package="Default">
        <name>testReturnsOverTimecanBeAlteredByTheArguments</name>
        <full_name>testReturnsOverTimecanBeAlteredByTheArguments</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="174" package="Default">
        <name>testCanReturnByValue</name>
        <full_name>testCanReturnByValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="181" package="Default">
        <name>testCanThrowException</name>
        <full_name>testCanThrowException</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="190" package="Default">
        <name>testCanEmitError</name>
        <full_name>testCanEmitError</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="198" package="Default">
      <extends/>
      <name>Dummy</name>
      <full_name>\Dummy</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="199" package="Default">
        <name>Dummy</name>
        <full_name>Dummy</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="202" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="206" package="Default">
        <name>aReferenceMethod</name>
        <full_name>aReferenceMethod</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="210" package="Default">
        <name>anotherMethod</name>
        <full_name>anotherMethod</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="218" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfMockGeneration</name>
      <full_name>\TestOfMockGeneration</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="220" package="Default">
        <name>testCloning</name>
        <full_name>testCloning</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="226" package="Default">
        <name>testCloningWithExtraMethod</name>
        <full_name>testCloningWithExtraMethod</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="231" package="Default">
        <name>testCloningWithChosenClassName</name>
        <full_name>testCloningWithChosenClassName</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="237" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfMockReturns</name>
      <full_name>\TestOfMockReturns</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="239" package="Default">
        <name>testDefaultReturn</name>
        <full_name>testDefaultReturn</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="246" package="Default">
        <name>testParameteredReturn</name>
        <full_name>testParameteredReturn</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="253" package="Default">
        <name>testSetReturnGivesObjectReference</name>
        <full_name>testSetReturnGivesObjectReference</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="260" package="Default">
        <name>testSetReturnReferenceGivesOriginalReference</name>
        <full_name>testSetReturnReferenceGivesOriginalReference</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="267" package="Default">
        <name>testReturnValueCanBeChosenJustByPatternMatchingArguments</name>
        <full_name>testReturnValueCanBeChosenJustByPatternMatchingArguments</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="277" package="Default">
        <name>testMultipleMethods</name>
        <full_name>testMultipleMethods</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="289" package="Default">
        <name>testReturnSequence</name>
        <full_name>testReturnSequence</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="300" package="Default">
        <name>testSetReturnReferenceAtGivesOriginal</name>
        <full_name>testSetReturnReferenceAtGivesOriginal</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="309" package="Default">
        <name>testReturnsAtGivesOriginalObjectHandle</name>
        <full_name>testReturnsAtGivesOriginalObjectHandle</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="318" package="Default">
        <name>testComplicatedReturnSequence</name>
        <full_name>testComplicatedReturnSequence</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="333" package="Default">
        <name>testMultipleMethodSequences</name>
        <full_name>testMultipleMethodSequences</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="345" package="Default">
        <name>testSequenceFallback</name>
        <full_name>testSequenceFallback</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="354" package="Default">
        <name>testMethodInterference</name>
        <full_name>testMethodInterference</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="363" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfMockExpectationsThatPass</name>
      <full_name>\TestOfMockExpectationsThatPass</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="365" package="Default">
        <name>testAnyArgument</name>
        <full_name>testAnyArgument</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="372" package="Default">
        <name>testAnyTwoArguments</name>
        <full_name>testAnyTwoArguments</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="378" package="Default">
        <name>testSpecificArgument</name>
        <full_name>testSpecificArgument</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="384" package="Default">
        <name>testExpectation</name>
        <full_name>testExpectation</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="390" package="Default">
        <name>testArgumentsInSequence</name>
        <full_name>testArgumentsInSequence</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="398" package="Default">
        <name>testAtLeastOnceSatisfiedByOneCall</name>
        <full_name>testAtLeastOnceSatisfiedByOneCall</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="404" package="Default">
        <name>testAtLeastOnceSatisfiedByTwoCalls</name>
        <full_name>testAtLeastOnceSatisfiedByTwoCalls</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="411" package="Default">
        <name>testOnceSatisfiedByOneCall</name>
        <full_name>testOnceSatisfiedByOneCall</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="417" package="Default">
        <name>testMinimumCallsSatisfiedByEnoughCalls</name>
        <full_name>testMinimumCallsSatisfiedByEnoughCalls</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="423" package="Default">
        <name>testMinimumCallsSatisfiedByTooManyCalls</name>
        <full_name>testMinimumCallsSatisfiedByTooManyCalls</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="432" package="Default">
        <name>testMaximumCallsSatisfiedByEnoughCalls</name>
        <full_name>testMaximumCallsSatisfiedByEnoughCalls</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="438" package="Default">
        <name>testMaximumCallsSatisfiedByNoCalls</name>
        <full_name>testMaximumCallsSatisfiedByNoCalls</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="444" package="Default">
      <extends>\SimpleMock</extends>
      <name>MockWithInjectedTestCase</name>
      <full_name>\MockWithInjectedTestCase</full_name>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="445" package="Default">
        <name>getCurrentTestCase</name>
        <full_name>getCurrentTestCase</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="454" package="Default">
      <extends>\IdenticalExpectation</extends>
      <name>LikeExpectation</name>
      <full_name>\LikeExpectation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="455" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="455">
          <name>$expectation</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="460" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <argument line="460">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="465" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <argument line="465">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="471" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfMockExpectations</name>
      <full_name>\TestOfMockExpectations</full_name>
      <property final="false" static="false" visibility="private" line="472" namespace="global" package="Default">
        <name>$test</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="474" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="478" package="Default">
        <name>getMockedTest</name>
        <full_name>getMockedTest</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="482" package="Default">
        <name>testSettingExpectationOnNonMethodThrowsError</name>
        <full_name>testSettingExpectationOnNonMethodThrowsError</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="488" package="Default">
        <name>testMaxCallsDetectsOverrun</name>
        <full_name>testMaxCallsDetectsOverrun</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="498" package="Default">
        <name>testTallyOnMaxCallsSendsPassOnUnderrun</name>
        <full_name>testTallyOnMaxCallsSendsPassOnUnderrun</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="507" package="Default">
        <name>testExpectNeverDetectsOverrun</name>
        <full_name>testExpectNeverDetectsOverrun</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="515" package="Default">
        <name>testTallyOnExpectNeverStillSendsPassOnUnderrun</name>
        <full_name>testTallyOnExpectNeverStillSendsPassOnUnderrun</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="522" package="Default">
        <name>testMinCalls</name>
        <full_name>testMinCalls</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="531" package="Default">
        <name>testFailedNever</name>
        <full_name>testFailedNever</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="539" package="Default">
        <name>testUnderOnce</name>
        <full_name>testUnderOnce</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="546" package="Default">
        <name>testOverOnce</name>
        <full_name>testOverOnce</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="555" package="Default">
        <name>testUnderAtLeastOnce</name>
        <full_name>testUnderAtLeastOnce</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="562" package="Default">
        <name>testZeroArguments</name>
        <full_name>testZeroArguments</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="571" package="Default">
        <name>testExpectedArguments</name>
        <full_name>testExpectedArguments</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="580" package="Default">
        <name>testFailedArguments</name>
        <full_name>testFailedArguments</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="589" package="Default">
        <name>testWildcardsAreTranslatedToAnythingExpectations</name>
        <full_name>testWildcardsAreTranslatedToAnythingExpectations</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="602" package="Default">
        <name>testSpecificPassingSequence</name>
        <full_name>testSpecificPassingSequence</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="617" package="Default">
        <name>testNonArrayForExpectedParametersGivesError</name>
        <full_name>testNonArrayForExpectedParametersGivesError</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="626" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfMockComparisons</name>
      <full_name>\TestOfMockComparisons</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="628" package="Default">
        <name>testEqualComparisonOfMocksDoesNotCrash</name>
        <full_name>testEqualComparisonOfMocksDoesNotCrash</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="633" package="Default">
        <name>testIdenticalComparisonOfMocksDoesNotCrash</name>
        <full_name>testIdenticalComparisonOfMocksDoesNotCrash</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="639" package="Default">
      <extends/>
      <name>ClassWithSpecialMethods</name>
      <full_name>\ClassWithSpecialMethods</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="640" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <argument line="640">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="641" package="Default">
        <name>__set</name>
        <full_name>__set</full_name>
        <argument line="641">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="641">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="642" package="Default">
        <name>__isset</name>
        <full_name>__isset</full_name>
        <argument line="642">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="643" package="Default">
        <name>__unset</name>
        <full_name>__unset</full_name>
        <argument line="643">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="644" package="Default">
        <name>__call</name>
        <full_name>__call</full_name>
        <argument line="644">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
        <argument line="644">
          <name>$arguments</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="645" package="Default">
        <name>__toString</name>
        <full_name>__toString</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="649" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfSpecialMethodsAfterPHP51</name>
      <full_name>\TestOfSpecialMethodsAfterPHP51</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="651" package="Default">
        <name>skip</name>
        <full_name>skip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="655" package="Default">
        <name>testCanEmulateIsset</name>
        <full_name>testCanEmulateIsset</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="661" package="Default">
        <name>testCanExpectUnset</name>
        <full_name>testCanExpectUnset</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="669" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfSpecialMethods</name>
      <full_name>\TestOfSpecialMethods</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="670" package="Default">
        <name>skip</name>
        <full_name>skip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="674" package="Default">
        <name>testCanMockTheThingAtAll</name>
        <full_name>testCanMockTheThingAtAll</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="678" package="Default">
        <name>testReturnFromSpecialAccessor</name>
        <full_name>testReturnFromSpecialAccessor</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="686" package="Default">
        <name>testcanExpectTheSettingOfValue</name>
        <full_name>testcanExpectTheSettingOfValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="692" package="Default">
        <name>testCanSimulateAnOverloadmethod</name>
        <full_name>testCanSimulateAnOverloadmethod</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="699" package="Default">
        <name>testToStringMagic</name>
        <full_name>testToStringMagic</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="711" package="Default">
      <extends/>
      <name>WithStaticMethod</name>
      <full_name>\WithStaticMethod</full_name>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="712" package="Default">
        <name>aStaticMethod</name>
        <full_name>aStaticMethod</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="716" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfMockingClassesWithStaticMethods</name>
      <full_name>\TestOfMockingClassesWithStaticMethods</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="718" package="Default">
        <name>testStaticMethodIsMockedAsStatic</name>
        <full_name>testStaticMethodIsMockedAsStatic</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="726" package="Default">
      <extends>\Exception</extends>
      <name>MockTestException</name>
      <full_name>\MockTestException</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="728" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfThrowingExceptionsFromMocks</name>
      <full_name>\TestOfThrowingExceptionsFromMocks</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="730" package="Default">
        <name>testCanThrowOnMethodCall</name>
        <full_name>testCanThrowOnMethodCall</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="737" package="Default">
        <name>testCanThrowSpecificExceptionOnMethodCall</name>
        <full_name>testCanThrowSpecificExceptionOnMethodCall</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="744" package="Default">
        <name>testThrowsOnlyWhenCallSignatureMatches</name>
        <full_name>testThrowsOnlyWhenCallSignatureMatches</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="753" package="Default">
        <name>testCanThrowOnParticularInvocation</name>
        <full_name>testCanThrowOnParticularInvocation</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="763" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfThrowingErrorsFromMocks</name>
      <full_name>\TestOfThrowingErrorsFromMocks</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="765" package="Default">
        <name>testCanGenerateErrorFromMethodCall</name>
        <full_name>testCanGenerateErrorFromMethodCall</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="772" package="Default">
        <name>testGeneratesErrorOnlyWhenCallSignatureMatches</name>
        <full_name>testGeneratesErrorOnlyWhenCallSignatureMatches</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="781" package="Default">
        <name>testCanGenerateErrorOnParticularInvocation</name>
        <full_name>testCanGenerateErrorOnParticularInvocation</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="793" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfPartialMocks</name>
      <full_name>\TestOfPartialMocks</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="795" package="Default">
        <name>testMethodReplacementWithNoBehaviourReturnsNull</name>
        <full_name>testMethodReplacementWithNoBehaviourReturnsNull</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="801" package="Default">
        <name>testSettingReturns</name>
        <full_name>testSettingReturns</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="811" package="Default">
        <name>testSetReturnReferenceGivesOriginal</name>
        <full_name>testSetReturnReferenceGivesOriginal</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="818" package="Default">
        <name>testReturnsAtGivesOriginalObjectHandle</name>
        <full_name>testReturnsAtGivesOriginalObjectHandle</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="825" package="Default">
        <name>testExpectations</name>
        <full_name>testExpectations</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="834" package="Default">
        <name>testSettingExpectationOnMissingMethodThrowsError</name>
        <full_name>testSettingExpectationOnMissingMethodThrowsError</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="841" package="Default">
      <extends/>
      <name>ConstructorSuperClass</name>
      <full_name>\ConstructorSuperClass</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="842" package="Default">
        <name>ConstructorSuperClass</name>
        <full_name>ConstructorSuperClass</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="845" package="Default">
      <extends>\ConstructorSuperClass</extends>
      <name>ConstructorSubClass</name>
      <full_name>\ConstructorSubClass</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="847" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfPHP4StyleSuperClassConstruct</name>
      <full_name>\TestOfPHP4StyleSuperClassConstruct</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="848" package="Default">
        <name>testBasicConstruct</name>
        <full_name>testBasicConstruct</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="856" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfPHP5StaticMethodMocking</name>
      <full_name>\TestOfPHP5StaticMethodMocking</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="857" package="Default">
        <name>testCanCreateAMockObjectWithStaticMethodsWithoutError</name>
        <full_name>testCanCreateAMockObjectWithStaticMethodsWithoutError</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="867" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfPHP5AbstractMethodMocking</name>
      <full_name>\TestOfPHP5AbstractMethodMocking</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="868" package="Default">
        <name>testCanCreateAMockObjectFromAnAbstractWithProperFunctionDeclarations</name>
        <full_name>testCanCreateAMockObjectFromAnAbstractWithProperFunctionDeclarations</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="898" package="Default">
        <name>testMethodsDefinedAsAbstractInParentShouldHaveFullSignature</name>
        <full_name>testMethodsDefinedAsAbstractInParentShouldHaveFullSignature</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="955" package="Default">
      <extends/>
      <name>DummyWithProtected</name>
      <full_name>\DummyWithProtected</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="957" package="Default">
        <name>aMethodCallsProtected</name>
        <full_name>aMethodCallsProtected</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="958" package="Default">
        <name>aProtectedMethod</name>
        <full_name>aProtectedMethod</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="962" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfProtectedMethodPartialMocks</name>
      <full_name>\TestOfProtectedMethodPartialMocks</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="964" package="Default">
        <name>testProtectedMethodExists</name>
        <full_name>testProtectedMethodExists</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="973" package="Default">
        <name>testProtectedMethodIsCalled</name>
        <full_name>testProtectedMethodIsCalled</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="978" package="Default">
        <name>testMockedMethodIsCalled</name>
        <full_name>testMockedMethodIsCalled</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/mock_objects_test.php</error>
      <error line="7" code="50000">No DocBlock was found for \TestOfAnythingExpectation</error>
      <error line="8" code="50010">No DocBlock was found for method testSimpleInteger()</error>
      <error line="16" code="50000">No DocBlock was found for \TestOfParametersExpectation</error>
      <error line="18" code="50010">No DocBlock was found for method testEmptyMatch()</error>
      <error line="24" code="50010">No DocBlock was found for method testSingleMatch()</error>
      <error line="30" code="50010">No DocBlock was found for method testAnyMatch()</error>
      <error line="36" code="50010">No DocBlock was found for method testMissingParameter()</error>
      <error line="41" code="50010">No DocBlock was found for method testNullParameter()</error>
      <error line="47" code="50010">No DocBlock was found for method testAnythingExpectations()</error>
      <error line="54" code="50010">No DocBlock was found for method testOtherExpectations()</error>
      <error line="62" code="50010">No DocBlock was found for method testIdentityOnly()</error>
      <error line="68" code="50010">No DocBlock was found for method testLongList()</error>
      <error line="77" code="50000">No DocBlock was found for \TestOfSimpleSignatureMap</error>
      <error line="79" code="50010">No DocBlock was found for method testEmpty()</error>
      <error line="85" code="50010">No DocBlock was found for method testDifferentCallSignaturesCanHaveDifferentReferences()</error>
      <error line="95" code="50010">No DocBlock was found for method testWildcard()</error>
      <error line="103" code="50010">No DocBlock was found for method testAllWildcard()</error>
      <error line="112" code="50010">No DocBlock was found for method testOrdering()</error>
      <error line="132" code="50000">No DocBlock was found for \TestOfCallSchedule</error>
      <error line="133" code="50010">No DocBlock was found for method testCanBeSetToAlwaysReturnTheSameReference()</error>
      <error line="141" code="50010">No DocBlock was found for method testSpecificSignaturesOverrideTheAlwaysCase()</error>
      <error line="151" code="50010">No DocBlock was found for method testReturnsCanBeSetOverTime()</error>
      <error line="161" code="50010">No DocBlock was found for method testReturnsOverTimecanBeAlteredByTheArguments()</error>
      <error line="174" code="50010">No DocBlock was found for method testCanReturnByValue()</error>
      <error line="181" code="50010">No DocBlock was found for method testCanThrowException()</error>
      <error line="190" code="50010">No DocBlock was found for method testCanEmitError()</error>
      <error line="198" code="50000">No DocBlock was found for \Dummy</error>
      <error line="199" code="50010">No DocBlock was found for method Dummy()</error>
      <error line="202" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="206" code="50010">No DocBlock was found for method aReferenceMethod()</error>
      <error line="210" code="50010">No DocBlock was found for method anotherMethod()</error>
      <error line="218" code="50000">No DocBlock was found for \TestOfMockGeneration</error>
      <error line="220" code="50010">No DocBlock was found for method testCloning()</error>
      <error line="226" code="50010">No DocBlock was found for method testCloningWithExtraMethod()</error>
      <error line="231" code="50010">No DocBlock was found for method testCloningWithChosenClassName()</error>
      <error line="237" code="50000">No DocBlock was found for \TestOfMockReturns</error>
      <error line="239" code="50010">No DocBlock was found for method testDefaultReturn()</error>
      <error line="246" code="50010">No DocBlock was found for method testParameteredReturn()</error>
      <error line="253" code="50010">No DocBlock was found for method testSetReturnGivesObjectReference()</error>
      <error line="260" code="50010">No DocBlock was found for method testSetReturnReferenceGivesOriginalReference()</error>
      <error line="267" code="50010">No DocBlock was found for method testReturnValueCanBeChosenJustByPatternMatchingArguments()</error>
      <error line="277" code="50010">No DocBlock was found for method testMultipleMethods()</error>
      <error line="289" code="50010">No DocBlock was found for method testReturnSequence()</error>
      <error line="300" code="50010">No DocBlock was found for method testSetReturnReferenceAtGivesOriginal()</error>
      <error line="309" code="50010">No DocBlock was found for method testReturnsAtGivesOriginalObjectHandle()</error>
      <error line="318" code="50010">No DocBlock was found for method testComplicatedReturnSequence()</error>
      <error line="333" code="50010">No DocBlock was found for method testMultipleMethodSequences()</error>
      <error line="345" code="50010">No DocBlock was found for method testSequenceFallback()</error>
      <error line="354" code="50010">No DocBlock was found for method testMethodInterference()</error>
      <error line="363" code="50000">No DocBlock was found for \TestOfMockExpectationsThatPass</error>
      <error line="365" code="50010">No DocBlock was found for method testAnyArgument()</error>
      <error line="372" code="50010">No DocBlock was found for method testAnyTwoArguments()</error>
      <error line="378" code="50010">No DocBlock was found for method testSpecificArgument()</error>
      <error line="384" code="50010">No DocBlock was found for method testExpectation()</error>
      <error line="390" code="50010">No DocBlock was found for method testArgumentsInSequence()</error>
      <error line="398" code="50010">No DocBlock was found for method testAtLeastOnceSatisfiedByOneCall()</error>
      <error line="404" code="50010">No DocBlock was found for method testAtLeastOnceSatisfiedByTwoCalls()</error>
      <error line="411" code="50010">No DocBlock was found for method testOnceSatisfiedByOneCall()</error>
      <error line="417" code="50010">No DocBlock was found for method testMinimumCallsSatisfiedByEnoughCalls()</error>
      <error line="423" code="50010">No DocBlock was found for method testMinimumCallsSatisfiedByTooManyCalls()</error>
      <error line="432" code="50010">No DocBlock was found for method testMaximumCallsSatisfiedByEnoughCalls()</error>
      <error line="438" code="50010">No DocBlock was found for method testMaximumCallsSatisfiedByNoCalls()</error>
      <error line="444" code="50000">No DocBlock was found for \MockWithInjectedTestCase</error>
      <error line="445" code="50010">No DocBlock was found for method getCurrentTestCase()</error>
      <error line="454" code="50000">No DocBlock was found for \LikeExpectation</error>
      <error line="455" code="50010">No DocBlock was found for method __construct()</error>
      <error line="460" code="50010">No DocBlock was found for method test()</error>
      <error line="465" code="50010">No DocBlock was found for method testMessage()</error>
      <error line="471" code="50000">No DocBlock was found for \TestOfMockExpectations</error>
      <error line="472" code="50018">No DocBlock was found for property $test</error>
      <error line="474" code="50010">No DocBlock was found for method setUp()</error>
      <error line="478" code="50010">No DocBlock was found for method getMockedTest()</error>
      <error line="482" code="50010">No DocBlock was found for method testSettingExpectationOnNonMethodThrowsError()</error>
      <error line="488" code="50010">No DocBlock was found for method testMaxCallsDetectsOverrun()</error>
      <error line="498" code="50010">No DocBlock was found for method testTallyOnMaxCallsSendsPassOnUnderrun()</error>
      <error line="507" code="50010">No DocBlock was found for method testExpectNeverDetectsOverrun()</error>
      <error line="515" code="50010">No DocBlock was found for method testTallyOnExpectNeverStillSendsPassOnUnderrun()</error>
      <error line="522" code="50010">No DocBlock was found for method testMinCalls()</error>
      <error line="531" code="50010">No DocBlock was found for method testFailedNever()</error>
      <error line="539" code="50010">No DocBlock was found for method testUnderOnce()</error>
      <error line="546" code="50010">No DocBlock was found for method testOverOnce()</error>
      <error line="555" code="50010">No DocBlock was found for method testUnderAtLeastOnce()</error>
      <error line="562" code="50010">No DocBlock was found for method testZeroArguments()</error>
      <error line="571" code="50010">No DocBlock was found for method testExpectedArguments()</error>
      <error line="580" code="50010">No DocBlock was found for method testFailedArguments()</error>
      <error line="589" code="50010">No DocBlock was found for method testWildcardsAreTranslatedToAnythingExpectations()</error>
      <error line="602" code="50010">No DocBlock was found for method testSpecificPassingSequence()</error>
      <error line="617" code="50010">No DocBlock was found for method testNonArrayForExpectedParametersGivesError()</error>
      <error line="626" code="50000">No DocBlock was found for \TestOfMockComparisons</error>
      <error line="628" code="50010">No DocBlock was found for method testEqualComparisonOfMocksDoesNotCrash()</error>
      <error line="633" code="50010">No DocBlock was found for method testIdenticalComparisonOfMocksDoesNotCrash()</error>
      <error line="639" code="50000">No DocBlock was found for \ClassWithSpecialMethods</error>
      <error line="640" code="50010">No DocBlock was found for method __get()</error>
      <error line="641" code="50010">No DocBlock was found for method __set()</error>
      <error line="642" code="50010">No DocBlock was found for method __isset()</error>
      <error line="643" code="50010">No DocBlock was found for method __unset()</error>
      <error line="644" code="50010">No DocBlock was found for method __call()</error>
      <error line="645" code="50010">No DocBlock was found for method __toString()</error>
      <error line="649" code="50000">No DocBlock was found for \TestOfSpecialMethodsAfterPHP51</error>
      <error line="651" code="50010">No DocBlock was found for method skip()</error>
      <error line="655" code="50010">No DocBlock was found for method testCanEmulateIsset()</error>
      <error line="661" code="50010">No DocBlock was found for method testCanExpectUnset()</error>
      <error line="669" code="50000">No DocBlock was found for \TestOfSpecialMethods</error>
      <error line="670" code="50010">No DocBlock was found for method skip()</error>
      <error line="674" code="50010">No DocBlock was found for method testCanMockTheThingAtAll()</error>
      <error line="678" code="50010">No DocBlock was found for method testReturnFromSpecialAccessor()</error>
      <error line="686" code="50010">No DocBlock was found for method testcanExpectTheSettingOfValue()</error>
      <error line="692" code="50010">No DocBlock was found for method testCanSimulateAnOverloadmethod()</error>
      <error line="699" code="50010">No DocBlock was found for method testToStringMagic()</error>
      <error line="711" code="50000">No DocBlock was found for \WithStaticMethod</error>
      <error line="712" code="50010">No DocBlock was found for method aStaticMethod()</error>
      <error line="716" code="50000">No DocBlock was found for \TestOfMockingClassesWithStaticMethods</error>
      <error line="718" code="50010">No DocBlock was found for method testStaticMethodIsMockedAsStatic()</error>
      <error line="726" code="50000">No DocBlock was found for \MockTestException</error>
      <error line="728" code="50000">No DocBlock was found for \TestOfThrowingExceptionsFromMocks</error>
      <error line="730" code="50010">No DocBlock was found for method testCanThrowOnMethodCall()</error>
      <error line="737" code="50010">No DocBlock was found for method testCanThrowSpecificExceptionOnMethodCall()</error>
      <error line="744" code="50010">No DocBlock was found for method testThrowsOnlyWhenCallSignatureMatches()</error>
      <error line="753" code="50010">No DocBlock was found for method testCanThrowOnParticularInvocation()</error>
      <error line="763" code="50000">No DocBlock was found for \TestOfThrowingErrorsFromMocks</error>
      <error line="765" code="50010">No DocBlock was found for method testCanGenerateErrorFromMethodCall()</error>
      <error line="772" code="50010">No DocBlock was found for method testGeneratesErrorOnlyWhenCallSignatureMatches()</error>
      <error line="781" code="50010">No DocBlock was found for method testCanGenerateErrorOnParticularInvocation()</error>
      <error line="793" code="50000">No DocBlock was found for \TestOfPartialMocks</error>
      <error line="795" code="50010">No DocBlock was found for method testMethodReplacementWithNoBehaviourReturnsNull()</error>
      <error line="801" code="50010">No DocBlock was found for method testSettingReturns()</error>
      <error line="811" code="50010">No DocBlock was found for method testSetReturnReferenceGivesOriginal()</error>
      <error line="818" code="50010">No DocBlock was found for method testReturnsAtGivesOriginalObjectHandle()</error>
      <error line="825" code="50010">No DocBlock was found for method testExpectations()</error>
      <error line="834" code="50010">No DocBlock was found for method testSettingExpectationOnMissingMethodThrowsError()</error>
      <error line="841" code="50000">No DocBlock was found for \ConstructorSuperClass</error>
      <error line="842" code="50010">No DocBlock was found for method ConstructorSuperClass()</error>
      <error line="845" code="50000">No DocBlock was found for \ConstructorSubClass</error>
      <error line="847" code="50000">No DocBlock was found for \TestOfPHP4StyleSuperClassConstruct</error>
      <error line="848" code="50010">No DocBlock was found for method testBasicConstruct()</error>
      <error line="856" code="50000">No DocBlock was found for \TestOfPHP5StaticMethodMocking</error>
      <error line="857" code="50010">No DocBlock was found for method testCanCreateAMockObjectWithStaticMethodsWithoutError()</error>
      <error line="867" code="50000">No DocBlock was found for \TestOfPHP5AbstractMethodMocking</error>
      <error line="868" code="50010">No DocBlock was found for method testCanCreateAMockObjectFromAnAbstractWithProperFunctionDeclarations()</error>
      <error line="898" code="50010">No DocBlock was found for method testMethodsDefinedAsAbstractInParentShouldHaveFullSignature()</error>
      <error line="955" code="50000">No DocBlock was found for \DummyWithProtected</error>
      <error line="957" code="50010">No DocBlock was found for method aMethodCallsProtected()</error>
      <error line="958" code="50010">No DocBlock was found for method aProtectedMethod()</error>
      <error line="962" code="50000">No DocBlock was found for \TestOfProtectedMethodPartialMocks</error>
      <error line="964" code="50010">No DocBlock was found for method testProtectedMethodExists()</error>
      <error line="973" code="50010">No DocBlock was found for method testProtectedMethodIsCalled()</error>
      <error line="978" code="50010">No DocBlock was found for method testMockedMethodIsCalled()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/page_test.php" hash="28df25f77fb5544c0eedd0f1f22e46f9" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfPageInterface</name>
      <full_name>\TestOfPageInterface</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="11" package="Default">
        <name>testInterfaceOnEmptyPage</name>
        <full_name>testInterfaceOnEmptyPage</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="26" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfPageHeaders</name>
      <full_name>\TestOfPageHeaders</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Default">
        <name>testUrlAccessor</name>
        <full_name>testUrlAccessor</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="43" package="Default">
        <name>testTransportError</name>
        <full_name>testTransportError</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="51" package="Default">
        <name>testHeadersAccessor</name>
        <full_name>testHeadersAccessor</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="Default">
        <name>testMimeAccessor</name>
        <full_name>testMimeAccessor</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="Default">
        <name>testResponseAccessor</name>
        <full_name>testResponseAccessor</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="Default">
        <name>testAuthenticationAccessors</name>
        <full_name>testAuthenticationAccessors</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="98" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfHtmlStrippingAndNormalisation</name>
      <full_name>\TestOfHtmlStrippingAndNormalisation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="100" package="Default">
        <name>testImageSuppressionWhileKeepingParagraphsAndAltText</name>
        <full_name>testImageSuppressionWhileKeepingParagraphsAndAltText</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="Default">
        <name>testSpaceNormalisation</name>
        <full_name>testSpaceNormalisation</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="Default">
        <name>testMultilinesCommentSuppression</name>
        <full_name>testMultilinesCommentSuppression</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="118" package="Default">
        <name>testCommentSuppression</name>
        <full_name>testCommentSuppression</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="124" package="Default">
        <name>testJavascriptSuppression</name>
        <full_name>testJavascriptSuppression</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="136" package="Default">
        <name>testTagSuppression</name>
        <full_name>testTagSuppression</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="142" package="Default">
        <name>testAdjoiningTagSuppression</name>
        <full_name>testAdjoiningTagSuppression</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="148" package="Default">
        <name>testExtractImageAltTextWithDifferentQuotes</name>
        <full_name>testExtractImageAltTextWithDifferentQuotes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="Default">
        <name>testExtractImageAltTextMultipleTimes</name>
        <full_name>testExtractImageAltTextMultipleTimes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="160" package="Default">
        <name>testHtmlEntityTranslation</name>
        <full_name>testHtmlEntityTranslation</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/page_test.php</error>
      <error line="10" code="50000">No DocBlock was found for \TestOfPageInterface</error>
      <error line="11" code="50010">No DocBlock was found for method testInterfaceOnEmptyPage()</error>
      <error line="26" code="50000">No DocBlock was found for \TestOfPageHeaders</error>
      <error line="28" code="50010">No DocBlock was found for method testUrlAccessor()</error>
      <error line="43" code="50010">No DocBlock was found for method testTransportError()</error>
      <error line="51" code="50010">No DocBlock was found for method testHeadersAccessor()</error>
      <error line="62" code="50010">No DocBlock was found for method testMimeAccessor()</error>
      <error line="73" code="50010">No DocBlock was found for method testResponseAccessor()</error>
      <error line="84" code="50010">No DocBlock was found for method testAuthenticationAccessors()</error>
      <error line="98" code="50000">No DocBlock was found for \TestOfHtmlStrippingAndNormalisation</error>
      <error line="100" code="50010">No DocBlock was found for method testImageSuppressionWhileKeepingParagraphsAndAltText()</error>
      <error line="106" code="50010">No DocBlock was found for method testSpaceNormalisation()</error>
      <error line="112" code="50010">No DocBlock was found for method testMultilinesCommentSuppression()</error>
      <error line="118" code="50010">No DocBlock was found for method testCommentSuppression()</error>
      <error line="124" code="50010">No DocBlock was found for method testJavascriptSuppression()</error>
      <error line="136" code="50010">No DocBlock was found for method testTagSuppression()</error>
      <error line="142" code="50010">No DocBlock was found for method testAdjoiningTagSuppression()</error>
      <error line="148" code="50010">No DocBlock was found for method testExtractImageAltTextWithDifferentQuotes()</error>
      <error line="154" code="50010">No DocBlock was found for method testExtractImageAltTextMultipleTimes()</error>
      <error line="160" code="50010">No DocBlock was found for method testHtmlEntityTranslation()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/parse_error_test.php" hash="3a80116606ae850381878b67bd3b16bd" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name>../unit_tester.php</name>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name>../reporter.php</name>
    </include>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/parse_error_test.php</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/parsing_test.php" hash="4a31bf3c5f2868a9af26ec00fa99b9e7" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="true" abstract="true" namespace="global" line="9" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfParsing</name>
      <full_name>\TestOfParsing</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="11" package="Default">
        <name>testRawAccessor</name>
        <full_name>testRawAccessor</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="16" package="Default">
        <name>testTextAccessor</name>
        <full_name>testTextAccessor</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="21" package="Default">
        <name>testFramesetAbsence</name>
        <full_name>testFramesetAbsence</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="27" package="Default">
        <name>testPageWithNoUrlsGivesEmptyArrayOfLinks</name>
        <full_name>testPageWithNoUrlsGivesEmptyArrayOfLinks</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Default">
        <name>testAddAbsoluteLink</name>
        <full_name>testAddAbsoluteLink</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="40" package="Default">
        <name>testUrlLabelsHaveHtmlTagsStripped</name>
        <full_name>testUrlLabelsHaveHtmlTagsStripped</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="Default">
        <name>testAddStrictRelativeLink</name>
        <full_name>testAddStrictRelativeLink</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="Default">
        <name>testAddBareRelativeLink</name>
        <full_name>testAddBareRelativeLink</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="64" package="Default">
        <name>testAddRelativeLinkWithBaseTag</name>
        <full_name>testAddRelativeLinkWithBaseTag</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="74" package="Default">
        <name>testAddAbsoluteLinkWithBaseTag</name>
        <full_name>testAddAbsoluteLinkWithBaseTag</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="Default">
        <name>testCanFindLinkInsideForm</name>
        <full_name>testCanFindLinkInsideForm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="92" package="Default">
        <name>testCanGetLinksByIdOrLabel</name>
        <full_name>testCanGetLinksByIdOrLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="104" package="Default">
        <name>testCanFindLinkByNormalisedLabel</name>
        <full_name>testCanFindLinkByNormalisedLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="Default">
        <name>testCanFindLinkByImageAltText</name>
        <full_name>testCanFindLinkByImageAltText</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="120" package="Default">
        <name>testTitle</name>
        <full_name>testTitle</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="126" package="Default">
        <name>testTitleWithEntityReference</name>
        <full_name>testTitleWithEntityReference</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="Default">
        <name>testOnlyFramesInFramesetAreRecognised</name>
        <full_name>testOnlyFramesInFramesetAreRecognised</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="146" package="Default">
        <name>testReadsNamesInFrames</name>
        <full_name>testReadsNamesInFrames</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="163" package="Default">
        <name>testRelativeFramesRespectBaseTag</name>
        <full_name>testRelativeFramesRespectBaseTag</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="171" package="Default">
        <name>testSingleFrameInNestedFrameset</name>
        <full_name>testSingleFrameInNestedFrameset</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="182" package="Default">
        <name>testFramesCollectedWithNestedFramesetTags</name>
        <full_name>testFramesCollectedWithNestedFramesetTags</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="196" package="Default">
        <name>testNamedFrames</name>
        <full_name>testNamedFrames</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="212" package="Default">
        <name>testCanReadElementOfCompleteForm</name>
        <full_name>testCanReadElementOfCompleteForm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="220" package="Default">
        <name>testCanReadElementOfUnclosedForm</name>
        <full_name>testCanReadElementOfUnclosedForm</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="228" package="Default">
        <name>testCanReadElementByLabel</name>
        <full_name>testCanReadElementByLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="236" package="Default">
        <name>testCanFindFormByLabel</name>
        <full_name>testCanFindFormByLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="246" package="Default">
        <name>testConfirmSubmitAttributesAreCaseSensitive</name>
        <full_name>testConfirmSubmitAttributesAreCaseSensitive</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="257" package="Default">
        <name>testCanFindFormByImage</name>
        <full_name>testCanFindFormByImage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="273" package="Default">
        <name>testCanFindFormByButtonTag</name>
        <full_name>testCanFindFormByButtonTag</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="288" package="Default">
        <name>testCanFindFormById</name>
        <full_name>testCanFindFormById</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="295" package="Default">
        <name>testFormCanBeSubmitted</name>
        <full_name>testFormCanBeSubmitted</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="306" package="Default">
        <name>testUnparsedTagDoesNotCrash</name>
        <full_name>testUnparsedTagDoesNotCrash</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="311" package="Default">
        <name>testReadingTextField</name>
        <full_name>testReadingTextField</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="322" package="Default">
        <name>testEntitiesAreDecodedInDefaultTextFieldValue</name>
        <full_name>testEntitiesAreDecodedInDefaultTextFieldValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="328" package="Default">
        <name>testReadingTextFieldIsCaseInsensitive</name>
        <full_name>testReadingTextFieldIsCaseInsensitive</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="339" package="Default">
        <name>testSettingTextField</name>
        <full_name>testSettingTextField</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="354" package="Default">
        <name>testSettingTextFieldByEnclosingLabel</name>
        <full_name>testSettingTextFieldByEnclosingLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="367" package="Default">
        <name>testLabelsWithoutForDoNotAttachToInputsWithNoId</name>
        <full_name>testLabelsWithoutForDoNotAttachToInputsWithNoId</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="381" package="Default">
        <name>testGettingTextFieldByEnclosingLabelWithConflictingOtherFields</name>
        <full_name>testGettingTextFieldByEnclosingLabelWithConflictingOtherFields</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="394" package="Default">
        <name>testSettingTextFieldByExternalLabel</name>
        <full_name>testSettingTextFieldByExternalLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="405" package="Default">
        <name>testReadingTextArea</name>
        <full_name>testReadingTextArea</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="414" package="Default">
        <name>testEntitiesAreDecodedInTextareaValue</name>
        <full_name>testEntitiesAreDecodedInTextareaValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="420" package="Default">
        <name>testNewlinesPreservedInTextArea</name>
        <full_name>testNewlinesPreservedInTextArea</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="426" package="Default">
        <name>testWhitespacePreservedInTextArea</name>
        <full_name>testWhitespacePreservedInTextArea</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="432" package="Default">
        <name>testComplexWhitespaceInTextArea</name>
        <full_name>testComplexWhitespaceInTextArea</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="448" package="Default">
        <name>testSettingTextArea</name>
        <full_name>testSettingTextArea</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="458" package="Default">
        <name>testDontIncludeTextAreaContentInLabel</name>
        <full_name>testDontIncludeTextAreaContentInLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="464" package="Default">
        <name>testSettingSelectionField</name>
        <full_name>testSettingSelectionField</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="479" package="Default">
        <name>testSelectionOptionsAreNormalised</name>
        <full_name>testSelectionOptionsAreNormalised</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="492" package="Default">
        <name>testCanParseBlankOptions</name>
        <full_name>testCanParseBlankOptions</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="504" package="Default">
        <name>testTwoSelectionFieldsAreIndependent</name>
        <full_name>testTwoSelectionFieldsAreIndependent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="521" package="Default">
        <name>testEmptyOptionDoesNotScrewUpTwoSelectionFields</name>
        <full_name>testEmptyOptionDoesNotScrewUpTwoSelectionFields</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="539" package="Default">
        <name>testSettingSelectionFieldByEnclosingLabel</name>
        <full_name>testSettingSelectionFieldByEnclosingLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="551" package="Default">
        <name>testTwoSelectionFieldsWithLabelsAreIndependent</name>
        <full_name>testTwoSelectionFieldsWithLabelsAreIndependent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="572" package="Default">
        <name>testSettingRadioButtonByEnclosingLabel</name>
        <full_name>testSettingRadioButtonByEnclosingLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="583" package="Default">
        <name>testCanParseInputsWithAllKindsOfAttributeQuoting</name>
        <full_name>testCanParseInputsWithAllKindsOfAttributeQuoting</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="595" package="Default">
        <name>urlToString</name>
        <full_name>urlToString</full_name>
        <argument line="595">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="599" package="Default">
        <name>assertSameFrameset</name>
        <full_name>assertSameFrameset</full_name>
        <argument line="599">
          <name>$actual</name>
          <default></default>
          <type/>
        </argument>
        <argument line="599">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="605" package="Default">
      <extends>\TestOfParsing</extends>
      <name>TestOfParsingUsingPhpParser</name>
      <full_name>\TestOfParsingUsingPhpParser</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="607" package="Default">
        <name>whenVisiting</name>
        <full_name>whenVisiting</full_name>
        <argument line="607">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="607">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="615" package="Default">
        <name>testNastyTitle</name>
        <full_name>testNastyTitle</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="621" package="Default">
        <name>testLabelShouldStopAtClosingLabelTag</name>
        <full_name>testLabelShouldStopAtClosingLabelTag</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="628" package="Default">
      <extends>\TestOfParsing</extends>
      <name>TestOfParsingUsingTidyParser</name>
      <full_name>\TestOfParsingUsingTidyParser</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="630" package="Default">
        <name>skip</name>
        <full_name>skip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="634" package="Default">
        <name>whenVisiting</name>
        <full_name>whenVisiting</full_name>
        <argument line="634">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="634">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/parsing_test.php</error>
      <error line="9" code="50000">No DocBlock was found for \TestOfParsing</error>
      <error line="11" code="50010">No DocBlock was found for method testRawAccessor()</error>
      <error line="16" code="50010">No DocBlock was found for method testTextAccessor()</error>
      <error line="21" code="50010">No DocBlock was found for method testFramesetAbsence()</error>
      <error line="27" code="50010">No DocBlock was found for method testPageWithNoUrlsGivesEmptyArrayOfLinks()</error>
      <error line="32" code="50010">No DocBlock was found for method testAddAbsoluteLink()</error>
      <error line="40" code="50010">No DocBlock was found for method testUrlLabelsHaveHtmlTagsStripped()</error>
      <error line="48" code="50010">No DocBlock was found for method testAddStrictRelativeLink()</error>
      <error line="56" code="50010">No DocBlock was found for method testAddBareRelativeLink()</error>
      <error line="64" code="50010">No DocBlock was found for method testAddRelativeLinkWithBaseTag()</error>
      <error line="74" code="50010">No DocBlock was found for method testAddAbsoluteLinkWithBaseTag()</error>
      <error line="84" code="50010">No DocBlock was found for method testCanFindLinkInsideForm()</error>
      <error line="92" code="50010">No DocBlock was found for method testCanGetLinksByIdOrLabel()</error>
      <error line="104" code="50010">No DocBlock was found for method testCanFindLinkByNormalisedLabel()</error>
      <error line="112" code="50010">No DocBlock was found for method testCanFindLinkByImageAltText()</error>
      <error line="120" code="50010">No DocBlock was found for method testTitle()</error>
      <error line="126" code="50010">No DocBlock was found for method testTitleWithEntityReference()</error>
      <error line="132" code="50010">No DocBlock was found for method testOnlyFramesInFramesetAreRecognised()</error>
      <error line="146" code="50010">No DocBlock was found for method testReadsNamesInFrames()</error>
      <error line="163" code="50010">No DocBlock was found for method testRelativeFramesRespectBaseTag()</error>
      <error line="171" code="50010">No DocBlock was found for method testSingleFrameInNestedFrameset()</error>
      <error line="182" code="50010">No DocBlock was found for method testFramesCollectedWithNestedFramesetTags()</error>
      <error line="196" code="50010">No DocBlock was found for method testNamedFrames()</error>
      <error line="212" code="50010">No DocBlock was found for method testCanReadElementOfCompleteForm()</error>
      <error line="220" code="50010">No DocBlock was found for method testCanReadElementOfUnclosedForm()</error>
      <error line="228" code="50010">No DocBlock was found for method testCanReadElementByLabel()</error>
      <error line="236" code="50010">No DocBlock was found for method testCanFindFormByLabel()</error>
      <error line="246" code="50010">No DocBlock was found for method testConfirmSubmitAttributesAreCaseSensitive()</error>
      <error line="257" code="50010">No DocBlock was found for method testCanFindFormByImage()</error>
      <error line="273" code="50010">No DocBlock was found for method testCanFindFormByButtonTag()</error>
      <error line="288" code="50010">No DocBlock was found for method testCanFindFormById()</error>
      <error line="295" code="50010">No DocBlock was found for method testFormCanBeSubmitted()</error>
      <error line="306" code="50010">No DocBlock was found for method testUnparsedTagDoesNotCrash()</error>
      <error line="311" code="50010">No DocBlock was found for method testReadingTextField()</error>
      <error line="322" code="50010">No DocBlock was found for method testEntitiesAreDecodedInDefaultTextFieldValue()</error>
      <error line="328" code="50010">No DocBlock was found for method testReadingTextFieldIsCaseInsensitive()</error>
      <error line="339" code="50010">No DocBlock was found for method testSettingTextField()</error>
      <error line="354" code="50010">No DocBlock was found for method testSettingTextFieldByEnclosingLabel()</error>
      <error line="367" code="50010">No DocBlock was found for method testLabelsWithoutForDoNotAttachToInputsWithNoId()</error>
      <error line="381" code="50010">No DocBlock was found for method testGettingTextFieldByEnclosingLabelWithConflictingOtherFields()</error>
      <error line="394" code="50010">No DocBlock was found for method testSettingTextFieldByExternalLabel()</error>
      <error line="405" code="50010">No DocBlock was found for method testReadingTextArea()</error>
      <error line="414" code="50010">No DocBlock was found for method testEntitiesAreDecodedInTextareaValue()</error>
      <error line="420" code="50010">No DocBlock was found for method testNewlinesPreservedInTextArea()</error>
      <error line="426" code="50010">No DocBlock was found for method testWhitespacePreservedInTextArea()</error>
      <error line="432" code="50010">No DocBlock was found for method testComplexWhitespaceInTextArea()</error>
      <error line="448" code="50010">No DocBlock was found for method testSettingTextArea()</error>
      <error line="458" code="50010">No DocBlock was found for method testDontIncludeTextAreaContentInLabel()</error>
      <error line="464" code="50010">No DocBlock was found for method testSettingSelectionField()</error>
      <error line="479" code="50010">No DocBlock was found for method testSelectionOptionsAreNormalised()</error>
      <error line="492" code="50010">No DocBlock was found for method testCanParseBlankOptions()</error>
      <error line="504" code="50010">No DocBlock was found for method testTwoSelectionFieldsAreIndependent()</error>
      <error line="521" code="50010">No DocBlock was found for method testEmptyOptionDoesNotScrewUpTwoSelectionFields()</error>
      <error line="539" code="50010">No DocBlock was found for method testSettingSelectionFieldByEnclosingLabel()</error>
      <error line="551" code="50010">No DocBlock was found for method testTwoSelectionFieldsWithLabelsAreIndependent()</error>
      <error line="572" code="50010">No DocBlock was found for method testSettingRadioButtonByEnclosingLabel()</error>
      <error line="583" code="50010">No DocBlock was found for method testCanParseInputsWithAllKindsOfAttributeQuoting()</error>
      <error line="595" code="50010">No DocBlock was found for method urlToString()</error>
      <error line="599" code="50010">No DocBlock was found for method assertSameFrameset()</error>
      <error line="605" code="50000">No DocBlock was found for \TestOfParsingUsingPhpParser</error>
      <error line="607" code="50010">No DocBlock was found for method whenVisiting()</error>
      <error line="615" code="50010">No DocBlock was found for method testNastyTitle()</error>
      <error line="621" code="50010">No DocBlock was found for method testLabelShouldStopAtClosingLabelTag()</error>
      <error line="628" code="50000">No DocBlock was found for \TestOfParsingUsingTidyParser</error>
      <error line="630" code="50010">No DocBlock was found for method skip()</error>
      <error line="634" code="50010">No DocBlock was found for method whenVisiting()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/php_parser_test.php" hash="78b319ff1340087c34a01ef46564c015" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="16" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfParallelRegex</name>
      <full_name>\TestOfParallelRegex</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="18" package="Default">
        <name>testNoPatterns</name>
        <full_name>testNoPatterns</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Default">
        <name>testNoSubject</name>
        <full_name>testNoSubject</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>testMatchAll</name>
        <full_name>testMatchAll</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="38" package="Default">
        <name>testCaseSensitive</name>
        <full_name>testCaseSensitive</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Default">
        <name>testCaseInsensitive</name>
        <full_name>testCaseInsensitive</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="Default">
        <name>testMatchMultiple</name>
        <full_name>testMatchMultiple</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="67" package="Default">
        <name>testPatternLabels</name>
        <full_name>testPatternLabels</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="78" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfStateStack</name>
      <full_name>\TestOfStateStack</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="Default">
        <name>testStartState</name>
        <full_name>testStartState</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="Default">
        <name>testExhaustion</name>
        <full_name>testExhaustion</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="90" package="Default">
        <name>testStateMoves</name>
        <full_name>testStateMoves</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="106" package="Default">
      <extends/>
      <name>TestParser</name>
      <full_name>\TestParser</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="108" package="Default">
        <name>accept</name>
        <full_name>accept</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="111" package="Default">
        <name>a</name>
        <full_name>a</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="Default">
        <name>b</name>
        <full_name>b</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="119" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfLexer</name>
      <full_name>\TestOfLexer</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="121" package="Default">
        <name>testEmptyPage</name>
        <full_name>testEmptyPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="Default">
        <name>testSinglePattern</name>
        <full_name>testSinglePattern</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="149" package="Default">
        <name>testMultiplePattern</name>
        <full_name>testMultiplePattern</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="164" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfLexerModes</name>
      <full_name>\TestOfLexerModes</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="166" package="Default">
        <name>testIsolatedPattern</name>
        <full_name>testIsolatedPattern</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="184" package="Default">
        <name>testModeChange</name>
        <full_name>testModeChange</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="210" package="Default">
        <name>testNesting</name>
        <full_name>testNesting</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="235" package="Default">
        <name>testSingular</name>
        <full_name>testSingular</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="253" package="Default">
        <name>testUnwindTooFar</name>
        <full_name>testUnwindTooFar</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="266" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfLexerHandlers</name>
      <full_name>\TestOfLexerHandlers</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="268" package="Default">
        <name>testModeMapping</name>
        <full_name>testModeMapping</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="290" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfSimpleHtmlLexer</name>
      <full_name>\TestOfSimpleHtmlLexer</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="292" package="Default">
        <name>createParser</name>
        <full_name>createParser</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="303" package="Default">
        <name>testNoContent</name>
        <full_name>testNoContent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="314" package="Default">
        <name>testUninteresting</name>
        <full_name>testUninteresting</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="321" package="Default">
        <name>testSkipCss</name>
        <full_name>testSkipCss</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="329" package="Default">
        <name>testSkipJavaScript</name>
        <full_name>testSkipJavaScript</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="337" package="Default">
        <name>testSkipHtmlComments</name>
        <full_name>testSkipHtmlComments</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="345" package="Default">
        <name>testTagWithNoAttributes</name>
        <full_name>testTagWithNoAttributes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="356" package="Default">
        <name>testTagWithAttributes</name>
        <full_name>testTagWithAttributes</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="373" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfHtmlSaxParser</name>
      <full_name>\TestOfHtmlSaxParser</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="375" package="Default">
        <name>createListener</name>
        <full_name>createListener</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="383" package="Default">
        <name>testFramesetTag</name>
        <full_name>testFramesetTag</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="392" package="Default">
        <name>testTagWithUnquotedAttributes</name>
        <full_name>testTagWithUnquotedAttributes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="401" package="Default">
        <name>testTagInsideContent</name>
        <full_name>testTagInsideContent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="410" package="Default">
        <name>testTagWithInternalContent</name>
        <full_name>testTagWithInternalContent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="419" package="Default">
        <name>testLinkAddress</name>
        <full_name>testLinkAddress</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="428" package="Default">
        <name>testEncodedAttribute</name>
        <full_name>testEncodedAttribute</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="437" package="Default">
        <name>testTagWithId</name>
        <full_name>testTagWithId</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="446" package="Default">
        <name>testTagWithEmptyAttributes</name>
        <full_name>testTagWithEmptyAttributes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="457" package="Default">
        <name>testComplexTagWithLotsOfCaseVariations</name>
        <full_name>testComplexTagWithLotsOfCaseVariations</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="468" package="Default">
        <name>testXhtmlSelfClosingTag</name>
        <full_name>testXhtmlSelfClosingTag</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="477" package="Default">
        <name>testNestedFrameInFrameset</name>
        <full_name>testNestedFrameInFrameset</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/php_parser_test.php</error>
      <error line="16" code="50000">No DocBlock was found for \TestOfParallelRegex</error>
      <error line="18" code="50010">No DocBlock was found for method testNoPatterns()</error>
      <error line="24" code="50010">No DocBlock was found for method testNoSubject()</error>
      <error line="31" code="50010">No DocBlock was found for method testMatchAll()</error>
      <error line="38" code="50010">No DocBlock was found for method testCaseSensitive()</error>
      <error line="47" code="50010">No DocBlock was found for method testCaseInsensitive()</error>
      <error line="56" code="50010">No DocBlock was found for method testMatchMultiple()</error>
      <error line="67" code="50010">No DocBlock was found for method testPatternLabels()</error>
      <error line="78" code="50000">No DocBlock was found for \TestOfStateStack</error>
      <error line="80" code="50010">No DocBlock was found for method testStartState()</error>
      <error line="85" code="50010">No DocBlock was found for method testExhaustion()</error>
      <error line="90" code="50010">No DocBlock was found for method testStateMoves()</error>
      <error line="106" code="50000">No DocBlock was found for \TestParser</error>
      <error line="108" code="50010">No DocBlock was found for method accept()</error>
      <error line="111" code="50010">No DocBlock was found for method a()</error>
      <error line="114" code="50010">No DocBlock was found for method b()</error>
      <error line="119" code="50000">No DocBlock was found for \TestOfLexer</error>
      <error line="121" code="50010">No DocBlock was found for method testEmptyPage()</error>
      <error line="132" code="50010">No DocBlock was found for method testSinglePattern()</error>
      <error line="149" code="50010">No DocBlock was found for method testMultiplePattern()</error>
      <error line="164" code="50000">No DocBlock was found for \TestOfLexerModes</error>
      <error line="166" code="50010">No DocBlock was found for method testIsolatedPattern()</error>
      <error line="184" code="50010">No DocBlock was found for method testModeChange()</error>
      <error line="210" code="50010">No DocBlock was found for method testNesting()</error>
      <error line="235" code="50010">No DocBlock was found for method testSingular()</error>
      <error line="253" code="50010">No DocBlock was found for method testUnwindTooFar()</error>
      <error line="266" code="50000">No DocBlock was found for \TestOfLexerHandlers</error>
      <error line="268" code="50010">No DocBlock was found for method testModeMapping()</error>
      <error line="290" code="50000">No DocBlock was found for \TestOfSimpleHtmlLexer</error>
      <error line="292" code="50010">No DocBlock was found for method createParser()</error>
      <error line="303" code="50010">No DocBlock was found for method testNoContent()</error>
      <error line="314" code="50010">No DocBlock was found for method testUninteresting()</error>
      <error line="321" code="50010">No DocBlock was found for method testSkipCss()</error>
      <error line="329" code="50010">No DocBlock was found for method testSkipJavaScript()</error>
      <error line="337" code="50010">No DocBlock was found for method testSkipHtmlComments()</error>
      <error line="345" code="50010">No DocBlock was found for method testTagWithNoAttributes()</error>
      <error line="356" code="50010">No DocBlock was found for method testTagWithAttributes()</error>
      <error line="373" code="50000">No DocBlock was found for \TestOfHtmlSaxParser</error>
      <error line="375" code="50010">No DocBlock was found for method createListener()</error>
      <error line="383" code="50010">No DocBlock was found for method testFramesetTag()</error>
      <error line="392" code="50010">No DocBlock was found for method testTagWithUnquotedAttributes()</error>
      <error line="401" code="50010">No DocBlock was found for method testTagInsideContent()</error>
      <error line="410" code="50010">No DocBlock was found for method testTagWithInternalContent()</error>
      <error line="419" code="50010">No DocBlock was found for method testLinkAddress()</error>
      <error line="428" code="50010">No DocBlock was found for method testEncodedAttribute()</error>
      <error line="437" code="50010">No DocBlock was found for method testTagWithId()</error>
      <error line="446" code="50010">No DocBlock was found for method testTagWithEmptyAttributes()</error>
      <error line="457" code="50010">No DocBlock was found for method testComplexTagWithLotsOfCaseVariations()</error>
      <error line="468" code="50010">No DocBlock was found for method testXhtmlSelfClosingTag()</error>
      <error line="477" code="50010">No DocBlock was found for method testNestedFrameInFrameset()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/recorder_test.php" hash="281ad5b690b50859c2dd4607dc521a45" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="6" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfRecorder</name>
      <full_name>\TestOfRecorder</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="8" package="Default">
        <name>testContentOfRecorderWithOnePassAndOneFailure</name>
        <full_name>testContentOfRecorderWithOnePassAndOneFailure</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/recorder_test.php</error>
      <error line="6" code="50000">No DocBlock was found for \TestOfRecorder</error>
      <error line="8" code="50010">No DocBlock was found for method testContentOfRecorderWithOnePassAndOneFailure()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/reflection_php5_test.php" hash="123768b3fa1c0981d87275bfb94d0356" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <interface namespace="global" line="18" package="Default">
      <name>AnyOldInterface</name>
      <full_name>\AnyOldInterface</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="19" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
      </method>
    </interface>
    <interface namespace="global" line="22" package="Default">
      <name>AnyOldArgumentInterface</name>
      <full_name>\AnyOldArgumentInterface</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
        <argument line="23">
          <name>$argument</name>
          <default></default>
          <type>\AnyOldInterface</type>
        </argument>
      </method>
    </interface>
    <interface namespace="global" line="26" package="Default">
      <name>AnyDescendentInterface</name>
      <full_name>\AnyDescendentInterface</full_name>
      <extends>\AnyOldInterface</extends>
    </interface>
    <class final="false" abstract="false" namespace="global" line="6" package="Default">
      <extends/>
      <name>AnyOldLeafClass</name>
      <full_name>\AnyOldLeafClass</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="7" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
      </method>
    </class>
    <class final="true" abstract="true" namespace="global" line="10" package="Default">
      <extends/>
      <name>AnyOldClass</name>
      <full_name>\AnyOldClass</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="11" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="14" package="Default">
      <extends/>
      <name>AnyOldLeafClassWithAFinal</name>
      <full_name>\AnyOldLeafClassWithAFinal</full_name>
      <method final="true" abstract="false" static="false" visibility="public" namespace="global" line="15" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="29" package="Default">
      <extends/>
      <implements>\AnyOldInterface</implements>
      <name>AnyOldImplementation</name>
      <full_name>\AnyOldImplementation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="30" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>extraMethod</name>
        <full_name>extraMethod</full_name>
      </method>
    </class>
    <class final="true" abstract="true" namespace="global" line="34" package="Default">
      <extends/>
      <implements>\AnyOldInterface</implements>
      <name>AnyAbstractImplementation</name>
      <full_name>\AnyAbstractImplementation</full_name>
    </class>
    <class final="true" abstract="true" namespace="global" line="37" package="Default">
      <extends/>
      <name>AnotherOldAbstractClass</name>
      <full_name>\AnotherOldAbstractClass</full_name>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="global" line="38" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
        <argument line="38">
          <name>$argument</name>
          <default></default>
          <type>\AnyOldInterface</type>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="41" package="Default">
      <extends>\AnyOldImplementation</extends>
      <name>AnyOldSubclass</name>
      <full_name>\AnyOldSubclass</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="43" package="Default">
      <extends/>
      <name>AnyOldArgumentClass</name>
      <full_name>\AnyOldArgumentClass</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
        <argument line="44">
          <name>$argument</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="47" package="Default">
      <extends/>
      <implements>\AnyOldArgumentInterface</implements>
      <name>AnyOldArgumentImplementation</name>
      <full_name>\AnyOldArgumentImplementation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
        <argument line="48">
          <name>$argument</name>
          <default></default>
          <type>\AnyOldInterface</type>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="51" package="Default">
      <extends/>
      <implements>\AnyOldArgumentInterface</implements>
      <name>AnyOldTypeHintedClass</name>
      <full_name>\AnyOldTypeHintedClass</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
        <argument line="52">
          <name>$argument</name>
          <default></default>
          <type>\AnyOldInterface</type>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="55" package="Default">
      <extends/>
      <implements>\AnyDescendentInterface</implements>
      <name>AnyDescendentImplementation</name>
      <full_name>\AnyDescendentImplementation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="Default">
        <name>aMethod</name>
        <full_name>aMethod</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="59" package="Default">
      <extends/>
      <name>AnyOldOverloadedClass</name>
      <full_name>\AnyOldOverloadedClass</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="60" package="Default">
        <name>__isset</name>
        <full_name>__isset</full_name>
        <argument line="60">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="61" package="Default">
        <name>__unset</name>
        <full_name>__unset</full_name>
        <argument line="61">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="64" package="Default">
      <extends/>
      <name>AnyOldClassWithStaticMethods</name>
      <full_name>\AnyOldClassWithStaticMethods</full_name>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="65" package="Default">
        <name>aStatic</name>
        <full_name>aStatic</full_name>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="66" package="Default">
        <name>aStaticWithParameters</name>
        <full_name>aStaticWithParameters</full_name>
        <argument line="66">
          <name>$arg1</name>
          <default></default>
          <type/>
        </argument>
        <argument line="66">
          <name>$arg2</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="true" abstract="true" namespace="global" line="69" package="Default">
      <extends/>
      <name>AnyOldAbstractClassWithAbstractMethods</name>
      <full_name>\AnyOldAbstractClassWithAbstractMethods</full_name>
      <method final="false" abstract="true" static="false" visibility="public" namespace="global" line="70" package="Default">
        <name>anAbstract</name>
        <full_name>anAbstract</full_name>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="global" line="71" package="Default">
        <name>anAbstractWithParameter</name>
        <full_name>anAbstractWithParameter</full_name>
        <argument line="71">
          <name>$foo</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="global" line="72" package="Default">
        <name>anAbstractWithMultipleParameters</name>
        <full_name>anAbstractWithMultipleParameters</full_name>
        <argument line="72">
          <name>$foo</name>
          <default></default>
          <type/>
        </argument>
        <argument line="72">
          <name>$bar</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="75" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfReflection</name>
      <full_name>\TestOfReflection</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="77" package="Default">
        <name>testClassExistence</name>
        <full_name>testClassExistence</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="Default">
        <name>testClassNonExistence</name>
        <full_name>testClassNonExistence</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="91" package="Default">
        <name>testDetectionOfAbstractClass</name>
        <full_name>testDetectionOfAbstractClass</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="96" package="Default">
        <name>testDetectionOfFinalMethods</name>
        <full_name>testDetectionOfFinalMethods</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="103" package="Default">
        <name>testFindingParentClass</name>
        <full_name>testFindingParentClass</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="108" package="Default">
        <name>testInterfaceExistence</name>
        <full_name>testInterfaceExistence</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="115" package="Default">
        <name>testMethodsListFromClass</name>
        <full_name>testMethodsListFromClass</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="120" package="Default">
        <name>testMethodsListFromInterface</name>
        <full_name>testMethodsListFromInterface</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="126" package="Default">
        <name>testMethodsComeFromDescendentInterfacesASWell</name>
        <full_name>testMethodsComeFromDescendentInterfacesASWell</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="131" package="Default">
        <name>testCanSeparateInterfaceMethodsFromOthers</name>
        <full_name>testCanSeparateInterfaceMethodsFromOthers</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="137" package="Default">
        <name>testMethodsComeFromDescendentInterfacesInAbstractClass</name>
        <full_name>testMethodsComeFromDescendentInterfacesInAbstractClass</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="142" package="Default">
        <name>testInterfaceHasOnlyItselfToImplement</name>
        <full_name>testInterfaceHasOnlyItselfToImplement</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="149" package="Default">
        <name>testInterfacesListedForClass</name>
        <full_name>testInterfacesListedForClass</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="156" package="Default">
        <name>testInterfacesListedForSubclass</name>
        <full_name>testInterfacesListedForSubclass</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="163" package="Default">
        <name>testNoParameterCreationWhenNoInterface</name>
        <full_name>testNoParameterCreationWhenNoInterface</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="173" package="Default">
        <name>testParameterCreationWithoutTypeHinting</name>
        <full_name>testParameterCreationWithoutTypeHinting</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="183" package="Default">
        <name>testParameterCreationForTypeHinting</name>
        <full_name>testParameterCreationForTypeHinting</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="193" package="Default">
        <name>testIssetFunctionSignature</name>
        <full_name>testIssetFunctionSignature</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="199" package="Default">
        <name>testUnsetFunctionSignature</name>
        <full_name>testUnsetFunctionSignature</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="205" package="Default">
        <name>testProperlyReflectsTheFinalInterfaceWhenObjectImplementsAnExtendedInterface</name>
        <full_name>testProperlyReflectsTheFinalInterfaceWhenObjectImplementsAnExtendedInterface</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="212" package="Default">
        <name>testCreatingSignatureForAbstractMethod</name>
        <full_name>testCreatingSignatureForAbstractMethod</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="217" package="Default">
        <name>testCanProperlyGenerateStaticMethodSignatures</name>
        <full_name>testCanProperlyGenerateStaticMethodSignatures</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="227" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfReflectionWithTypeHints</name>
      <full_name>\TestOfReflectionWithTypeHints</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="228" package="Default">
        <name>skip</name>
        <full_name>skip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="232" package="Default">
        <name>testParameterCreationForTypeHintingWithArray</name>
        <full_name>testParameterCreationForTypeHintingWithArray</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="245" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfAbstractsWithAbstractMethods</name>
      <full_name>\TestOfAbstractsWithAbstractMethods</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="246" package="Default">
        <name>testCanProperlyGenerateAbstractMethods</name>
        <full_name>testCanProperlyGenerateAbstractMethods</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/reflection_php5_test.php</error>
      <error line="19" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="23" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="6" code="50000">No DocBlock was found for \AnyOldLeafClass</error>
      <error line="7" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="10" code="50000">No DocBlock was found for \AnyOldClass</error>
      <error line="11" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="14" code="50000">No DocBlock was found for \AnyOldLeafClassWithAFinal</error>
      <error line="15" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="29" code="50000">No DocBlock was found for \AnyOldImplementation</error>
      <error line="30" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="31" code="50010">No DocBlock was found for method extraMethod()</error>
      <error line="34" code="50000">No DocBlock was found for \AnyAbstractImplementation</error>
      <error line="37" code="50000">No DocBlock was found for \AnotherOldAbstractClass</error>
      <error line="38" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="41" code="50000">No DocBlock was found for \AnyOldSubclass</error>
      <error line="43" code="50000">No DocBlock was found for \AnyOldArgumentClass</error>
      <error line="44" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="47" code="50000">No DocBlock was found for \AnyOldArgumentImplementation</error>
      <error line="48" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="51" code="50000">No DocBlock was found for \AnyOldTypeHintedClass</error>
      <error line="52" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="55" code="50000">No DocBlock was found for \AnyDescendentImplementation</error>
      <error line="56" code="50010">No DocBlock was found for method aMethod()</error>
      <error line="59" code="50000">No DocBlock was found for \AnyOldOverloadedClass</error>
      <error line="60" code="50010">No DocBlock was found for method __isset()</error>
      <error line="61" code="50010">No DocBlock was found for method __unset()</error>
      <error line="64" code="50000">No DocBlock was found for \AnyOldClassWithStaticMethods</error>
      <error line="65" code="50010">No DocBlock was found for method aStatic()</error>
      <error line="66" code="50010">No DocBlock was found for method aStaticWithParameters()</error>
      <error line="69" code="50000">No DocBlock was found for \AnyOldAbstractClassWithAbstractMethods</error>
      <error line="70" code="50010">No DocBlock was found for method anAbstract()</error>
      <error line="71" code="50010">No DocBlock was found for method anAbstractWithParameter()</error>
      <error line="72" code="50010">No DocBlock was found for method anAbstractWithMultipleParameters()</error>
      <error line="75" code="50000">No DocBlock was found for \TestOfReflection</error>
      <error line="77" code="50010">No DocBlock was found for method testClassExistence()</error>
      <error line="85" code="50010">No DocBlock was found for method testClassNonExistence()</error>
      <error line="91" code="50010">No DocBlock was found for method testDetectionOfAbstractClass()</error>
      <error line="96" code="50010">No DocBlock was found for method testDetectionOfFinalMethods()</error>
      <error line="103" code="50010">No DocBlock was found for method testFindingParentClass()</error>
      <error line="108" code="50010">No DocBlock was found for method testInterfaceExistence()</error>
      <error line="115" code="50010">No DocBlock was found for method testMethodsListFromClass()</error>
      <error line="120" code="50010">No DocBlock was found for method testMethodsListFromInterface()</error>
      <error line="126" code="50010">No DocBlock was found for method testMethodsComeFromDescendentInterfacesASWell()</error>
      <error line="131" code="50010">No DocBlock was found for method testCanSeparateInterfaceMethodsFromOthers()</error>
      <error line="137" code="50010">No DocBlock was found for method testMethodsComeFromDescendentInterfacesInAbstractClass()</error>
      <error line="142" code="50010">No DocBlock was found for method testInterfaceHasOnlyItselfToImplement()</error>
      <error line="149" code="50010">No DocBlock was found for method testInterfacesListedForClass()</error>
      <error line="156" code="50010">No DocBlock was found for method testInterfacesListedForSubclass()</error>
      <error line="163" code="50010">No DocBlock was found for method testNoParameterCreationWhenNoInterface()</error>
      <error line="173" code="50010">No DocBlock was found for method testParameterCreationWithoutTypeHinting()</error>
      <error line="183" code="50010">No DocBlock was found for method testParameterCreationForTypeHinting()</error>
      <error line="193" code="50010">No DocBlock was found for method testIssetFunctionSignature()</error>
      <error line="199" code="50010">No DocBlock was found for method testUnsetFunctionSignature()</error>
      <error line="205" code="50010">No DocBlock was found for method testProperlyReflectsTheFinalInterfaceWhenObjectImplementsAnExtendedInterface()</error>
      <error line="212" code="50010">No DocBlock was found for method testCreatingSignatureForAbstractMethod()</error>
      <error line="217" code="50010">No DocBlock was found for method testCanProperlyGenerateStaticMethodSignatures()</error>
      <error line="227" code="50000">No DocBlock was found for \TestOfReflectionWithTypeHints</error>
      <error line="228" code="50010">No DocBlock was found for method skip()</error>
      <error line="232" code="50010">No DocBlock was found for method testParameterCreationForTypeHintingWithArray()</error>
      <error line="245" code="50000">No DocBlock was found for \TestOfAbstractsWithAbstractMethods</error>
      <error line="246" code="50010">No DocBlock was found for method testCanProperlyGenerateAbstractMethods()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/remote_test.php" hash="4793c87c073cb00c2c5b6e5102a98986" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name>../remote.php</name>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name>../reporter.php</name>
    </include>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/remote_test.php</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/shell_test.php" hash="1fccfdfe6d599d7b9154a2032696c548" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="6" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfShell</name>
      <full_name>\TestOfShell</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="8" package="Default">
        <name>testEcho</name>
        <full_name>testEcho</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="14" package="Default">
        <name>testBadCommand</name>
        <full_name>testBadCommand</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="20" package="Default">
      <extends>\ShellTestCase</extends>
      <name>TestOfShellTesterAndShell</name>
      <full_name>\TestOfShellTesterAndShell</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="22" package="Default">
        <name>testEcho</name>
        <full_name>testEcho</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Default">
        <name>testFileExistence</name>
        <full_name>testFileExistence</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Default">
        <name>testFilePatterns</name>
        <full_name>testFilePatterns</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/shell_test.php</error>
      <error line="6" code="50000">No DocBlock was found for \TestOfShell</error>
      <error line="8" code="50010">No DocBlock was found for method testEcho()</error>
      <error line="14" code="50010">No DocBlock was found for method testBadCommand()</error>
      <error line="20" code="50000">No DocBlock was found for \TestOfShellTesterAndShell</error>
      <error line="22" code="50010">No DocBlock was found for method testEcho()</error>
      <error line="28" code="50010">No DocBlock was found for method testFileExistence()</error>
      <error line="33" code="50010">No DocBlock was found for method testFilePatterns()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/shell_tester_test.php" hash="a45b12c9a162254291987f0fe370e1e0" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="7" package="Default">
      <extends>\ShellTestCase</extends>
      <name>TestOfShellTestCase</name>
      <full_name>\TestOfShellTestCase</full_name>
      <property final="false" static="false" visibility="private" line="8" namespace="global" package="Default">
        <name>$mock_shell</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="10" package="Default">
        <name>getShell</name>
        <full_name>getShell</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="14" package="Default">
        <name>testGenericEquality</name>
        <full_name>testGenericEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="19" package="Default">
        <name>testExitCode</name>
        <full_name>testExitCode</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="27" package="Default">
        <name>testOutput</name>
        <full_name>testOutput</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="34" package="Default">
        <name>testOutputPatterns</name>
        <full_name>testOutputPatterns</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/shell_tester_test.php</error>
      <error line="7" code="50000">No DocBlock was found for \TestOfShellTestCase</error>
      <error line="8" code="50018">No DocBlock was found for property $mock_shell</error>
      <error line="10" code="50010">No DocBlock was found for method getShell()</error>
      <error line="14" code="50010">No DocBlock was found for method testGenericEquality()</error>
      <error line="19" code="50010">No DocBlock was found for method testExitCode()</error>
      <error line="27" code="50010">No DocBlock was found for method testOutput()</error>
      <error line="34" code="50010">No DocBlock was found for method testOutputPatterns()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/simpletest_test.php" hash="424027ab4cd05f61b314510bebb6a5bb" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="8" package="Default">
      <extends>\UnitTestCase</extends>
      <name>ShouldNeverBeRun</name>
      <full_name>\ShouldNeverBeRun</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="9" package="Default">
        <name>testWithNoChanceOfSuccess</name>
        <full_name>testWithNoChanceOfSuccess</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="14" package="Default">
      <extends>\ShouldNeverBeRun</extends>
      <name>ShouldNeverBeRunEither</name>
      <full_name>\ShouldNeverBeRunEither</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="16" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfStackTrace</name>
      <full_name>\TestOfStackTrace</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="18" package="Default">
        <name>testCanFindAssertInTrace</name>
        <full_name>testCanFindAssertInTrace</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="29" package="Default">
      <extends/>
      <name>DummyResource</name>
      <full_name>\DummyResource</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="31" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfContext</name>
      <full_name>\TestOfContext</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Default">
        <name>testCurrentContextIsUnique</name>
        <full_name>testCurrentContextIsUnique</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="Default">
        <name>testContextHoldsCurrentTestCase</name>
        <full_name>testContextHoldsCurrentTestCase</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>testResourceIsSingleInstanceWithContext</name>
        <full_name>testResourceIsSingleInstanceWithContext</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="51" package="Default">
        <name>testClearingContextResetsResources</name>
        <full_name>testClearingContextResetsResources</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/simpletest_test.php</error>
      <error line="8" code="50000">No DocBlock was found for \ShouldNeverBeRun</error>
      <error line="9" code="50010">No DocBlock was found for method testWithNoChanceOfSuccess()</error>
      <error line="14" code="50000">No DocBlock was found for \ShouldNeverBeRunEither</error>
      <error line="16" code="50000">No DocBlock was found for \TestOfStackTrace</error>
      <error line="18" code="50010">No DocBlock was found for method testCanFindAssertInTrace()</error>
      <error line="29" code="50000">No DocBlock was found for \DummyResource</error>
      <error line="31" code="50000">No DocBlock was found for \TestOfContext</error>
      <error line="33" code="50010">No DocBlock was found for method testCurrentContextIsUnique()</error>
      <error line="39" code="50010">No DocBlock was found for method testContextHoldsCurrentTestCase()</error>
      <error line="44" code="50010">No DocBlock was found for method testResourceIsSingleInstanceWithContext()</error>
      <error line="51" code="50010">No DocBlock was found for method testClearingContextResetsResources()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/socket_test.php" hash="49ec2994ae655de0e6321fe66f903878" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="7" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfSimpleStickyError</name>
      <full_name>\TestOfSimpleStickyError</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="9" package="Default">
        <name>testSettingError</name>
        <full_name>testSettingError</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="17" package="Default">
        <name>testClearingError</name>
        <full_name>testClearingError</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/socket_test.php</error>
      <error line="7" code="50000">No DocBlock was found for \TestOfSimpleStickyError</error>
      <error line="9" code="50010">No DocBlock was found for method testSettingError()</error>
      <error line="17" code="50010">No DocBlock was found for method testClearingError()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/support/empty_test_file.php" hash="747496d233dd16252f14ac9e94f4047e" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/support/empty_test_file.php</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/support/failing_test.php" hash="faa3efde68aadc2a4b94a902e54fa04c" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="4" package="Default">
      <extends>\UnitTestCase</extends>
      <name>FailingTest</name>
      <full_name>\FailingTest</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="5" package="Default">
        <name>test_fail</name>
        <full_name>test_fail</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/support/failing_test.php</error>
      <error line="4" code="50000">No DocBlock was found for \FailingTest</error>
      <error line="5" code="50010">No DocBlock was found for method test_fail()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/support/passing_test.php" hash="3bb522148f471cfe416cbbdde8c2f52d" package="Default">
    <include line="2" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="4" package="Default">
      <extends>\UnitTestCase</extends>
      <name>PassingTest</name>
      <full_name>\PassingTest</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="5" package="Default">
        <name>test_pass</name>
        <full_name>test_pass</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/support/passing_test.php</error>
      <error line="4" code="50000">No DocBlock was found for \PassingTest</error>
      <error line="5" code="50010">No DocBlock was found for method test_pass()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/support/recorder_sample.php" hash="a751595c57a5e4b5703e8d7b99490cf2" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="5" package="Default">
      <extends>\UnitTestCase</extends>
      <name>SampleTestForRecorder</name>
      <full_name>\SampleTestForRecorder</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="6" package="Default">
        <name>testTrueIsTrue</name>
        <full_name>testTrueIsTrue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="10" package="Default">
        <name>testFalseIsTrue</name>
        <full_name>testFalseIsTrue</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/support/recorder_sample.php</error>
      <error line="5" code="50000">No DocBlock was found for \SampleTestForRecorder</error>
      <error line="6" code="50010">No DocBlock was found for method testTrueIsTrue()</error>
      <error line="10" code="50010">No DocBlock was found for method testFalseIsTrue()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/support/spl_examples.php" hash="607e14ae106334fcd476c10229108a8a" package="Default">
    <class final="false" abstract="false" namespace="global" line="4" package="Default">
      <extends/>
      <implements>\Iterator</implements>
      <name>IteratorImplementation</name>
      <full_name>\IteratorImplementation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="5" package="Default">
        <name>current</name>
        <full_name>current</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="6" package="Default">
        <name>next</name>
        <full_name>next</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="7" package="Default">
        <name>key</name>
        <full_name>key</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="8" package="Default">
        <name>valid</name>
        <full_name>valid</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="9" package="Default">
        <name>rewind</name>
        <full_name>rewind</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="12" package="Default">
      <extends/>
      <implements>\IteratorAggregate</implements>
      <name>IteratorAggregateImplementation</name>
      <full_name>\IteratorAggregateImplementation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="13" package="Default">
        <name>getIterator</name>
        <full_name>getIterator</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/support/spl_examples.php</error>
      <error line="4" code="50000">No DocBlock was found for \IteratorImplementation</error>
      <error line="5" code="50010">No DocBlock was found for method current()</error>
      <error line="6" code="50010">No DocBlock was found for method next()</error>
      <error line="7" code="50010">No DocBlock was found for method key()</error>
      <error line="8" code="50010">No DocBlock was found for method valid()</error>
      <error line="9" code="50010">No DocBlock was found for method rewind()</error>
      <error line="12" code="50000">No DocBlock was found for \IteratorAggregateImplementation</error>
      <error line="13" code="50010">No DocBlock was found for method getIterator()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/support/test1.php" hash="fa1ad0aae96c81e9eedaefdf9e1ee971" package="Default">
    <class final="false" abstract="false" namespace="global" line="2" package="Default">
      <extends>\UnitTestCase</extends>
      <name>test1</name>
      <full_name>\test1</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="3" package="Default">
        <name>test_pass</name>
        <full_name>test_pass</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/support/test1.php</error>
      <error line="2" code="50000">No DocBlock was found for \test1</error>
      <error line="3" code="50010">No DocBlock was found for method test_pass()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/tag_test.php" hash="5f1f3e7daf8965c8723c131915f57f9d" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="8" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfTag</name>
      <full_name>\TestOfTag</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="10" package="Default">
        <name>testStartValuesWithoutAdditionalContent</name>
        <full_name>testStartValuesWithoutAdditionalContent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="19" package="Default">
        <name>testTitleContent</name>
        <full_name>testTitleContent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="27" package="Default">
        <name>testMessyTitleContent</name>
        <full_name>testMessyTitleContent</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="35" package="Default">
        <name>testTagWithNoEnd</name>
        <full_name>testTagWithNoEnd</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="40" package="Default">
        <name>testAnchorHref</name>
        <full_name>testAnchorHref</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="53" package="Default">
        <name>testIsIdMatchesIdAttribute</name>
        <full_name>testIsIdMatchesIdAttribute</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="60" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfWidget</name>
      <full_name>\TestOfWidget</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="Default">
        <name>testTextEmptyDefault</name>
        <full_name>testTextEmptyDefault</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="68" package="Default">
        <name>testSettingOfExternalLabel</name>
        <full_name>testSettingOfExternalLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="74" package="Default">
        <name>testTextDefault</name>
        <full_name>testTextDefault</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="Default">
        <name>testSettingTextValue</name>
        <full_name>testSettingTextValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="88" package="Default">
        <name>testFailToSetHiddenValue</name>
        <full_name>testFailToSetHiddenValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Default">
        <name>testSubmitDefaults</name>
        <full_name>testSubmitDefaults</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="107" package="Default">
        <name>testPopulatedSubmit</name>
        <full_name>testPopulatedSubmit</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="119" package="Default">
        <name>testImageSubmit</name>
        <full_name>testImageSubmit</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="131" package="Default">
        <name>testImageSubmitTitlePreferredOverAltForLabel</name>
        <full_name>testImageSubmitTitlePreferredOverAltForLabel</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="137" package="Default">
        <name>testButton</name>
        <full_name>testButton</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="151" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfTextArea</name>
      <full_name>\TestOfTextArea</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="153" package="Default">
        <name>testDefault</name>
        <full_name>testDefault</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="160" package="Default">
        <name>testWrapping</name>
        <full_name>testWrapping</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="172" package="Default">
        <name>testWrappingRemovesLeadingcariageReturn</name>
        <full_name>testWrappingRemovesLeadingcariageReturn</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="180" package="Default">
        <name>testBreaksAreNewlineAndCarriageReturn</name>
        <full_name>testBreaksAreNewlineAndCarriageReturn</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="187" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfCheckbox</name>
      <full_name>\TestOfCheckbox</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="189" package="Default">
        <name>testCanSetCheckboxToNamedValueWithBooleanTrue</name>
        <full_name>testCanSetCheckboxToNamedValueWithBooleanTrue</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="197" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfSelection</name>
      <full_name>\TestOfSelection</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="199" package="Default">
        <name>testEmpty</name>
        <full_name>testEmpty</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="204" package="Default">
        <name>testSingle</name>
        <full_name>testSingle</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="212" package="Default">
        <name>testSingleDefault</name>
        <full_name>testSingleDefault</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="220" package="Default">
        <name>testSingleMappedDefault</name>
        <full_name>testSingleMappedDefault</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="228" package="Default">
        <name>testStartsWithDefault</name>
        <full_name>testStartsWithDefault</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="242" package="Default">
        <name>testSettingOption</name>
        <full_name>testSettingOption</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="256" package="Default">
        <name>testSettingMappedOption</name>
        <full_name>testSettingMappedOption</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="273" package="Default">
        <name>testSelectionDespiteSpuriousWhitespace</name>
        <full_name>testSelectionDespiteSpuriousWhitespace</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="289" package="Default">
        <name>testFailToSetIllegalOption</name>
        <full_name>testFailToSetIllegalOption</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="304" package="Default">
        <name>testNastyOptionValuesThatLookLikeFalse</name>
        <full_name>testNastyOptionValuesThatLookLikeFalse</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="317" package="Default">
        <name>testBlankOption</name>
        <full_name>testBlankOption</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="331" package="Default">
        <name>testMultipleDefaultWithNoSelections</name>
        <full_name>testMultipleDefaultWithNoSelections</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="343" package="Default">
        <name>testMultipleDefaultWithSelections</name>
        <full_name>testMultipleDefaultWithSelections</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="355" package="Default">
        <name>testSettingMultiple</name>
        <full_name>testSettingMultiple</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="373" package="Default">
        <name>testFailToSetIllegalOptionsInMultiple</name>
        <full_name>testFailToSetIllegalOptionsInMultiple</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="387" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfRadioGroup</name>
      <full_name>\TestOfRadioGroup</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="389" package="Default">
        <name>testEmptyGroup</name>
        <full_name>testEmptyGroup</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="396" package="Default">
        <name>testReadingSingleButtonGroup</name>
        <full_name>testReadingSingleButtonGroup</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="404" package="Default">
        <name>testReadingMultipleButtonGroup</name>
        <full_name>testReadingMultipleButtonGroup</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="414" package="Default">
        <name>testFailToSetUnlistedValue</name>
        <full_name>testFailToSetUnlistedValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="421" package="Default">
        <name>testSettingNewValueClearsTheOldOne</name>
        <full_name>testSettingNewValueClearsTheOldOne</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="431" package="Default">
        <name>testIsIdMatchesAnyWidgetInSet</name>
        <full_name>testIsIdMatchesAnyWidgetInSet</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="442" package="Default">
        <name>testIsLabelMatchesAnyWidgetInSet</name>
        <full_name>testIsLabelMatchesAnyWidgetInSet</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="456" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfTagGroup</name>
      <full_name>\TestOfTagGroup</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="458" package="Default">
        <name>testReadingMultipleCheckboxGroup</name>
        <full_name>testReadingMultipleCheckboxGroup</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="467" package="Default">
        <name>testReadingMultipleUncheckedItems</name>
        <full_name>testReadingMultipleUncheckedItems</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="475" package="Default">
        <name>testReadingMultipleCheckedItems</name>
        <full_name>testReadingMultipleCheckedItems</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="485" package="Default">
        <name>testSettingSingleValue</name>
        <full_name>testSettingSingleValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="495" package="Default">
        <name>testSettingMultipleValues</name>
        <full_name>testSettingMultipleValues</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="503" package="Default">
        <name>testSettingNoValue</name>
        <full_name>testSettingNoValue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="511" package="Default">
        <name>testIsIdMatchesAnyIdInSet</name>
        <full_name>testIsIdMatchesAnyIdInSet</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="521" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfUploadWidget</name>
      <full_name>\TestOfUploadWidget</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="523" package="Default">
        <name>testValueIsFilePath</name>
        <full_name>testValueIsFilePath</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="529" package="Default">
        <name>testSubmitsFileContents</name>
        <full_name>testSubmitsFileContents</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="541" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfLabelTag</name>
      <full_name>\TestOfLabelTag</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="543" package="Default">
        <name>testLabelShouldHaveAnEndTag</name>
        <full_name>testLabelShouldHaveAnEndTag</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="548" package="Default">
        <name>testContentIsTextOnly</name>
        <full_name>testContentIsTextOnly</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/tag_test.php</error>
      <error line="8" code="50000">No DocBlock was found for \TestOfTag</error>
      <error line="10" code="50010">No DocBlock was found for method testStartValuesWithoutAdditionalContent()</error>
      <error line="19" code="50010">No DocBlock was found for method testTitleContent()</error>
      <error line="27" code="50010">No DocBlock was found for method testMessyTitleContent()</error>
      <error line="35" code="50010">No DocBlock was found for method testTagWithNoEnd()</error>
      <error line="40" code="50010">No DocBlock was found for method testAnchorHref()</error>
      <error line="53" code="50010">No DocBlock was found for method testIsIdMatchesIdAttribute()</error>
      <error line="60" code="50000">No DocBlock was found for \TestOfWidget</error>
      <error line="62" code="50010">No DocBlock was found for method testTextEmptyDefault()</error>
      <error line="68" code="50010">No DocBlock was found for method testSettingOfExternalLabel()</error>
      <error line="74" code="50010">No DocBlock was found for method testTextDefault()</error>
      <error line="80" code="50010">No DocBlock was found for method testSettingTextValue()</error>
      <error line="88" code="50010">No DocBlock was found for method testFailToSetHiddenValue()</error>
      <error line="94" code="50010">No DocBlock was found for method testSubmitDefaults()</error>
      <error line="107" code="50010">No DocBlock was found for method testPopulatedSubmit()</error>
      <error line="119" code="50010">No DocBlock was found for method testImageSubmit()</error>
      <error line="131" code="50010">No DocBlock was found for method testImageSubmitTitlePreferredOverAltForLabel()</error>
      <error line="137" code="50010">No DocBlock was found for method testButton()</error>
      <error line="151" code="50000">No DocBlock was found for \TestOfTextArea</error>
      <error line="153" code="50010">No DocBlock was found for method testDefault()</error>
      <error line="160" code="50010">No DocBlock was found for method testWrapping()</error>
      <error line="172" code="50010">No DocBlock was found for method testWrappingRemovesLeadingcariageReturn()</error>
      <error line="180" code="50010">No DocBlock was found for method testBreaksAreNewlineAndCarriageReturn()</error>
      <error line="187" code="50000">No DocBlock was found for \TestOfCheckbox</error>
      <error line="189" code="50010">No DocBlock was found for method testCanSetCheckboxToNamedValueWithBooleanTrue()</error>
      <error line="197" code="50000">No DocBlock was found for \TestOfSelection</error>
      <error line="199" code="50010">No DocBlock was found for method testEmpty()</error>
      <error line="204" code="50010">No DocBlock was found for method testSingle()</error>
      <error line="212" code="50010">No DocBlock was found for method testSingleDefault()</error>
      <error line="220" code="50010">No DocBlock was found for method testSingleMappedDefault()</error>
      <error line="228" code="50010">No DocBlock was found for method testStartsWithDefault()</error>
      <error line="242" code="50010">No DocBlock was found for method testSettingOption()</error>
      <error line="256" code="50010">No DocBlock was found for method testSettingMappedOption()</error>
      <error line="273" code="50010">No DocBlock was found for method testSelectionDespiteSpuriousWhitespace()</error>
      <error line="289" code="50010">No DocBlock was found for method testFailToSetIllegalOption()</error>
      <error line="304" code="50010">No DocBlock was found for method testNastyOptionValuesThatLookLikeFalse()</error>
      <error line="317" code="50010">No DocBlock was found for method testBlankOption()</error>
      <error line="331" code="50010">No DocBlock was found for method testMultipleDefaultWithNoSelections()</error>
      <error line="343" code="50010">No DocBlock was found for method testMultipleDefaultWithSelections()</error>
      <error line="355" code="50010">No DocBlock was found for method testSettingMultiple()</error>
      <error line="373" code="50010">No DocBlock was found for method testFailToSetIllegalOptionsInMultiple()</error>
      <error line="387" code="50000">No DocBlock was found for \TestOfRadioGroup</error>
      <error line="389" code="50010">No DocBlock was found for method testEmptyGroup()</error>
      <error line="396" code="50010">No DocBlock was found for method testReadingSingleButtonGroup()</error>
      <error line="404" code="50010">No DocBlock was found for method testReadingMultipleButtonGroup()</error>
      <error line="414" code="50010">No DocBlock was found for method testFailToSetUnlistedValue()</error>
      <error line="421" code="50010">No DocBlock was found for method testSettingNewValueClearsTheOldOne()</error>
      <error line="431" code="50010">No DocBlock was found for method testIsIdMatchesAnyWidgetInSet()</error>
      <error line="442" code="50010">No DocBlock was found for method testIsLabelMatchesAnyWidgetInSet()</error>
      <error line="456" code="50000">No DocBlock was found for \TestOfTagGroup</error>
      <error line="458" code="50010">No DocBlock was found for method testReadingMultipleCheckboxGroup()</error>
      <error line="467" code="50010">No DocBlock was found for method testReadingMultipleUncheckedItems()</error>
      <error line="475" code="50010">No DocBlock was found for method testReadingMultipleCheckedItems()</error>
      <error line="485" code="50010">No DocBlock was found for method testSettingSingleValue()</error>
      <error line="495" code="50010">No DocBlock was found for method testSettingMultipleValues()</error>
      <error line="503" code="50010">No DocBlock was found for method testSettingNoValue()</error>
      <error line="511" code="50010">No DocBlock was found for method testIsIdMatchesAnyIdInSet()</error>
      <error line="521" code="50000">No DocBlock was found for \TestOfUploadWidget</error>
      <error line="523" code="50010">No DocBlock was found for method testValueIsFilePath()</error>
      <error line="529" code="50010">No DocBlock was found for method testSubmitsFileContents()</error>
      <error line="541" code="50000">No DocBlock was found for \TestOfLabelTag</error>
      <error line="543" code="50010">No DocBlock was found for method testLabelShouldHaveAnEndTag()</error>
      <error line="548" code="50010">No DocBlock was found for method testContentIsTextOnly()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/test_with_parse_error.php" hash="d706551329189bc0587f18129a85fe2c" package="Default"/>
  <file path="test/simpletest/test/unit_tester_test.php" hash="545120bead725a1510c042e68dec6117" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="5" package="Default">
      <extends/>
      <name>ReferenceForTesting</name>
      <full_name>\ReferenceForTesting</full_name>
    </class>
    <class final="false" abstract="false" namespace="global" line="8" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfUnitTester</name>
      <full_name>\TestOfUnitTester</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="10" package="Default">
        <name>testAssertTrueReturnsAssertionAsBoolean</name>
        <full_name>testAssertTrueReturnsAssertionAsBoolean</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="14" package="Default">
        <name>testAssertFalseReturnsAssertionAsBoolean</name>
        <full_name>testAssertFalseReturnsAssertionAsBoolean</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="18" package="Default">
        <name>testAssertEqualReturnsAssertionAsBoolean</name>
        <full_name>testAssertEqualReturnsAssertionAsBoolean</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="22" package="Default">
        <name>testAssertIdenticalReturnsAssertionAsBoolean</name>
        <full_name>testAssertIdenticalReturnsAssertionAsBoolean</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="26" package="Default">
        <name>testCoreAssertionsDoNotThrowErrors</name>
        <full_name>testCoreAssertionsDoNotThrowErrors</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>testReferenceAssertionOnObjects</name>
        <full_name>testReferenceAssertionOnObjects</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="37" package="Default">
        <name>testReferenceAssertionOnScalars</name>
        <full_name>testReferenceAssertionOnScalars</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="43" package="Default">
        <name>testCloneOnObjects</name>
        <full_name>testCloneOnObjects</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="49" package="Default">
        <name>TODO_testCloneOnScalars</name>
        <full_name>TODO_testCloneOnScalars</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="55" package="Default">
        <name>testCopyOnScalars</name>
        <full_name>testCopyOnScalars</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/unit_tester_test.php</error>
      <error line="5" code="50000">No DocBlock was found for \ReferenceForTesting</error>
      <error line="8" code="50000">No DocBlock was found for \TestOfUnitTester</error>
      <error line="10" code="50010">No DocBlock was found for method testAssertTrueReturnsAssertionAsBoolean()</error>
      <error line="14" code="50010">No DocBlock was found for method testAssertFalseReturnsAssertionAsBoolean()</error>
      <error line="18" code="50010">No DocBlock was found for method testAssertEqualReturnsAssertionAsBoolean()</error>
      <error line="22" code="50010">No DocBlock was found for method testAssertIdenticalReturnsAssertionAsBoolean()</error>
      <error line="26" code="50010">No DocBlock was found for method testCoreAssertionsDoNotThrowErrors()</error>
      <error line="31" code="50010">No DocBlock was found for method testReferenceAssertionOnObjects()</error>
      <error line="37" code="50010">No DocBlock was found for method testReferenceAssertionOnScalars()</error>
      <error line="43" code="50010">No DocBlock was found for method testCloneOnObjects()</error>
      <error line="49" code="50010">No DocBlock was found for method TODO_testCloneOnScalars()</error>
      <error line="55" code="50010">No DocBlock was found for method testCopyOnScalars()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/unit_tests.php" hash="86da8e4110c6ac015183b028f1c38a76" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="7" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="8" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends>\TestSuite</extends>
      <name>UnitTests</name>
      <full_name>\UnitTests</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="11" package="Default">
        <name>UnitTests</name>
        <full_name>UnitTests</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/unit_tests.php</error>
      <error line="10" code="50000">No DocBlock was found for \UnitTests</error>
      <error line="11" code="50010">No DocBlock was found for method UnitTests()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/url_test.php" hash="a90d4b070fa15c9ab0bd631905cddd23" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="6" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfUrl</name>
      <full_name>\TestOfUrl</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="8" package="Default">
        <name>testDefaultUrl</name>
        <full_name>testDefaultUrl</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="17" package="Default">
        <name>testBasicParsing</name>
        <full_name>testBasicParsing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Default">
        <name>testRelativeUrls</name>
        <full_name>testRelativeUrls</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>testParseBareParameter</name>
        <full_name>testParseBareParameter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="39" package="Default">
        <name>testParseEmptyParameter</name>
        <full_name>testParseEmptyParameter</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Default">
        <name>testParseParameterPair</name>
        <full_name>testParseParameterPair</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="55" package="Default">
        <name>testParseMultipleParameters</name>
        <full_name>testParseMultipleParameters</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="Default">
        <name>testParsingParameterMixture</name>
        <full_name>testParsingParameterMixture</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="69" package="Default">
        <name>testAddParametersFromScratch</name>
        <full_name>testAddParametersFromScratch</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="79" package="Default">
        <name>testClearingParameters</name>
        <full_name>testClearingParameters</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="86" package="Default">
        <name>testEncodingParameters</name>
        <full_name>testEncodingParameters</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Default">
        <name>testDecodingParameters</name>
        <full_name>testDecodingParameters</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="101" package="Default">
        <name>testUrlInQueryDoesNotConfuseParsing</name>
        <full_name>testUrlInQueryDoesNotConfuseParsing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="109" package="Default">
        <name>testSettingCordinates</name>
        <full_name>testSettingCordinates</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="117" package="Default">
        <name>testParseCordinates</name>
        <full_name>testParseCordinates</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="123" package="Default">
        <name>testClearingCordinates</name>
        <full_name>testClearingCordinates</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="130" package="Default">
        <name>testParsingParameterCordinateMixture</name>
        <full_name>testParsingParameterCordinateMixture</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="137" package="Default">
        <name>testParsingParameterWithBadCordinates</name>
        <full_name>testParsingParameterWithBadCordinates</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="144" package="Default">
        <name>testPageSplitting</name>
        <full_name>testPageSplitting</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="151" package="Default">
        <name>testAbsolutePathPageSplitting</name>
        <full_name>testAbsolutePathPageSplitting</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="158" package="Default">
        <name>testSplittingUrlWithNoPageGivesEmptyPage</name>
        <full_name>testSplittingUrlWithNoPageGivesEmptyPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="165" package="Default">
        <name>testPathNormalisation</name>
        <full_name>testPathNormalisation</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="173" package="Default">
        <name>testPathNormalisationWithSinglePeriod</name>
        <full_name>testPathNormalisationWithSinglePeriod</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="181" package="Default">
        <name>testHostnameExtractedFromUContainingAtSign</name>
        <full_name>testHostnameExtractedFromUContainingAtSign</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="190" package="Default">
        <name>testHostnameInLocalhost</name>
        <full_name>testHostnameInLocalhost</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="199" package="Default">
        <name>testUsernameAndPasswordAreUrlDecoded</name>
        <full_name>testUsernameAndPasswordAreUrlDecoded</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="206" package="Default">
        <name>testBlitz</name>
        <full_name>testBlitz</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="237" package="Default">
        <name>testAmbiguousHosts</name>
        <full_name>testAmbiguousHosts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="258" package="Default">
        <name>testAsString</name>
        <full_name>testAsString</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="272" package="Default">
        <name>testUrlWithTwoSlashesInPath</name>
        <full_name>testUrlWithTwoSlashesInPath</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="277" package="Default">
        <name>testUrlWithRequestKeyEncoded</name>
        <full_name>testUrlWithRequestKeyEncoded</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="288" package="Default">
        <name>testUrlWithRequestKeyEncodedAndParamNamLookingLikePair</name>
        <full_name>testUrlWithRequestKeyEncodedAndParamNamLookingLikePair</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="296" package="Default">
        <name>assertUrl</name>
        <full_name>assertUrl</full_name>
        <argument line="296">
          <name>$raw</name>
          <default></default>
          <type/>
        </argument>
        <argument line="296">
          <name>$parts</name>
          <default></default>
          <type/>
        </argument>
        <argument line="296">
          <name>$params</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="296">
          <name>$coords</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="316" package="Default">
        <name>assertPreserved</name>
        <full_name>assertPreserved</full_name>
        <argument line="316">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="322" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfAbsoluteUrls</name>
      <full_name>\TestOfAbsoluteUrls</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="324" package="Default">
        <name>testDirectoriesAfterFilename</name>
        <full_name>testDirectoriesAfterFilename</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="333" package="Default">
        <name>testMakingAbsolute</name>
        <full_name>testMakingAbsolute</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="343" package="Default">
        <name>testMakingAnEmptyUrlAbsolute</name>
        <full_name>testMakingAnEmptyUrlAbsolute</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="352" package="Default">
        <name>testMakingAnEmptyUrlAbsoluteWithMissingPageName</name>
        <full_name>testMakingAnEmptyUrlAbsoluteWithMissingPageName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="361" package="Default">
        <name>testMakingAShortQueryUrlAbsolute</name>
        <full_name>testMakingAShortQueryUrlAbsolute</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="372" package="Default">
        <name>testMakingADirectoryUrlAbsolute</name>
        <full_name>testMakingADirectoryUrlAbsolute</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="381" package="Default">
        <name>testMakingARootUrlAbsolute</name>
        <full_name>testMakingARootUrlAbsolute</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="388" package="Default">
        <name>testMakingARootPageUrlAbsolute</name>
        <full_name>testMakingARootPageUrlAbsolute</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="394" package="Default">
        <name>testCarryAuthenticationFromRootPage</name>
        <full_name>testCarryAuthenticationFromRootPage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="402" package="Default">
        <name>testMakingCoordinateUrlAbsolute</name>
        <full_name>testMakingCoordinateUrlAbsolute</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="413" package="Default">
        <name>testMakingAbsoluteAppendedPath</name>
        <full_name>testMakingAbsoluteAppendedPath</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="419" package="Default">
        <name>testMakingAbsoluteBadlyFormedAppendedPath</name>
        <full_name>testMakingAbsoluteBadlyFormedAppendedPath</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="425" package="Default">
        <name>testMakingAbsoluteHasNoEffectWhenAlreadyAbsolute</name>
        <full_name>testMakingAbsoluteHasNoEffectWhenAlreadyAbsolute</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="438" package="Default">
        <name>testMakingAbsoluteCarriesAuthenticationWhenAlreadyAbsolute</name>
        <full_name>testMakingAbsoluteCarriesAuthenticationWhenAlreadyAbsolute</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="446" package="Default">
        <name>testMakingHostOnlyAbsoluteDoesNotCarryAnyOtherInformation</name>
        <full_name>testMakingHostOnlyAbsoluteDoesNotCarryAnyOtherInformation</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="456" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfFrameUrl</name>
      <full_name>\TestOfFrameUrl</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="458" package="Default">
        <name>testTargetAttachment</name>
        <full_name>testTargetAttachment</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="469" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfFileUrl</name>
      <full_name>\TestOfFileUrl</full_name>
      <docblock line="466">
        <description></description>
        <long-description></long-description>
        <tag line="466" name="note" description="Based off of http://www.mozilla.org/quality/networking/testing/filetests.html"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="471" package="Default">
        <name>testMinimalUrl</name>
        <full_name>testMinimalUrl</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="478" package="Default">
        <name>testUnixUrl</name>
        <full_name>testUnixUrl</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="485" package="Default">
        <name>testDOSVolumeUrl</name>
        <full_name>testDOSVolumeUrl</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="492" package="Default">
        <name>testDOSVolumePromotion</name>
        <full_name>testDOSVolumePromotion</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="499" package="Default">
        <name>testDOSBackslashes</name>
        <full_name>testDOSBackslashes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="506" package="Default">
        <name>testDOSDirnameAfterFile</name>
        <full_name>testDOSDirnameAfterFile</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/url_test.php</error>
      <error line="6" code="50000">No DocBlock was found for \TestOfUrl</error>
      <error line="8" code="50010">No DocBlock was found for method testDefaultUrl()</error>
      <error line="17" code="50010">No DocBlock was found for method testBasicParsing()</error>
      <error line="24" code="50010">No DocBlock was found for method testRelativeUrls()</error>
      <error line="31" code="50010">No DocBlock was found for method testParseBareParameter()</error>
      <error line="39" code="50010">No DocBlock was found for method testParseEmptyParameter()</error>
      <error line="47" code="50010">No DocBlock was found for method testParseParameterPair()</error>
      <error line="55" code="50010">No DocBlock was found for method testParseMultipleParameters()</error>
      <error line="62" code="50010">No DocBlock was found for method testParsingParameterMixture()</error>
      <error line="69" code="50010">No DocBlock was found for method testAddParametersFromScratch()</error>
      <error line="79" code="50010">No DocBlock was found for method testClearingParameters()</error>
      <error line="86" code="50010">No DocBlock was found for method testEncodingParameters()</error>
      <error line="94" code="50010">No DocBlock was found for method testDecodingParameters()</error>
      <error line="101" code="50010">No DocBlock was found for method testUrlInQueryDoesNotConfuseParsing()</error>
      <error line="109" code="50010">No DocBlock was found for method testSettingCordinates()</error>
      <error line="117" code="50010">No DocBlock was found for method testParseCordinates()</error>
      <error line="123" code="50010">No DocBlock was found for method testClearingCordinates()</error>
      <error line="130" code="50010">No DocBlock was found for method testParsingParameterCordinateMixture()</error>
      <error line="137" code="50010">No DocBlock was found for method testParsingParameterWithBadCordinates()</error>
      <error line="144" code="50010">No DocBlock was found for method testPageSplitting()</error>
      <error line="151" code="50010">No DocBlock was found for method testAbsolutePathPageSplitting()</error>
      <error line="158" code="50010">No DocBlock was found for method testSplittingUrlWithNoPageGivesEmptyPage()</error>
      <error line="165" code="50010">No DocBlock was found for method testPathNormalisation()</error>
      <error line="173" code="50010">No DocBlock was found for method testPathNormalisationWithSinglePeriod()</error>
      <error line="181" code="50010">No DocBlock was found for method testHostnameExtractedFromUContainingAtSign()</error>
      <error line="190" code="50010">No DocBlock was found for method testHostnameInLocalhost()</error>
      <error line="199" code="50010">No DocBlock was found for method testUsernameAndPasswordAreUrlDecoded()</error>
      <error line="206" code="50010">No DocBlock was found for method testBlitz()</error>
      <error line="237" code="50010">No DocBlock was found for method testAmbiguousHosts()</error>
      <error line="258" code="50010">No DocBlock was found for method testAsString()</error>
      <error line="272" code="50010">No DocBlock was found for method testUrlWithTwoSlashesInPath()</error>
      <error line="277" code="50010">No DocBlock was found for method testUrlWithRequestKeyEncoded()</error>
      <error line="288" code="50010">No DocBlock was found for method testUrlWithRequestKeyEncodedAndParamNamLookingLikePair()</error>
      <error line="296" code="50010">No DocBlock was found for method assertUrl()</error>
      <error line="316" code="50010">No DocBlock was found for method assertPreserved()</error>
      <error line="322" code="50000">No DocBlock was found for \TestOfAbsoluteUrls</error>
      <error line="324" code="50010">No DocBlock was found for method testDirectoriesAfterFilename()</error>
      <error line="333" code="50010">No DocBlock was found for method testMakingAbsolute()</error>
      <error line="343" code="50010">No DocBlock was found for method testMakingAnEmptyUrlAbsolute()</error>
      <error line="352" code="50010">No DocBlock was found for method testMakingAnEmptyUrlAbsoluteWithMissingPageName()</error>
      <error line="361" code="50010">No DocBlock was found for method testMakingAShortQueryUrlAbsolute()</error>
      <error line="372" code="50010">No DocBlock was found for method testMakingADirectoryUrlAbsolute()</error>
      <error line="381" code="50010">No DocBlock was found for method testMakingARootUrlAbsolute()</error>
      <error line="388" code="50010">No DocBlock was found for method testMakingARootPageUrlAbsolute()</error>
      <error line="394" code="50010">No DocBlock was found for method testCarryAuthenticationFromRootPage()</error>
      <error line="402" code="50010">No DocBlock was found for method testMakingCoordinateUrlAbsolute()</error>
      <error line="413" code="50010">No DocBlock was found for method testMakingAbsoluteAppendedPath()</error>
      <error line="419" code="50010">No DocBlock was found for method testMakingAbsoluteBadlyFormedAppendedPath()</error>
      <error line="425" code="50010">No DocBlock was found for method testMakingAbsoluteHasNoEffectWhenAlreadyAbsolute()</error>
      <error line="438" code="50010">No DocBlock was found for method testMakingAbsoluteCarriesAuthenticationWhenAlreadyAbsolute()</error>
      <error line="446" code="50010">No DocBlock was found for method testMakingHostOnlyAbsoluteDoesNotCarryAnyOtherInformation()</error>
      <error line="456" code="50000">No DocBlock was found for \TestOfFrameUrl</error>
      <error line="458" code="50010">No DocBlock was found for method testTargetAttachment()</error>
      <critical line="466" code="50005">No short description for class \TestOfFileUrl</critical>
      <error line="471" code="50010">No DocBlock was found for method testMinimalUrl()</error>
      <error line="478" code="50010">No DocBlock was found for method testUnixUrl()</error>
      <error line="485" code="50010">No DocBlock was found for method testDOSVolumeUrl()</error>
      <error line="492" code="50010">No DocBlock was found for method testDOSVolumePromotion()</error>
      <error line="499" code="50010">No DocBlock was found for method testDOSBackslashes()</error>
      <error line="506" code="50010">No DocBlock was found for method testDOSDirnameAfterFile()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/user_agent_test.php" hash="a5f75014b43601bd78860ec9038614b3" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="6" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="7" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="13" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfFetchingUrlParameters</name>
      <full_name>\TestOfFetchingUrlParameters</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="15" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Default">
        <name>testGetRequestWithoutIncidentGivesNoErrors</name>
        <full_name>testGetRequestWithoutIncidentGivesNoErrors</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="39" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfAdditionalHeaders</name>
      <full_name>\TestOfAdditionalHeaders</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Default">
        <name>testAdditionalHeaderAddedToRequest</name>
        <full_name>testAdditionalHeaderAddedToRequest</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="59" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfBrowserCookies</name>
      <full_name>\TestOfBrowserCookies</full_name>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="61" package="Default">
        <name>createStandardResponse</name>
        <full_name>createStandardResponse</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="69" package="Default">
        <name>createCookieSite</name>
        <full_name>createCookieSite</full_name>
        <argument line="69">
          <name>$header_lines</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="80" package="Default">
        <name>createMockedRequestUserAgent</name>
        <full_name>createMockedRequestUserAgent</full_name>
        <argument line="80">
          <name>$request</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="87" package="Default">
        <name>testCookieJarIsSentToRequest</name>
        <full_name>testCookieJarIsSentToRequest</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="102" package="Default">
        <name>testNoCookieJarIsSentToRequestWhenCookiesAreDisabled</name>
        <full_name>testNoCookieJarIsSentToRequestWhenCookiesAreDisabled</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="115" package="Default">
        <name>testReadingNewCookie</name>
        <full_name>testReadingNewCookie</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="124" package="Default">
        <name>testIgnoringNewCookieWhenCookiesDisabled</name>
        <full_name>testIgnoringNewCookieWhenCookiesDisabled</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="134" package="Default">
        <name>testOverwriteCookieThatAlreadyExists</name>
        <full_name>testOverwriteCookieThatAlreadyExists</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="144" package="Default">
        <name>testClearCookieBySettingExpiry</name>
        <full_name>testClearCookieBySettingExpiry</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="161" package="Default">
        <name>testAgeingAndClearing</name>
        <full_name>testAgeingAndClearing</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="179" package="Default">
        <name>testReadingIncomingAndSettingNewCookies</name>
        <full_name>testReadingIncomingAndSettingNewCookies</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="197" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfHttpRedirects</name>
      <full_name>\TestOfHttpRedirects</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="199" package="Default">
        <name>createRedirect</name>
        <full_name>createRedirect</full_name>
        <argument line="199">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
        <argument line="199">
          <name>$redirect</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="211" package="Default">
        <name>testDisabledRedirects</name>
        <full_name>testDisabledRedirects</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="223" package="Default">
        <name>testSingleRedirect</name>
        <full_name>testSingleRedirect</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="241" package="Default">
        <name>testDoubleRedirect</name>
        <full_name>testDoubleRedirect</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="263" package="Default">
        <name>testSuccessAfterRedirect</name>
        <full_name>testSuccessAfterRedirect</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="285" package="Default">
        <name>testRedirectChangesPostToGet</name>
        <full_name>testRedirectChangesPostToGet</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="304" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfBadHosts</name>
      <full_name>\TestOfBadHosts</full_name>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="306" package="Default">
        <name>createSimulatedBadHost</name>
        <full_name>createSimulatedBadHost</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="316" package="Default">
        <name>testUntestedHost</name>
        <full_name>testUntestedHost</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="328" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfAuthorisation</name>
      <full_name>\TestOfAuthorisation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="330" package="Default">
        <name>testAuthenticateHeaderAdded</name>
        <full_name>testAuthenticateHeaderAdded</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/user_agent_test.php</error>
      <error line="13" code="50000">No DocBlock was found for \TestOfFetchingUrlParameters</error>
      <error line="15" code="50010">No DocBlock was found for method setUp()</error>
      <error line="24" code="50010">No DocBlock was found for method testGetRequestWithoutIncidentGivesNoErrors()</error>
      <error line="39" code="50000">No DocBlock was found for \TestOfAdditionalHeaders</error>
      <error line="41" code="50010">No DocBlock was found for method testAdditionalHeaderAddedToRequest()</error>
      <error line="59" code="50000">No DocBlock was found for \TestOfBrowserCookies</error>
      <error line="61" code="50010">No DocBlock was found for method createStandardResponse()</error>
      <error line="69" code="50010">No DocBlock was found for method createCookieSite()</error>
      <error line="80" code="50010">No DocBlock was found for method createMockedRequestUserAgent()</error>
      <error line="87" code="50010">No DocBlock was found for method testCookieJarIsSentToRequest()</error>
      <error line="102" code="50010">No DocBlock was found for method testNoCookieJarIsSentToRequestWhenCookiesAreDisabled()</error>
      <error line="115" code="50010">No DocBlock was found for method testReadingNewCookie()</error>
      <error line="124" code="50010">No DocBlock was found for method testIgnoringNewCookieWhenCookiesDisabled()</error>
      <error line="134" code="50010">No DocBlock was found for method testOverwriteCookieThatAlreadyExists()</error>
      <error line="144" code="50010">No DocBlock was found for method testClearCookieBySettingExpiry()</error>
      <error line="161" code="50010">No DocBlock was found for method testAgeingAndClearing()</error>
      <error line="179" code="50010">No DocBlock was found for method testReadingIncomingAndSettingNewCookies()</error>
      <error line="197" code="50000">No DocBlock was found for \TestOfHttpRedirects</error>
      <error line="199" code="50010">No DocBlock was found for method createRedirect()</error>
      <error line="211" code="50010">No DocBlock was found for method testDisabledRedirects()</error>
      <error line="223" code="50010">No DocBlock was found for method testSingleRedirect()</error>
      <error line="241" code="50010">No DocBlock was found for method testDoubleRedirect()</error>
      <error line="263" code="50010">No DocBlock was found for method testSuccessAfterRedirect()</error>
      <error line="285" code="50010">No DocBlock was found for method testRedirectChangesPostToGet()</error>
      <error line="304" code="50000">No DocBlock was found for \TestOfBadHosts</error>
      <error line="306" code="50010">No DocBlock was found for method createSimulatedBadHost()</error>
      <error line="316" code="50010">No DocBlock was found for method testUntestedHost()</error>
      <error line="328" code="50000">No DocBlock was found for \TestOfAuthorisation</error>
      <error line="330" code="50010">No DocBlock was found for method testAuthenticateHeaderAdded()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/visual_test.php" hash="87ecc5126e1b214c3d33bbd16231af3a" package="Default">
    <include line="14" type="Require Once" package="Default">
      <name>../unit_tester.php</name>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name>../shell_tester.php</name>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name>../mock_objects.php</name>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name>../reporter.php</name>
    </include>
    <include line="18" type="Require Once" package="Default">
      <name>../xml.php</name>
    </include>
    <class final="false" abstract="false" namespace="global" line="20" package="Default">
      <extends/>
      <name>TestDisplayClass</name>
      <full_name>\TestDisplayClass</full_name>
      <property final="false" static="false" visibility="private" line="21" namespace="global" package="Default">
        <name>$a</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="Default">
        <name>TestDisplayClass</name>
        <full_name>TestDisplayClass</full_name>
        <argument line="23">
          <name>$a</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="28" package="Default">
      <extends>\UnitTestCase</extends>
      <name>PassingUnitTestCaseOutput</name>
      <full_name>\PassingUnitTestCaseOutput</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="30" package="Default">
        <name>testOfResults</name>
        <full_name>testOfResults</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="34" package="Default">
        <name>testTrue</name>
        <full_name>testTrue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="38" package="Default">
        <name>testFalse</name>
        <full_name>testFalse</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="42" package="Default">
        <name>testExpectation</name>
        <full_name>testExpectation</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Default">
        <name>testNull</name>
        <full_name>testNull</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Default">
        <name>testType</name>
        <full_name>testType</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Default">
        <name>testTypeEquality</name>
        <full_name>testTypeEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="Default">
        <name>testNullEquality</name>
        <full_name>testNullEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="67" package="Default">
        <name>testIntegerEquality</name>
        <full_name>testIntegerEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="Default">
        <name>testStringEquality</name>
        <full_name>testStringEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Default">
        <name>testHashEquality</name>
        <full_name>testHashEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="Default">
        <name>testWithin</name>
        <full_name>testWithin</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="Default">
        <name>testOutside</name>
        <full_name>testOutside</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="88" package="Default">
        <name>testStringIdentity</name>
        <full_name>testStringIdentity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Default">
        <name>testTypeIdentity</name>
        <full_name>testTypeIdentity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="100" package="Default">
        <name>testNullIdentity</name>
        <full_name>testNullIdentity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="105" package="Default">
        <name>testHashIdentity</name>
        <full_name>testHashIdentity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="108" package="Default">
        <name>testObjectEquality</name>
        <full_name>testObjectEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="113" package="Default">
        <name>testObjectIndentity</name>
        <full_name>testObjectIndentity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="118" package="Default">
        <name>testReference</name>
        <full_name>testReference</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="124" package="Default">
        <name>testCloneOnDifferentObjects</name>
        <full_name>testCloneOnDifferentObjects</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="131" package="Default">
        <name>testPatterns</name>
        <full_name>testPatterns</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="136" package="Default">
        <name>testLongStrings</name>
        <full_name>testLongStrings</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="145" package="Default">
      <extends>\UnitTestCase</extends>
      <name>FailingUnitTestCaseOutput</name>
      <full_name>\FailingUnitTestCaseOutput</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="147" package="Default">
        <name>testOfResults</name>
        <full_name>testOfResults</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="151" package="Default">
        <name>testTrue</name>
        <full_name>testTrue</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="155" package="Default">
        <name>testFalse</name>
        <full_name>testFalse</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="159" package="Default">
        <name>testExpectation</name>
        <full_name>testExpectation</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="164" package="Default">
        <name>testNull</name>
        <full_name>testNull</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="169" package="Default">
        <name>testType</name>
        <full_name>testType</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="175" package="Default">
        <name>testTypeEquality</name>
        <full_name>testTypeEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="179" package="Default">
        <name>testNullEquality</name>
        <full_name>testNullEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="184" package="Default">
        <name>testIntegerEquality</name>
        <full_name>testIntegerEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="188" package="Default">
        <name>testStringEquality</name>
        <full_name>testStringEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="193" package="Default">
        <name>testHashEquality</name>
        <full_name>testHashEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="197" package="Default">
        <name>testWithin</name>
        <full_name>testWithin</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="201" package="Default">
        <name>testOutside</name>
        <full_name>testOutside</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="205" package="Default">
        <name>testStringIdentity</name>
        <full_name>testStringIdentity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="211" package="Default">
        <name>testTypeIdentity</name>
        <full_name>testTypeIdentity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="217" package="Default">
        <name>testNullIdentity</name>
        <full_name>testNullIdentity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="222" package="Default">
        <name>testHashIdentity</name>
        <full_name>testHashIdentity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="226" package="Default">
        <name>testObjectEquality</name>
        <full_name>testObjectEquality</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="231" package="Default">
        <name>testObjectIndentity</name>
        <full_name>testObjectIndentity</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="236" package="Default">
        <name>testReference</name>
        <full_name>testReference</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="242" package="Default">
        <name>testCloneOnDifferentObjects</name>
        <full_name>testCloneOnDifferentObjects</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="249" package="Default">
        <name>testPatterns</name>
        <full_name>testPatterns</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="254" package="Default">
        <name>testLongStrings</name>
        <full_name>testLongStrings</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="263" package="Default">
      <extends/>
      <name>Dummy</name>
      <full_name>\Dummy</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="264" package="Default">
        <name>Dummy</name>
        <full_name>Dummy</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="267" package="Default">
        <name>a</name>
        <full_name>a</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="272" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfMockObjectsOutput</name>
      <full_name>\TestOfMockObjectsOutput</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="274" package="Default">
        <name>testCallCounts</name>
        <full_name>testCallCounts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="281" package="Default">
        <name>testMinimumCallCounts</name>
        <full_name>testMinimumCallCounts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="288" package="Default">
        <name>testEmptyMatching</name>
        <full_name>testEmptyMatching</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="295" package="Default">
        <name>testEmptyMatchingWithCustomMessage</name>
        <full_name>testEmptyMatchingWithCustomMessage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="302" package="Default">
        <name>testNullMatching</name>
        <full_name>testNullMatching</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="309" package="Default">
        <name>testBooleanMatching</name>
        <full_name>testBooleanMatching</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="316" package="Default">
        <name>testIntegerMatching</name>
        <full_name>testIntegerMatching</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="323" package="Default">
        <name>testFloatMatching</name>
        <full_name>testFloatMatching</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="330" package="Default">
        <name>testStringMatching</name>
        <full_name>testStringMatching</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="337" package="Default">
        <name>testEmptyMatchingWithCustomExpectationMessage</name>
        <full_name>testEmptyMatchingWithCustomExpectationMessage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="347" package="Default">
        <name>testArrayMatching</name>
        <full_name>testArrayMatching</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="354" package="Default">
        <name>testObjectMatching</name>
        <full_name>testObjectMatching</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="365" package="Default">
        <name>testBigList</name>
        <full_name>testBigList</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="373" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfPastBugs</name>
      <full_name>\TestOfPastBugs</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="375" package="Default">
        <name>testMixedTypes</name>
        <full_name>testMixedTypes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="380" package="Default">
        <name>testMockWildcards</name>
        <full_name>testMockWildcards</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="388" package="Default">
      <extends>\ShellTestCase</extends>
      <name>TestOfVisualShell</name>
      <full_name>\TestOfVisualShell</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="390" package="Default">
        <name>testDump</name>
        <full_name>testDump</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="397" package="Default">
        <name>testDumpOfList</name>
        <full_name>testDumpOfList</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="403" package="Default">
      <extends>\HtmlReporter</extends>
      <name>PassesAsWellReporter</name>
      <full_name>\PassesAsWellReporter</full_name>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="405" package="Default">
        <name>getCss</name>
        <full_name>getCss</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="409" package="Default">
        <name>paintPass</name>
        <full_name>paintPass</full_name>
        <argument line="409">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="418" package="Default">
        <name>paintSignal</name>
        <full_name>paintSignal</full_name>
        <argument line="418">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="418">
          <name>$payload</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="427" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfSkippingNoMatterWhat</name>
      <full_name>\TestOfSkippingNoMatterWhat</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="428" package="Default">
        <name>skip</name>
        <full_name>skip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="432" package="Default">
        <name>testFail</name>
        <full_name>testFail</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="437" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfSkippingOrElse</name>
      <full_name>\TestOfSkippingOrElse</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="438" package="Default">
        <name>skip</name>
        <full_name>skip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="442" package="Default">
        <name>testFail</name>
        <full_name>testFail</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="447" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfSkippingTwiceOver</name>
      <full_name>\TestOfSkippingTwiceOver</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="448" package="Default">
        <name>skip</name>
        <full_name>skip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="453" package="Default">
        <name>testFail</name>
        <full_name>testFail</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="458" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestThatShouldNotBeSkipped</name>
      <full_name>\TestThatShouldNotBeSkipped</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="459" package="Default">
        <name>skip</name>
        <full_name>skip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="464" package="Default">
        <name>testFail</name>
        <full_name>testFail</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="468" package="Default">
        <name>testPass</name>
        <full_name>testPass</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/visual_test.php</error>
      <error line="20" code="50000">No DocBlock was found for \TestDisplayClass</error>
      <error line="21" code="50018">No DocBlock was found for property $a</error>
      <error line="23" code="50010">No DocBlock was found for method TestDisplayClass()</error>
      <error line="28" code="50000">No DocBlock was found for \PassingUnitTestCaseOutput</error>
      <error line="30" code="50010">No DocBlock was found for method testOfResults()</error>
      <error line="34" code="50010">No DocBlock was found for method testTrue()</error>
      <error line="38" code="50010">No DocBlock was found for method testFalse()</error>
      <error line="42" code="50010">No DocBlock was found for method testExpectation()</error>
      <error line="47" code="50010">No DocBlock was found for method testNull()</error>
      <error line="52" code="50010">No DocBlock was found for method testType()</error>
      <error line="58" code="50010">No DocBlock was found for method testTypeEquality()</error>
      <error line="62" code="50010">No DocBlock was found for method testNullEquality()</error>
      <error line="67" code="50010">No DocBlock was found for method testIntegerEquality()</error>
      <error line="71" code="50010">No DocBlock was found for method testStringEquality()</error>
      <error line="76" code="50010">No DocBlock was found for method testHashEquality()</error>
      <error line="80" code="50010">No DocBlock was found for method testWithin()</error>
      <error line="84" code="50010">No DocBlock was found for method testOutside()</error>
      <error line="88" code="50010">No DocBlock was found for method testStringIdentity()</error>
      <error line="94" code="50010">No DocBlock was found for method testTypeIdentity()</error>
      <error line="100" code="50010">No DocBlock was found for method testNullIdentity()</error>
      <error line="105" code="50010">No DocBlock was found for method testHashIdentity()</error>
      <error line="108" code="50010">No DocBlock was found for method testObjectEquality()</error>
      <error line="113" code="50010">No DocBlock was found for method testObjectIndentity()</error>
      <error line="118" code="50010">No DocBlock was found for method testReference()</error>
      <error line="124" code="50010">No DocBlock was found for method testCloneOnDifferentObjects()</error>
      <error line="131" code="50010">No DocBlock was found for method testPatterns()</error>
      <error line="136" code="50010">No DocBlock was found for method testLongStrings()</error>
      <error line="145" code="50000">No DocBlock was found for \FailingUnitTestCaseOutput</error>
      <error line="147" code="50010">No DocBlock was found for method testOfResults()</error>
      <error line="151" code="50010">No DocBlock was found for method testTrue()</error>
      <error line="155" code="50010">No DocBlock was found for method testFalse()</error>
      <error line="159" code="50010">No DocBlock was found for method testExpectation()</error>
      <error line="164" code="50010">No DocBlock was found for method testNull()</error>
      <error line="169" code="50010">No DocBlock was found for method testType()</error>
      <error line="175" code="50010">No DocBlock was found for method testTypeEquality()</error>
      <error line="179" code="50010">No DocBlock was found for method testNullEquality()</error>
      <error line="184" code="50010">No DocBlock was found for method testIntegerEquality()</error>
      <error line="188" code="50010">No DocBlock was found for method testStringEquality()</error>
      <error line="193" code="50010">No DocBlock was found for method testHashEquality()</error>
      <error line="197" code="50010">No DocBlock was found for method testWithin()</error>
      <error line="201" code="50010">No DocBlock was found for method testOutside()</error>
      <error line="205" code="50010">No DocBlock was found for method testStringIdentity()</error>
      <error line="211" code="50010">No DocBlock was found for method testTypeIdentity()</error>
      <error line="217" code="50010">No DocBlock was found for method testNullIdentity()</error>
      <error line="222" code="50010">No DocBlock was found for method testHashIdentity()</error>
      <error line="226" code="50010">No DocBlock was found for method testObjectEquality()</error>
      <error line="231" code="50010">No DocBlock was found for method testObjectIndentity()</error>
      <error line="236" code="50010">No DocBlock was found for method testReference()</error>
      <error line="242" code="50010">No DocBlock was found for method testCloneOnDifferentObjects()</error>
      <error line="249" code="50010">No DocBlock was found for method testPatterns()</error>
      <error line="254" code="50010">No DocBlock was found for method testLongStrings()</error>
      <error line="263" code="50000">No DocBlock was found for \Dummy</error>
      <error line="264" code="50010">No DocBlock was found for method Dummy()</error>
      <error line="267" code="50010">No DocBlock was found for method a()</error>
      <error line="272" code="50000">No DocBlock was found for \TestOfMockObjectsOutput</error>
      <error line="274" code="50010">No DocBlock was found for method testCallCounts()</error>
      <error line="281" code="50010">No DocBlock was found for method testMinimumCallCounts()</error>
      <error line="288" code="50010">No DocBlock was found for method testEmptyMatching()</error>
      <error line="295" code="50010">No DocBlock was found for method testEmptyMatchingWithCustomMessage()</error>
      <error line="302" code="50010">No DocBlock was found for method testNullMatching()</error>
      <error line="309" code="50010">No DocBlock was found for method testBooleanMatching()</error>
      <error line="316" code="50010">No DocBlock was found for method testIntegerMatching()</error>
      <error line="323" code="50010">No DocBlock was found for method testFloatMatching()</error>
      <error line="330" code="50010">No DocBlock was found for method testStringMatching()</error>
      <error line="337" code="50010">No DocBlock was found for method testEmptyMatchingWithCustomExpectationMessage()</error>
      <error line="347" code="50010">No DocBlock was found for method testArrayMatching()</error>
      <error line="354" code="50010">No DocBlock was found for method testObjectMatching()</error>
      <error line="365" code="50010">No DocBlock was found for method testBigList()</error>
      <error line="373" code="50000">No DocBlock was found for \TestOfPastBugs</error>
      <error line="375" code="50010">No DocBlock was found for method testMixedTypes()</error>
      <error line="380" code="50010">No DocBlock was found for method testMockWildcards()</error>
      <error line="388" code="50000">No DocBlock was found for \TestOfVisualShell</error>
      <error line="390" code="50010">No DocBlock was found for method testDump()</error>
      <error line="397" code="50010">No DocBlock was found for method testDumpOfList()</error>
      <error line="403" code="50000">No DocBlock was found for \PassesAsWellReporter</error>
      <error line="405" code="50010">No DocBlock was found for method getCss()</error>
      <error line="409" code="50010">No DocBlock was found for method paintPass()</error>
      <error line="418" code="50010">No DocBlock was found for method paintSignal()</error>
      <error line="427" code="50000">No DocBlock was found for \TestOfSkippingNoMatterWhat</error>
      <error line="428" code="50010">No DocBlock was found for method skip()</error>
      <error line="432" code="50010">No DocBlock was found for method testFail()</error>
      <error line="437" code="50000">No DocBlock was found for \TestOfSkippingOrElse</error>
      <error line="438" code="50010">No DocBlock was found for method skip()</error>
      <error line="442" code="50010">No DocBlock was found for method testFail()</error>
      <error line="447" code="50000">No DocBlock was found for \TestOfSkippingTwiceOver</error>
      <error line="448" code="50010">No DocBlock was found for method skip()</error>
      <error line="453" code="50010">No DocBlock was found for method testFail()</error>
      <error line="458" code="50000">No DocBlock was found for \TestThatShouldNotBeSkipped</error>
      <error line="459" code="50010">No DocBlock was found for method skip()</error>
      <error line="464" code="50010">No DocBlock was found for method testFail()</error>
      <error line="468" code="50010">No DocBlock was found for method testPass()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/web_tester_test.php" hash="01919572a138f4f6de41b9008679d7bf" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="6" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfFieldExpectation</name>
      <full_name>\TestOfFieldExpectation</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="8" package="Default">
        <name>testStringMatchingIsCaseSensitive</name>
        <full_name>testStringMatchingIsCaseSensitive</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="15" package="Default">
        <name>testMatchesInteger</name>
        <full_name>testMatchesInteger</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="Default">
        <name>testNonStringFailsExpectation</name>
        <full_name>testNonStringFailsExpectation</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="28" package="Default">
        <name>testUnsetFieldCanBeTestedFor</name>
        <full_name>testUnsetFieldCanBeTestedFor</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Default">
        <name>testMultipleValuesCanBeInAnyOrder</name>
        <full_name>testMultipleValuesCanBeInAnyOrder</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Default">
        <name>testSingleItemCanBeArrayOrString</name>
        <full_name>testSingleItemCanBeArrayOrString</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="48" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfHeaderExpectations</name>
      <full_name>\TestOfHeaderExpectations</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="50" package="Default">
        <name>testExpectingOnlyTheHeaderName</name>
        <full_name>testExpectingOnlyTheHeaderName</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="59" package="Default">
        <name>testHeaderValueAsWell</name>
        <full_name>testHeaderValueAsWell</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="70" package="Default">
        <name>testHeaderValueWithColons</name>
        <full_name>testHeaderValueWithColons</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="78" package="Default">
        <name>testMultilineSearch</name>
        <full_name>testMultilineSearch</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="Default">
        <name>testMultilineSearchWithPadding</name>
        <full_name>testMultilineSearchWithPadding</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="90" package="Default">
        <name>testPatternMatching</name>
        <full_name>testPatternMatching</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="100" package="Default">
        <name>testCaseInsensitivePatternMatching</name>
        <full_name>testCaseInsensitivePatternMatching</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="109" package="Default">
        <name>testUnwantedHeader</name>
        <full_name>testUnwantedHeader</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="118" package="Default">
        <name>testMultilineUnwantedSearch</name>
        <full_name>testMultilineUnwantedSearch</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="124" package="Default">
        <name>testLocationHeaderSplitsCorrectly</name>
        <full_name>testLocationHeaderSplitsCorrectly</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="130" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfTextExpectations</name>
      <full_name>\TestOfTextExpectations</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="132" package="Default">
        <name>testMatchingSubString</name>
        <full_name>testMatchingSubString</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="140" package="Default">
        <name>testNotMatchingSubString</name>
        <full_name>testNotMatchingSubString</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="149" package="Default">
      <extends>\WebTestCase</extends>
      <name>TestOfGenericAssertionsInWebTester</name>
      <full_name>\TestOfGenericAssertionsInWebTester</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="150" package="Default">
        <name>testEquality</name>
        <full_name>testEquality</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/web_tester_test.php</error>
      <error line="6" code="50000">No DocBlock was found for \TestOfFieldExpectation</error>
      <error line="8" code="50010">No DocBlock was found for method testStringMatchingIsCaseSensitive()</error>
      <error line="15" code="50010">No DocBlock was found for method testMatchesInteger()</error>
      <error line="23" code="50010">No DocBlock was found for method testNonStringFailsExpectation()</error>
      <error line="28" code="50010">No DocBlock was found for method testUnsetFieldCanBeTestedFor()</error>
      <error line="33" code="50010">No DocBlock was found for method testMultipleValuesCanBeInAnyOrder()</error>
      <error line="41" code="50010">No DocBlock was found for method testSingleItemCanBeArrayOrString()</error>
      <error line="48" code="50000">No DocBlock was found for \TestOfHeaderExpectations</error>
      <error line="50" code="50010">No DocBlock was found for method testExpectingOnlyTheHeaderName()</error>
      <error line="59" code="50010">No DocBlock was found for method testHeaderValueAsWell()</error>
      <error line="70" code="50010">No DocBlock was found for method testHeaderValueWithColons()</error>
      <error line="78" code="50010">No DocBlock was found for method testMultilineSearch()</error>
      <error line="84" code="50010">No DocBlock was found for method testMultilineSearchWithPadding()</error>
      <error line="90" code="50010">No DocBlock was found for method testPatternMatching()</error>
      <error line="100" code="50010">No DocBlock was found for method testCaseInsensitivePatternMatching()</error>
      <error line="109" code="50010">No DocBlock was found for method testUnwantedHeader()</error>
      <error line="118" code="50010">No DocBlock was found for method testMultilineUnwantedSearch()</error>
      <error line="124" code="50010">No DocBlock was found for method testLocationHeaderSplitsCorrectly()</error>
      <error line="130" code="50000">No DocBlock was found for \TestOfTextExpectations</error>
      <error line="132" code="50010">No DocBlock was found for method testMatchingSubString()</error>
      <error line="140" code="50010">No DocBlock was found for method testNotMatchingSubString()</error>
      <error line="149" code="50000">No DocBlock was found for \TestOfGenericAssertionsInWebTester</error>
      <error line="150" code="50010">No DocBlock was found for method testEquality()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test/xml_test.php" hash="bc56ce98184721afa83d6de0d57c2665" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="12" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfNestingTags</name>
      <full_name>\TestOfNestingTags</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="13" package="Default">
        <name>testGroupSize</name>
        <full_name>testGroupSize</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="19" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfXmlStructureParsing</name>
      <full_name>\TestOfXmlStructureParsing</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="20" package="Default">
        <name>testValidXml</name>
        <full_name>testValidXml</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="Default">
        <name>testEmptyGroup</name>
        <full_name>testEmptyGroup</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Default">
        <name>testEmptyCase</name>
        <full_name>testEmptyCase</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Default">
        <name>testEmptyMethod</name>
        <full_name>testEmptyMethod</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Default">
        <name>testNestedGroup</name>
        <full_name>testNestedGroup</full_name>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="99" package="Default">
      <extends/>
      <name>AnyOldSignal</name>
      <full_name>\AnyOldSignal</full_name>
      <property final="false" static="false" visibility="public" line="100" namespace="global" package="Default">
        <name>$stuff</name>
        <default>true</default>
      </property>
    </class>
    <class final="false" abstract="false" namespace="global" line="103" package="Default">
      <extends>\UnitTestCase</extends>
      <name>TestOfXmlResultsParsing</name>
      <full_name>\TestOfXmlResultsParsing</full_name>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="105" package="Default">
        <name>sendValidStart</name>
        <full_name>sendValidStart</full_name>
        <argument line="105">
          <name>$parser</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="Default">
        <name>sendValidEnd</name>
        <full_name>sendValidEnd</full_name>
        <argument line="114">
          <name>$parser</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="120" package="Default">
        <name>testPass</name>
        <full_name>testPass</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="129" package="Default">
        <name>testFail</name>
        <full_name>testFail</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="138" package="Default">
        <name>testException</name>
        <full_name>testException</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="147" package="Default">
        <name>testSkip</name>
        <full_name>testSkip</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="156" package="Default">
        <name>testSignal</name>
        <full_name>testSignal</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="169" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="178" package="Default">
        <name>testFormattedMessage</name>
        <full_name>testFormattedMessage</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test/xml_test.php</error>
      <error line="12" code="50000">No DocBlock was found for \TestOfNestingTags</error>
      <error line="13" code="50010">No DocBlock was found for method testGroupSize()</error>
      <error line="19" code="50000">No DocBlock was found for \TestOfXmlStructureParsing</error>
      <error line="20" code="50010">No DocBlock was found for method testValidXml()</error>
      <error line="32" code="50010">No DocBlock was found for method testEmptyGroup()</error>
      <error line="45" code="50010">No DocBlock was found for method testEmptyCase()</error>
      <error line="58" code="50010">No DocBlock was found for method testEmptyMethod()</error>
      <error line="76" code="50010">No DocBlock was found for method testNestedGroup()</error>
      <error line="99" code="50000">No DocBlock was found for \AnyOldSignal</error>
      <error line="100" code="50018">No DocBlock was found for property $stuff</error>
      <error line="103" code="50000">No DocBlock was found for \TestOfXmlResultsParsing</error>
      <error line="105" code="50010">No DocBlock was found for method sendValidStart()</error>
      <error line="114" code="50010">No DocBlock was found for method sendValidEnd()</error>
      <error line="120" code="50010">No DocBlock was found for method testPass()</error>
      <error line="129" code="50010">No DocBlock was found for method testFail()</error>
      <error line="138" code="50010">No DocBlock was found for method testException()</error>
      <error line="147" code="50010">No DocBlock was found for method testSkip()</error>
      <error line="156" code="50010">No DocBlock was found for method testSignal()</error>
      <error line="169" code="50010">No DocBlock was found for method testMessage()</error>
      <error line="178" code="50010">No DocBlock was found for method testFormattedMessage()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/test_case.php" hash="4bcad27935c73e6186ac2cf4b3c4966d" package="Default">
    <include line="13" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: test_case.php 2012 2011-04-29 08:57:00Z pp11 $"/>
      </docblock>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="16" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="17" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="18" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="19" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="20" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="21" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="382" type="Include Once" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="27" package="Default">
      <name>SIMPLE_TEST</name>
      <full_name>\SIMPLE_TEST</full_name>
      <value>dirname(__FILE__) . DIRECTORY_SEPARATOR</value>
      <docblock line="24">
        <description></description>
        <long-description></long-description>
        <tag line="24" name="ignore" description=""/>
      </docblock>
    </constant>
    <class final="false" abstract="false" namespace="global" line="38" package="SimpleTest&#10;   @subpackage   UnitTester">
      <extends/>
      <name>SimpleTestCase</name>
      <full_name>\SimpleTestCase</full_name>
      <docblock line="30">
        <description>Basic test case.</description>
        <long-description>&lt;p&gt;This is the smallest unit of a test
   suite. It searches for
   all methods that start with the the string "test" and
   runs them. Working test cases extend this class.&lt;/p&gt;</long-description>
        <tag line="30" name="package" description="SimpleTest&#10;   @subpackage   UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="39" namespace="global" package="Default">
        <name>$label</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="protected" line="40" namespace="global" package="Default">
        <name>$reporter</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="41" namespace="global" package="Default">
        <name>$observers</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="42" namespace="global" package="Default">
        <name>$should_skip</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="50" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="44">
          <description>Sets up the test with no display.</description>
          <long-description>&lt;p&gt;@param string $label    If no test name is given then
                           the class name is used.&lt;/p&gt;</long-description>
          <tag line="44" name="access" description="public"/>
        </docblock>
        <argument line="50">
          <name>$label</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="61" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getLabel</name>
        <full_name>getLabel</full_name>
        <docblock line="56">
          <description>Accessor for the test name for subclasses.</description>
          <long-description>&lt;p&gt;@return string           Name of the test.&lt;/p&gt;</long-description>
          <tag line="56" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>skip</name>
        <full_name>skip</full_name>
        <docblock line="65">
          <description>This is a placeholder for skipping tests.</description>
          <long-description>&lt;p&gt;In this
   method you place skipIf() and skipUnless() calls to
   set the skipping state.&lt;/p&gt;</long-description>
          <tag line="65" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="81" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>skipIf</name>
        <full_name>skipIf</full_name>
        <docblock line="74">
          <description>Will issue a message to the reporter and tell the test
   case to skip if the incoming flag is true.</description>
          <long-description>&lt;p&gt;@param string $should_skip    Condition causing the tests to be skipped.&lt;/p&gt;</long-description>
          <tag line="74" name="param" description="Text of skip condition. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$should_skip</name>
          <default></default>
          <type/>
        </argument>
        <argument line="81">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="93" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>shouldSkip</name>
        <full_name>shouldSkip</full_name>
        <docblock line="89">
          <description>Accessor for the private variable $_shoud_skip</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="104" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>skipUnless</name>
        <full_name>skipUnless</full_name>
        <docblock line="97">
          <description>Will issue a message to the reporter and tell the test
   case to skip if the incoming flag is false.</description>
          <long-description>&lt;p&gt;@param string $shouldnt_skip  Condition causing the tests to be run.&lt;/p&gt;</long-description>
          <tag line="97" name="param" description="Text of skip condition. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$shouldnt_skip</name>
          <default></default>
          <type/>
        </argument>
        <argument line="104">
          <name>$message</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="113" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>createInvoker</name>
        <full_name>createInvoker</full_name>
        <docblock line="108">
          <description>Used to invoke the single tests.</description>
          <long-description>&lt;p&gt;@return SimpleInvoker        Individual test runner.&lt;/p&gt;</long-description>
          <tag line="108" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="126" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>run</name>
        <full_name>run</full_name>
        <docblock line="118">
          <description>Uses reflection to run every method within itself
   starting with the string "test" unless a method
   is specified.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $reporter    Current test reporter.&lt;/p&gt;</long-description>
          <tag line="118" name="return" description="True if all tests passed.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$reporter</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="164" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getTests</name>
        <full_name>getTests</full_name>
        <docblock line="156">
          <description>Gets a list of test names.</description>
          <long-description>&lt;p&gt;Normally that will
   be all internal methods that start with the
   name "test". This method should be overridden
   if you want a different rule.&lt;/p&gt;</long-description>
          <tag line="156" name="return" description="List of test names.&#10;   @access public" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="182" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>isTest</name>
        <full_name>isTest</full_name>
        <docblock line="174">
          <description>Tests to see if the method is a test that should
   be run.</description>
          <long-description>&lt;p&gt;Currently any method that starts with 'test'
   is a candidate unless it is the constructor.&lt;/p&gt;</long-description>
          <tag line="174" name="param" description="Method name to try. @return boolean True if test method. @access protected" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="182">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="194" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>before</name>
        <full_name>before</full_name>
        <docblock line="189">
          <description>Announces the start of the test.</description>
          <long-description>&lt;p&gt;@param string $method    Test method just started.&lt;/p&gt;</long-description>
          <tag line="189" name="access" description="public"/>
        </docblock>
        <argument line="194">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="205" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>setUp</name>
        <full_name>setUp</full_name>
        <docblock line="199">
          <description>Sets up unit test wide variables at the start
   of each test method.</description>
          <long-description>&lt;p&gt;To be overridden in
   actual user test cases.&lt;/p&gt;</long-description>
          <tag line="199" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="213" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
        <docblock line="208">
          <description>Clears the data set in the setUp() method call.</description>
          <long-description>&lt;p&gt;To be overridden by the user in actual user test cases.&lt;/p&gt;</long-description>
          <tag line="208" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="221" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>after</name>
        <full_name>after</full_name>
        <docblock line="216">
          <description>Announces the end of the test.</description>
          <long-description>&lt;p&gt;Includes private clean up.&lt;/p&gt;</long-description>
          <tag line="216" name="param" description="Test method just finished. @access public" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="221">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="234" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>tell</name>
        <full_name>tell</full_name>
        <docblock line="228">
          <description>Sets up an observer for the test end.</description>
          <long-description>&lt;p&gt;@param object $observer    Must have atTestEnd()
                              method.&lt;/p&gt;</long-description>
          <tag line="228" name="access" description="public"/>
        </docblock>
        <argument line="234">
          <name>$observer</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="241" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>pass</name>
        <full_name>pass</full_name>
        <docblock line="238">
          <description></description>
          <long-description></long-description>
          <tag line="238" name="deprecated" description=""/>
        </docblock>
        <argument line="241">
          <name>$message</name>
          <default>"Pass"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="255" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>fail</name>
        <full_name>fail</full_name>
        <docblock line="250">
          <description>Sends a fail event with a message.</description>
          <long-description>&lt;p&gt;@param string $message        Message to send.&lt;/p&gt;</long-description>
          <tag line="250" name="access" description="public"/>
        </docblock>
        <argument line="255">
          <name>$message</name>
          <default>"Fail"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="273" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>error</name>
        <full_name>error</full_name>
        <docblock line="264">
          <description>Formats a PHP error and dispatches it to the
   reporter.</description>
          <long-description>&lt;p&gt;@param integer $severity  PHP error code.&lt;/p&gt;</long-description>
          <tag line="264" name="param" description="Text of error. @param string $file File error occoured in. @param integer $line Line number of error. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="273">
          <name>$severity</name>
          <default></default>
          <type/>
        </argument>
        <argument line="273">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
        <argument line="273">
          <name>$file</name>
          <default></default>
          <type/>
        </argument>
        <argument line="273">
          <name>$line</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="287" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>exception</name>
        <full_name>exception</full_name>
        <docblock line="281">
          <description>Formats an exception and dispatches it to the
   reporter.</description>
          <long-description>&lt;p&gt;@param Exception $exception    Object thrown.&lt;/p&gt;</long-description>
          <tag line="281" name="access" description="public"/>
        </docblock>
        <argument line="287">
          <name>$exception</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="296" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>signal</name>
        <full_name>signal</full_name>
        <docblock line="291">
          <description>For user defined expansion of the available messages.</description>
          <long-description>&lt;p&gt;@param string $type       Tag for sorting the signals.&lt;/p&gt;</long-description>
          <tag line="291" name="param" description="Extra user specific information." type="mixed" variable="$payload">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="296">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="296">
          <name>$payload</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="312" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assert</name>
        <full_name>assert</full_name>
        <docblock line="303">
          <description>Runs an expectation directly, for extending the
   tests with new expectation classes.</description>
          <long-description>&lt;p&gt;@param SimpleExpectation $expectation  Expectation subclass.&lt;/p&gt;</long-description>
          <tag line="303" name="param" description="Value to compare. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="312">
          <name>$expectation</name>
          <default></default>
          <type/>
        </argument>
        <argument line="312">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
        <argument line="312">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="330" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getAssertionLine</name>
        <full_name>getAssertionLine</full_name>
        <docblock line="324">
          <description>Uses a stack trace to find the line of an assertion.</description>
          <long-description>&lt;p&gt;@return string           Line number of first assert*
                            method embedded in format string.&lt;/p&gt;</long-description>
          <tag line="324" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="344" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>dump</name>
        <full_name>dump</full_name>
        <docblock line="335">
          <description>Sends a formatted dump of a variable to the
   test suite for those emergency debugging
   situations.</description>
          <long-description>&lt;p&gt;@param mixed $variable    Variable to display.&lt;/p&gt;</long-description>
          <tag line="335" name="param" description="Message to display. @return mixed The original variable. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="344">
          <name>$variable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="344">
          <name>$message</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="359" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>getSize</name>
        <full_name>getSize</full_name>
        <docblock line="354">
          <description>Accessor for the number of subtests including myelf.</description>
          <long-description>&lt;p&gt;@return integer           Number of test cases.&lt;/p&gt;</long-description>
          <tag line="354" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="369" package="Default">
      <extends/>
      <name>SimpleFileLoader</name>
      <full_name>\SimpleFileLoader</full_name>
      <docblock line="364">
        <description>Helps to extract test cases automatically from a file.</description>
        <long-description>&lt;p&gt;@package      SimpleTest&lt;/p&gt;</long-description>
        <tag line="364" name="subpackage" description="UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="379" package="Default">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="371">
          <description>Builds a test suite from a library of test cases.</description>
          <long-description>&lt;p&gt;The new suite is composed into this one.&lt;/p&gt;</long-description>
          <tag line="371" name="param" description="File name of library with test case classes. @return TestSuite The new test suite. @access public" type="string" variable="$test_file">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="379">
          <name>$test_file</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="399" package="Default">
        <name>makeFileVariablesGlobal</name>
        <full_name>makeFileVariablesGlobal</full_name>
        <docblock line="393">
          <description>Imports new variables into the global namespace.</description>
          <long-description>&lt;p&gt;@param hash $existing   Variables before the file was loaded.&lt;/p&gt;</long-description>
          <tag line="393" name="param" description="Variables after the file was loaded. @access private" type="\hash" variable="$new">
            <type by_reference="false">\hash</type>
          </tag>
        </docblock>
        <argument line="399">
          <name>$existing</name>
          <default></default>
          <type/>
        </argument>
        <argument line="399">
          <name>$new</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="416" package="Default">
        <name>scrapeClassesFromFile</name>
        <full_name>scrapeClassesFromFile</full_name>
        <docblock line="406">
          <description>Lookup classnames from file contents, in case the
   file may have been included before.</description>
          <long-description>&lt;p&gt;Note: This is probably too clever by half. Figuring this
   out after a failed test case is going to be tricky for us,
   never mind the user. A test case should not be included
   twice anyway.&lt;/p&gt;</long-description>
          <tag line="406" name="param" description="File name with classes. @access private" type="string" variable="$test_file">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="416">
          <name>$test_file</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="431" package="Default">
        <name>selectRunnableTests</name>
        <full_name>selectRunnableTests</full_name>
        <docblock line="423">
          <description>Calculates the incoming test cases.</description>
          <long-description>&lt;p&gt;Skips abstract
   and ignored classes.&lt;/p&gt;</long-description>
          <tag line="423" name="param" description="Candidate classes. @return array New classes which are test cases that shouldn't be ignored. @access public" type="array" variable="$candidates">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="431">
          <name>$candidates</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="454" package="Default">
        <name>createSuiteFromClasses</name>
        <full_name>createSuiteFromClasses</full_name>
        <docblock line="446">
          <description>Builds a test suite from a class list.</description>
          <long-description>&lt;p&gt;@param string $title       Title of new group.&lt;/p&gt;</long-description>
          <tag line="446" name="param" description="Test classes. @return TestSuite Group loaded with the new test cases. @access public" type="array" variable="$classes">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="454">
          <name>$title</name>
          <default></default>
          <type/>
        </argument>
        <argument line="454">
          <name>$classes</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="477" package="Default">
      <extends/>
      <name>TestSuite</name>
      <full_name>\TestSuite</full_name>
      <docblock line="470">
        <description>This is a composite test class for combining
   test cases and other RunnableTest classes into
   a group test.</description>
        <long-description>&lt;p&gt;@package      SimpleTest&lt;/p&gt;</long-description>
        <tag line="470" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="478" namespace="global" package="Default">
        <name>$label</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="479" namespace="global" package="Default">
        <name>$test_cases</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="487" package="Default">
        <name>TestSuite</name>
        <full_name>TestSuite</full_name>
        <docblock line="481">
          <description>Sets the name of the test suite.</description>
          <long-description>&lt;p&gt;@param string $label    Name sent at the start and end
                           of the test.&lt;/p&gt;</long-description>
          <tag line="481" name="access" description="public"/>
        </docblock>
        <argument line="487">
          <name>$label</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="498" package="Default">
        <name>getLabel</name>
        <full_name>getLabel</full_name>
        <docblock line="492">
          <description>Accessor for the test name for subclasses.</description>
          <long-description>&lt;p&gt;If the suite
   wraps a single test case the label defaults to the name of that test.&lt;/p&gt;</long-description>
          <tag line="492" name="return" description="Name of the test.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="515" package="Default">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="507">
          <description>Adds a test into the suite by instance or class.</description>
          <long-description>&lt;p&gt;The class will
   be instantiated if it's a test suite.&lt;/p&gt;</long-description>
          <tag line="507" name="param" description="Suite or individual test case implementing the runnable test interface. @access public" type="\SimpleTestCase" variable="$test_case">
            <type by_reference="false">\SimpleTestCase</type>
          </tag>
        </docblock>
        <argument line="515">
          <name>$test_case</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="532" package="Default">
        <name>addFile</name>
        <full_name>addFile</full_name>
        <docblock line="525">
          <description>Builds a test suite from a library of test cases.</description>
          <long-description>&lt;p&gt;The new suite is composed into this one.&lt;/p&gt;</long-description>
          <tag line="525" name="param" description="File name of library with test case classes. @access public" type="string" variable="$test_file">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="532">
          <name>$test_file</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="544" package="Default">
        <name>collect</name>
        <full_name>collect</full_name>
        <docblock line="537">
          <description>Delegates to a visiting collector to add test
   files.</description>
          <long-description>&lt;p&gt;@param string $path                  Path to scan from.&lt;/p&gt;</long-description>
          <tag line="537" name="param" description="Directory scanner. @access public" type="\SimpleCollector" variable="$collector">
            <type by_reference="false">\SimpleCollector</type>
          </tag>
        </docblock>
        <argument line="544">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="544">
          <name>$collector</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="554" package="Default">
        <name>run</name>
        <full_name>run</full_name>
        <docblock line="548">
          <description>Invokes run() on all of the held test cases, instantiating
   them if necessary.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $reporter    Current test reporter.&lt;/p&gt;</long-description>
          <tag line="548" name="access" description="public"/>
        </docblock>
        <argument line="554">
          <name>$reporter</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="575" package="Default">
        <name>getSize</name>
        <full_name>getSize</full_name>
        <docblock line="570">
          <description>Number of contained test cases.</description>
          <long-description>&lt;p&gt;@return integer     Total count of cases in the group.&lt;/p&gt;</long-description>
          <tag line="570" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="595" package="Default">
        <name>getBaseTestCase</name>
        <full_name>getBaseTestCase</full_name>
        <docblock line="589">
          <description>Test to see if a class is derived from the
   SimpleTestCase class.</description>
          <long-description>&lt;p&gt;@param string $class     Class name.&lt;/p&gt;</long-description>
          <tag line="589" name="access" description="public"/>
        </docblock>
        <argument line="595">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="612" package="Default">
      <extends/>
      <name>BadTestSuite</name>
      <full_name>\BadTestSuite</full_name>
      <docblock line="606">
        <description>This is a failing group test for when a test suite hasn't
   loaded properly.</description>
        <long-description>&lt;p&gt;@package      SimpleTest&lt;/p&gt;</long-description>
        <tag line="606" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="613" namespace="global" package="Default">
        <name>$label</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="614" namespace="global" package="Default">
        <name>$error</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="622" package="Default">
        <name>BadTestSuite</name>
        <full_name>BadTestSuite</full_name>
        <docblock line="616">
          <description>Sets the name of the test suite and error message.</description>
          <long-description>&lt;p&gt;@param string $label    Name sent at the start and end
                           of the test.&lt;/p&gt;</long-description>
          <tag line="616" name="access" description="public"/>
        </docblock>
        <argument line="622">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="622">
          <name>$error</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="632" package="Default">
        <name>getLabel</name>
        <full_name>getLabel</full_name>
        <docblock line="627">
          <description>Accessor for the test name for subclasses.</description>
          <long-description>&lt;p&gt;@return string           Name of the test.&lt;/p&gt;</long-description>
          <tag line="627" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="641" package="Default">
        <name>run</name>
        <full_name>run</full_name>
        <docblock line="636">
          <description>Sends a single error to the reporter.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $reporter    Current test reporter.&lt;/p&gt;</long-description>
          <tag line="636" name="access" description="public"/>
        </docblock>
        <argument line="641">
          <name>$reporter</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="654" package="Default">
        <name>getSize</name>
        <full_name>getSize</full_name>
        <docblock line="649">
          <description>Number of contained test cases.</description>
          <long-description>&lt;p&gt;Always zero.&lt;/p&gt;</long-description>
          <tag line="649" name="return" description="Total count of cases in the group.&#10;   @access public" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/test_case.php</error>
      <error line="39" code="50018">No DocBlock was found for property $label</error>
      <error line="40" code="50018">No DocBlock was found for property $reporter</error>
      <error line="41" code="50018">No DocBlock was found for property $observers</error>
      <error line="42" code="50018">No DocBlock was found for property $should_skip</error>
      <error line="44" code="50015">Argument $label is missing from the Docblock of __construct()</error>
      <error line="74" code="50014">Name of argument $should_skip does not match with the DocBlock's name $message in skipIf()</error>
      <error line="74" code="50015">Argument $message is missing from the Docblock of skipIf()</error>
      <error line="97" code="50014">Name of argument $shouldnt_skip does not match with the DocBlock's name $message in skipUnless()</error>
      <error line="97" code="50015">Argument $message is missing from the Docblock of skipUnless()</error>
      <error line="118" code="50015">Argument $reporter is missing from the Docblock of run()</error>
      <error line="189" code="50015">Argument $method is missing from the Docblock of before()</error>
      <error line="228" code="50015">Argument $observer is missing from the Docblock of tell()</error>
      <error line="238" code="50012">No short description for method pass()</error>
      <error line="238" code="50015">Argument $message is missing from the Docblock of pass()</error>
      <error line="250" code="50015">Argument $message is missing from the Docblock of fail()</error>
      <error line="264" code="50014">Name of argument $severity does not match with the DocBlock's name $message in error()</error>
      <error line="264" code="50015">Argument $message is missing from the Docblock of error()</error>
      <error line="264" code="50015">Argument $file is missing from the Docblock of error()</error>
      <error line="264" code="50015">Argument $line is missing from the Docblock of error()</error>
      <error line="281" code="50015">Argument $exception is missing from the Docblock of exception()</error>
      <error line="291" code="50014">Name of argument $type does not match with the DocBlock's name $payload in signal()</error>
      <error line="291" code="50015">Argument $payload is missing from the Docblock of signal()</error>
      <error line="303" code="50014">Name of argument $expectation does not match with the DocBlock's name $compare in assert()</error>
      <error line="303" code="50015">Argument $compare is missing from the Docblock of assert()</error>
      <error line="303" code="50015">Argument $message is missing from the Docblock of assert()</error>
      <error line="335" code="50014">Name of argument $variable does not match with the DocBlock's name $message in dump()</error>
      <error line="335" code="50015">Argument $message is missing from the Docblock of dump()</error>
      <critical line="364" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="393" code="50014">Name of argument $existing does not match with the DocBlock's name $new in makeFileVariablesGlobal()</error>
      <error line="393" code="50015">Argument $new is missing from the Docblock of makeFileVariablesGlobal()</error>
      <error line="446" code="50014">Name of argument $title does not match with the DocBlock's name $classes in createSuiteFromClasses()</error>
      <error line="446" code="50015">Argument $classes is missing from the Docblock of createSuiteFromClasses()</error>
      <critical line="470" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="478" code="50018">No DocBlock was found for property $label</error>
      <error line="479" code="50018">No DocBlock was found for property $test_cases</error>
      <error line="481" code="50015">Argument $label is missing from the Docblock of TestSuite()</error>
      <error line="537" code="50014">Name of argument $path does not match with the DocBlock's name $collector in collect()</error>
      <error line="537" code="50015">Argument $collector is missing from the Docblock of collect()</error>
      <error line="548" code="50015">Argument $reporter is missing from the Docblock of run()</error>
      <error line="589" code="50015">Argument $class is missing from the Docblock of getBaseTestCase()</error>
      <critical line="606" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="613" code="50018">No DocBlock was found for property $label</error>
      <error line="614" code="50018">No DocBlock was found for property $error</error>
      <error line="616" code="50015">Argument $label is missing from the Docblock of BadTestSuite()</error>
      <error line="616" code="50015">Argument $error is missing from the Docblock of BadTestSuite()</error>
      <error line="636" code="50015">Argument $reporter is missing from the Docblock of run()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/tidy_parser.php" hash="afb2062671500784ffd97908d4ea5d5c" package="Default">
    <docblock line="2">
      <description>base include file for SimpleTest</description>
      <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
      <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: php_parser.php 1911 2009-07-29 16:38:04Z lastcraft $"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="14" package="Default">
      <extends/>
      <name>SimpleTidyPageBuilder</name>
      <full_name>\SimpleTidyPageBuilder</full_name>
      <docblock line="9">
        <description>Builds the page object.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="9" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="15" namespace="global" package="Default">
        <name>$page</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="16" namespace="global" package="Default">
        <name>$forms</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="17" namespace="global" package="Default">
        <name>$labels</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="18" namespace="global" package="Default">
        <name>$widgets_by_id</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="20" package="Default">
        <name>__destruct</name>
        <full_name>__destruct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="28" package="Default">
        <name>free</name>
        <full_name>free</full_name>
        <docblock line="24">
          <description>Frees up any references so as to allow the PHP garbage
   collection from unset() to work.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="38" package="Default">
        <name>can</name>
        <full_name>can</full_name>
        <docblock line="34">
          <description>This builder is only available if the 'tidy' extension is loaded.</description>
          <long-description>&lt;p&gt;@return boolean       True if available.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="47" package="Default">
        <name>parse</name>
        <full_name>parse</full_name>
        <docblock line="42">
          <description>Reads the raw content the page using HTML Tidy.</description>
          <long-description>&lt;p&gt;@param $response SimpleHttpResponse  Fetched response.&lt;/p&gt;</long-description>
          <tag line="42" name="return" description="Newly parsed page." type="\SimplePage">
            <type by_reference="false">\SimplePage</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$response</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="65" package="Default">
        <name>insertGuards</name>
        <full_name>insertGuards</full_name>
        <docblock line="60">
          <description>Stops HTMLTidy stripping content that we wish to preserve.</description>
          <long-description>&lt;p&gt;@param string      The raw html.&lt;/p&gt;</long-description>
          <tag line="60" name="return" description="The html with guard tags inserted." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$html</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="76" package="Default">
        <name>stripGuards</name>
        <full_name>stripGuards</full_name>
        <docblock line="69">
          <description>Removes the extra content added during the parse stage
   in order to preserve content we don't want stripped
   out by HTMLTidy.</description>
          <long-description>&lt;p&gt;@param string      The raw html.&lt;/p&gt;</long-description>
          <tag line="69" name="return" description="The html with guard tags removed." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$html</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="86" package="Default">
        <name>insertEmptyTagGuards</name>
        <full_name>insertEmptyTagGuards</full_name>
        <docblock line="80">
          <description>HTML tidy strips out empty tags such as &lt;option&gt; which we
   need to preserve.</description>
          <long-description>&lt;p&gt;This method inserts an additional marker.&lt;/p&gt;</long-description>
          <tag line="80" name="param" description="The raw html. @return string The html with guards inserted." type="string" variable="$html">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$html</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="100" package="Default">
        <name>stripEmptyTagGuards</name>
        <full_name>stripEmptyTagGuards</full_name>
        <docblock line="92">
          <description>HTML tidy strips out empty tags such as &lt;option&gt; which we
   need to preserve.</description>
          <long-description>&lt;p&gt;This method strips additional markers
   inserted by SimpleTest to the tidy output used to make the
   tags non-empty. This ensures their preservation.&lt;/p&gt;</long-description>
          <tag line="92" name="param" description="The raw html. @return string The html with guards removed." type="string" variable="$html">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$html</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="111" package="Default">
        <name>insertTextareaSimpleWhitespaceGuards</name>
        <full_name>insertTextareaSimpleWhitespaceGuards</full_name>
        <docblock line="104">
          <description>By parsing the XML output of tidy, we lose some whitespace
   information in textarea tags.</description>
          <long-description>&lt;p&gt;We temporarily recode this
   data ourselves so as not to lose it.&lt;/p&gt;</long-description>
          <tag line="104" name="param" description="The raw html. @return string The html with guards inserted." type="string" variable="$html">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="111">
          <name>$html</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="122" package="Default">
        <name>insertWhitespaceGuards</name>
        <full_name>insertWhitespaceGuards</full_name>
        <docblock line="117">
          <description>Callback for insertTextareaSimpleWhitespaceGuards().</description>
          <long-description>&lt;p&gt;@param array $matches       Result of preg_replace_callback().&lt;/p&gt;</long-description>
          <tag line="117" name="return" description="Guard tags now replace whitespace." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$matches</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="136" package="Default">
        <name>stripTextareaWhitespaceGuards</name>
        <full_name>stripTextareaWhitespaceGuards</full_name>
        <docblock line="130">
          <description>Removes the whitespace preserving guards we added
   before parsing.</description>
          <long-description>&lt;p&gt;@param string      The raw html.&lt;/p&gt;</long-description>
          <tag line="130" name="return" description="The html with guards removed." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$html</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="146" package="Default">
        <name>walkTree</name>
        <full_name>walkTree</full_name>
        <docblock line="142">
          <description>Visits the given node and all children</description>
          <long-description>&lt;p&gt;@param object $node      Tidy XML node.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="146">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="171" package="Default">
        <name>walkChildren</name>
        <full_name>walkChildren</full_name>
        <docblock line="167">
          <description>Helper method for traversing the XML tree.</description>
          <long-description>&lt;p&gt;@param object $node     Tidy XML node.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="171">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="184" package="Default">
        <name>createEmptyForm</name>
        <full_name>createEmptyForm</full_name>
        <docblock line="179">
          <description>Facade for forms containing preparsed widgets.</description>
          <long-description>&lt;p&gt;@param object $node     Tidy XML node.&lt;/p&gt;</long-description>
          <tag line="179" name="return" description="Facade for SimpleBrowser." type="\SimpleForm">
            <type by_reference="false">\SimpleForm</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="192" package="Default">
        <name>walkForm</name>
        <full_name>walkForm</full_name>
        <docblock line="188">
          <description>Visits the given node and all children</description>
          <long-description>&lt;p&gt;@param object $node      Tidy XML node.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="192">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
        <argument line="192">
          <name>$form</name>
          <default></default>
          <type/>
        </argument>
        <argument line="192">
          <name>$enclosing_label</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="220" package="Default">
        <name>hasFor</name>
        <full_name>hasFor</full_name>
        <docblock line="214">
          <description>Tests a node for a "for" atribute.</description>
          <long-description>&lt;p&gt;Used for
 attaching labels.&lt;/p&gt;</long-description>
          <tag line="214" name="param" description="Tidy XML node. @return boolean True if the &quot;for&quot; attribute exists." type="object" variable="$node">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="220">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="231" package="Default">
        <name>addWidgetToForm</name>
        <full_name>addWidgetToForm</full_name>
        <docblock line="224">
          <description>Adds the widget into the form container.</description>
          <long-description>&lt;p&gt;@param object $node             Tidy XML node of widget.&lt;/p&gt;</long-description>
          <tag line="224" name="param" description="Form to add it to. @param string $enclosing_label The label of any label tag we might be in." type="\SimpleForm" variable="$form">
            <type by_reference="false">\SimpleForm</type>
          </tag>
        </docblock>
        <argument line="231">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
        <argument line="231">
          <name>$form</name>
          <default></default>
          <type/>
        </argument>
        <argument line="231">
          <name>$enclosing_label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="249" package="Default">
        <name>indexWidgetById</name>
        <full_name>indexWidgetById</full_name>
        <docblock line="245">
          <description>Fills the widget cache to speed up searching.</description>
          <long-description>&lt;p&gt;@param SimpleTag $widget    Parsed widget to cache.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="249">
          <name>$widget</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="265" package="Default">
        <name>collectSelectOptions</name>
        <full_name>collectSelectOptions</full_name>
        <docblock line="260">
          <description>Parses the options from inside an XML select node.</description>
          <long-description>&lt;p&gt;@param object $node      Tidy XML node.&lt;/p&gt;</long-description>
          <tag line="260" name="return" description="List of SimpleTag options." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="265">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="285" package="Default">
        <name>attributes</name>
        <full_name>attributes</full_name>
        <docblock line="279">
          <description>Convenience method for collecting all the attributes
 of a tag.</description>
          <long-description>&lt;p&gt;Not sure why Tidy does not have this.&lt;/p&gt;</long-description>
          <tag line="279" name="param" description="Tidy XML node. @return array Hash of attribute strings." type="object" variable="$node">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="285">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="304" package="Default">
        <name>mergeAttribute</name>
        <full_name>mergeAttribute</full_name>
        <docblock line="297">
          <description>Overlay an attribute into the attributes hash.</description>
          <long-description>&lt;p&gt;@param array $attributes        Current attribute list.&lt;/p&gt;</long-description>
          <tag line="297" name="param" description="Raw attribute string with both key and value. @return array New attribute hash." type="string" variable="$raw">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="304">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
        <argument line="304">
          <name>$raw</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="316" package="Default">
        <name>dequote</name>
        <full_name>dequote</full_name>
        <docblock line="311">
          <description>Remove start and end quotes.</description>
          <long-description>&lt;p&gt;@param string $quoted    A quoted string.&lt;/p&gt;</long-description>
          <tag line="311" name="return" description="Quotes are gone." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="316">
          <name>$quoted</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="328" package="Default">
        <name>collectFrames</name>
        <full_name>collectFrames</full_name>
        <docblock line="323">
          <description>Collects frame information inside a frameset tag.</description>
          <long-description>&lt;p&gt;@param object $node     Tidy XML node.&lt;/p&gt;</long-description>
          <tag line="323" name="return" description="List of SimpleTag frame descriptions." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="328">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="346" package="Default">
        <name>innerHtml</name>
        <full_name>innerHtml</full_name>
        <docblock line="341">
          <description>Extracts the XML node text.</description>
          <long-description>&lt;p&gt;@param object $node     Tidy XML node.&lt;/p&gt;</long-description>
          <tag line="341" name="return" description="The text only." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="346">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="360" package="Default">
        <name>tags</name>
        <full_name>tags</full_name>
        <docblock line="356">
          <description>Factory for parsed content holders.</description>
          <long-description>&lt;p&gt;@return SimpleTagBuilder    Factory.&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="370" package="Default">
        <name>attachLabels</name>
        <full_name>attachLabels</full_name>
        <docblock line="364">
          <description>Called at the end of a parse run.</description>
          <long-description>&lt;p&gt;Attaches any
 non-wrapping labels to their form elements.&lt;/p&gt;</long-description>
          <tag line="364" name="param" description="Cached SimpleTag hash. @param array $labels SimpleTag label elements." type="array" variable="$widgets_by_id">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="370">
          <name>$widgets_by_id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="370">
          <name>$labels</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <critical line="9" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="15" code="50018">No DocBlock was found for property $page</error>
      <error line="16" code="50018">No DocBlock was found for property $forms</error>
      <error line="17" code="50018">No DocBlock was found for property $labels</error>
      <error line="18" code="50018">No DocBlock was found for property $widgets_by_id</error>
      <error line="20" code="50010">No DocBlock was found for method __destruct()</error>
      <error line="42" code="50015">Argument $response is missing from the Docblock of parse()</error>
      <error line="60" code="50015">Argument $html is missing from the Docblock of insertGuards()</error>
      <error line="69" code="50015">Argument $html is missing from the Docblock of stripGuards()</error>
      <error line="117" code="50015">Argument $matches is missing from the Docblock of insertWhitespaceGuards()</error>
      <error line="130" code="50015">Argument $html is missing from the Docblock of stripTextareaWhitespaceGuards()</error>
      <error line="142" code="50015">Argument $node is missing from the Docblock of walkTree()</error>
      <error line="167" code="50015">Argument $node is missing from the Docblock of walkChildren()</error>
      <error line="179" code="50015">Argument $node is missing from the Docblock of createEmptyForm()</error>
      <error line="188" code="50015">Argument $node is missing from the Docblock of walkForm()</error>
      <error line="188" code="50015">Argument $form is missing from the Docblock of walkForm()</error>
      <error line="188" code="50015">Argument $enclosing_label is missing from the Docblock of walkForm()</error>
      <error line="224" code="50014">Name of argument $node does not match with the DocBlock's name $form in addWidgetToForm()</error>
      <error line="224" code="50015">Argument $form is missing from the Docblock of addWidgetToForm()</error>
      <error line="224" code="50015">Argument $enclosing_label is missing from the Docblock of addWidgetToForm()</error>
      <error line="245" code="50015">Argument $widget is missing from the Docblock of indexWidgetById()</error>
      <error line="260" code="50015">Argument $node is missing from the Docblock of collectSelectOptions()</error>
      <error line="297" code="50014">Name of argument $attributes does not match with the DocBlock's name $raw in mergeAttribute()</error>
      <error line="297" code="50015">Argument $raw is missing from the Docblock of mergeAttribute()</error>
      <error line="311" code="50015">Argument $quoted is missing from the Docblock of dequote()</error>
      <error line="323" code="50015">Argument $node is missing from the Docblock of collectFrames()</error>
      <error line="341" code="50015">Argument $node is missing from the Docblock of innerHtml()</error>
      <error line="364" code="50015">Argument $labels is missing from the Docblock of attachLabels()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/unit_tester.php" hash="00a1589b57ed78f80115816e61c0a349" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: unit_tester.php 1882 2009-07-01 14:30:05Z lastcraft $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="23" package="SimpleTest&#10;   @subpackage   UnitTester">
      <extends>\SimpleTestCase</extends>
      <name>UnitTestCase</name>
      <full_name>\UnitTestCase</full_name>
      <docblock line="16">
        <description>Standard unit test class for day to day testing
   of PHP code XP style.</description>
        <long-description>&lt;p&gt;Adds some useful standard
   assertions.&lt;/p&gt;</long-description>
        <tag line="16" name="package" description="SimpleTest&#10;   @subpackage   UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="32" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="25">
          <description>Creates an empty test case.</description>
          <long-description>&lt;p&gt;Should be subclassed
   with test methods for a functional test case.&lt;/p&gt;</long-description>
          <tag line="25" name="param" description="Name of test case. Will use the class name if none specified. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$label</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertTrue</name>
        <full_name>assertTrue</full_name>
        <docblock line="39">
          <description>Called from within the test methods to register
   passes and failures.</description>
          <long-description>&lt;p&gt;@param boolean $result    Pass on true.&lt;/p&gt;</long-description>
          <tag line="39" name="param" description="Message to display describing the test state. @return boolean True on pass @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$result</name>
          <default></default>
          <type/>
        </argument>
        <argument line="48">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="62" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertFalse</name>
        <full_name>assertFalse</full_name>
        <docblock line="52">
          <description>Will be true on false and vice versa.</description>
          <long-description>&lt;p&gt;False
   is the PHP definition of false, so that null,
   empty strings, zero and an empty array all count
   as false.&lt;/p&gt;</long-description>
          <tag line="52" name="param" description="Pass on false. @param string $message Message to display. @return boolean True on pass @access public" type="boolean" variable="$result">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$result</name>
          <default></default>
          <type/>
        </argument>
        <argument line="62">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="73" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertNull</name>
        <full_name>assertNull</full_name>
        <docblock line="66">
          <description>Will be true if the value is null.</description>
          <long-description>&lt;p&gt;@param null $value       Supposedly null value.&lt;/p&gt;</long-description>
          <tag line="66" name="param" description="Message to display. @return boolean True on pass @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="73">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="88" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertNotNull</name>
        <full_name>assertNotNull</full_name>
        <docblock line="81">
          <description>Will be true if the value is set.</description>
          <long-description>&lt;p&gt;@param mixed $value           Supposedly set value.&lt;/p&gt;</long-description>
          <tag line="81" name="param" description="Message to display. @return boolean True on pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="88">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="106" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertIsA</name>
        <full_name>assertIsA</full_name>
        <docblock line="96">
          <description>Type and class test.</description>
          <long-description>&lt;p&gt;Will pass if class
   matches the type name or is a subclass or
   if not an object, but the type is correct.&lt;/p&gt;</long-description>
          <tag line="96" name="param" description="Object to test. @param string $type Type name as string. @param string $message Message to display. @return boolean True on pass. @access public" type="mixed" variable="$object">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$object</name>
          <default></default>
          <type/>
        </argument>
        <argument line="106">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="106">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="123" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertNotA</name>
        <full_name>assertNotA</full_name>
        <docblock line="113">
          <description>Type and class mismatch test.</description>
          <long-description>&lt;p&gt;Will pass if class
   name or underling type does not match the one
   specified.&lt;/p&gt;</long-description>
          <tag line="113" name="param" description="Object to test. @param string $type Type name as string. @param string $message Message to display. @return boolean True on pass. @access public" type="mixed" variable="$object">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$object</name>
          <default></default>
          <type/>
        </argument>
        <argument line="123">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="123">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertEqual</name>
        <full_name>assertEqual</full_name>
        <docblock line="130">
          <description>Will trigger a pass if the two parameters have
   the same value only.</description>
          <long-description>&lt;p&gt;Otherwise a fail.&lt;/p&gt;</long-description>
          <tag line="130" name="param" description="Value to compare. @param mixed $second Value to compare. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="139">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="139">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="155" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertNotEqual</name>
        <full_name>assertNotEqual</full_name>
        <docblock line="146">
          <description>Will trigger a pass if the two parameters have
   a different value.</description>
          <long-description>&lt;p&gt;Otherwise a fail.&lt;/p&gt;</long-description>
          <tag line="146" name="param" description="Value to compare. @param mixed $second Value to compare. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="155">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="155">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="155">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="172" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertWithinMargin</name>
        <full_name>assertWithinMargin</full_name>
        <docblock line="162">
          <description>Will trigger a pass if the if the first parameter
   is near enough to the second by the margin.</description>
          <long-description>&lt;p&gt;@param mixed $first          Value to compare.&lt;/p&gt;</long-description>
          <tag line="162" name="param" description="Value to compare. @param mixed $margin Fuzziness of match. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="172">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="172">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="172">
          <name>$margin</name>
          <default></default>
          <type/>
        </argument>
        <argument line="172">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="189" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertOutsideMargin</name>
        <full_name>assertOutsideMargin</full_name>
        <docblock line="179">
          <description>Will trigger a pass if the two parameters differ
   by more than the margin.</description>
          <long-description>&lt;p&gt;@param mixed $first          Value to compare.&lt;/p&gt;</long-description>
          <tag line="179" name="param" description="Value to compare. @param mixed $margin Fuzziness of match. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="189">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="189">
          <name>$margin</name>
          <default></default>
          <type/>
        </argument>
        <argument line="189">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="205" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertIdentical</name>
        <full_name>assertIdentical</full_name>
        <docblock line="196">
          <description>Will trigger a pass if the two parameters have
   the same value and same type.</description>
          <long-description>&lt;p&gt;Otherwise a fail.&lt;/p&gt;</long-description>
          <tag line="196" name="param" description="Value to compare. @param mixed $second Value to compare. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="205">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="205">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="205">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="221" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertNotIdentical</name>
        <full_name>assertNotIdentical</full_name>
        <docblock line="212">
          <description>Will trigger a pass if the two parameters have
   the different value or different type.</description>
          <long-description>&lt;p&gt;@param mixed $first           Value to compare.&lt;/p&gt;</long-description>
          <tag line="212" name="param" description="Value to compare. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$second">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="221">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="221">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="221">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="240" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertReference</name>
        <full_name>assertReference</full_name>
        <docblock line="228">
          <description>Will trigger a pass if both parameters refer
   to the same object or value.</description>
          <long-description>&lt;p&gt;Fail otherwise.
   This will cause problems testing objects under
   E_STRICT.
   TODO: Replace with expectation.&lt;/p&gt;</long-description>
          <tag line="228" name="param" description="Reference to check. @param mixed $second Hopefully the same variable. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="240">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="240">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="240">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="265" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertSame</name>
        <full_name>assertSame</full_name>
        <docblock line="252">
          <description>Will trigger a pass if both parameters refer
   to the same object.</description>
          <long-description>&lt;p&gt;Fail otherwise. This has
   the same semantics at the PHPUnit assertSame.
   That is, if values are passed in it has roughly
   the same affect as assertIdentical.
   TODO: Replace with expectation.&lt;/p&gt;</long-description>
          <tag line="252" name="param" description="Object reference to check. @param mixed $second Hopefully the same object. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="265">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="265">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="265">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="285" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertClone</name>
        <full_name>assertClone</full_name>
        <docblock line="275">
          <description>Will trigger a pass if both parameters refer
   to different objects.</description>
          <long-description>&lt;p&gt;Fail otherwise. The objects
   have to be identical though.&lt;/p&gt;</long-description>
          <tag line="275" name="param" description="Object reference to check. @param mixed $second Hopefully not the same object. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="285">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="285">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="285">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="310" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertCopy</name>
        <full_name>assertCopy</full_name>
        <docblock line="298">
          <description>Will trigger a pass if both parameters refer
   to different variables.</description>
          <long-description>&lt;p&gt;Fail otherwise. The objects
   have to be identical references though.
   This will fail under E_STRICT with objects. Use
   assertClone() for this.&lt;/p&gt;</long-description>
          <tag line="298" name="param" description="Object reference to check. @param mixed $second Hopefully not the same object. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="310">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="310">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="310">
          <name>$message</name>
          <default>"%s"</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="332" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertPattern</name>
        <full_name>assertPattern</full_name>
        <docblock line="322">
          <description>Will trigger a pass if the Perl regex pattern
   is found in the subject.</description>
          <long-description>&lt;p&gt;Fail otherwise.&lt;/p&gt;</long-description>
          <tag line="322" name="param" description="Perl regex to look for including the regex delimiters. @param string $subject String to search in. @param string $message Message to display. @return boolean True on pass @access public" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="332">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="332">
          <name>$subject</name>
          <default></default>
          <type/>
        </argument>
        <argument line="332">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="349" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>assertNoPattern</name>
        <full_name>assertNoPattern</full_name>
        <docblock line="339">
          <description>Will trigger a pass if the perl regex pattern
   is not present in subject.</description>
          <long-description>&lt;p&gt;Fail if found.&lt;/p&gt;</long-description>
          <tag line="339" name="param" description="Perl regex to look for including the regex delimiters. @param string $subject String to search in. @param string $message Message to display. @return boolean True on pass @access public" type="string" variable="$pattern">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="349">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="349">
          <name>$subject</name>
          <default></default>
          <type/>
        </argument>
        <argument line="349">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="364" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>expectError</name>
        <full_name>expectError</full_name>
        <docblock line="356">
          <description>Prepares for an error.</description>
          <long-description>&lt;p&gt;If the error mismatches it
   passes through, otherwise it is swallowed. Any
   left over errors trigger failures.&lt;/p&gt;</long-description>
          <tag line="356" name="param" description="The error to match. @param string $message Message on failure. @access public" type="\SimpleExpectation/string" variable="$expected">
            <type by_reference="false">\SimpleExpectation/string</type>
          </tag>
        </docblock>
        <argument line="364">
          <name>$expected</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="364">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="377" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>expectException</name>
        <full_name>expectException</full_name>
        <docblock line="369">
          <description>Prepares for an exception.</description>
          <long-description>&lt;p&gt;If the error mismatches it
   passes through, otherwise it is swallowed. Any
   left over errors trigger failures.&lt;/p&gt;</long-description>
          <tag line="369" name="param" description="The error to match. @param string $message Message on failure. @access public" type="\SimpleExpectation/Exception" variable="$expected">
            <type by_reference="false">\SimpleExpectation/Exception</type>
          </tag>
        </docblock>
        <argument line="377">
          <name>$expected</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="377">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="390" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>ignoreException</name>
        <full_name>ignoreException</full_name>
        <docblock line="383">
          <description>Tells SimpleTest to ignore an upcoming exception as not relevant
   to the current test.</description>
          <long-description>&lt;p&gt;It doesn't affect the test, whether thrown or
   not.&lt;/p&gt;</long-description>
          <tag line="383" name="param" description="The error to ignore. @access public" type="\SimpleExpectation/Exception" variable="$ignored">
            <type by_reference="false">\SimpleExpectation/Exception</type>
          </tag>
        </docblock>
        <argument line="390">
          <name>$ignored</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="402" package="SimpleTest&#10;   @subpackage   UnitTester">
        <name>coerceExpectation</name>
        <full_name>coerceExpectation</full_name>
        <docblock line="394">
          <description>Creates an equality expectation if the
   object/value is not already some type
   of expectation.</description>
          <long-description>&lt;p&gt;@param mixed $expected      Expected value.&lt;/p&gt;</long-description>
          <tag line="394" name="return" description="Expectation object.&#10;   @access private" type="\SimpleExpectation">
            <type by_reference="false">\SimpleExpectation</type>
          </tag>
        </docblock>
        <argument line="402">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/unit_tester.php</error>
      <error line="39" code="50014">Name of argument $result does not match with the DocBlock's name $message in assertTrue()</error>
      <error line="39" code="50015">Argument $message is missing from the Docblock of assertTrue()</error>
      <error line="52" code="50015">Argument $message is missing from the Docblock of assertFalse()</error>
      <error line="66" code="50014">Name of argument $value does not match with the DocBlock's name $message in assertNull()</error>
      <error line="66" code="50015">Argument $message is missing from the Docblock of assertNull()</error>
      <error line="81" code="50014">Name of argument $value does not match with the DocBlock's name $message in assertNotNull()</error>
      <error line="81" code="50015">Argument $message is missing from the Docblock of assertNotNull()</error>
      <error line="96" code="50015">Argument $type is missing from the Docblock of assertIsA()</error>
      <error line="96" code="50015">Argument $message is missing from the Docblock of assertIsA()</error>
      <error line="113" code="50015">Argument $type is missing from the Docblock of assertNotA()</error>
      <error line="113" code="50015">Argument $message is missing from the Docblock of assertNotA()</error>
      <error line="130" code="50015">Argument $second is missing from the Docblock of assertEqual()</error>
      <error line="130" code="50015">Argument $message is missing from the Docblock of assertEqual()</error>
      <error line="146" code="50015">Argument $second is missing from the Docblock of assertNotEqual()</error>
      <error line="146" code="50015">Argument $message is missing from the Docblock of assertNotEqual()</error>
      <error line="162" code="50014">Name of argument $first does not match with the DocBlock's name $second in assertWithinMargin()</error>
      <error line="162" code="50015">Argument $second is missing from the Docblock of assertWithinMargin()</error>
      <error line="162" code="50015">Argument $margin is missing from the Docblock of assertWithinMargin()</error>
      <error line="162" code="50015">Argument $message is missing from the Docblock of assertWithinMargin()</error>
      <error line="179" code="50014">Name of argument $first does not match with the DocBlock's name $second in assertOutsideMargin()</error>
      <error line="179" code="50015">Argument $second is missing from the Docblock of assertOutsideMargin()</error>
      <error line="179" code="50015">Argument $margin is missing from the Docblock of assertOutsideMargin()</error>
      <error line="179" code="50015">Argument $message is missing from the Docblock of assertOutsideMargin()</error>
      <error line="196" code="50015">Argument $second is missing from the Docblock of assertIdentical()</error>
      <error line="196" code="50015">Argument $message is missing from the Docblock of assertIdentical()</error>
      <error line="212" code="50014">Name of argument $first does not match with the DocBlock's name $second in assertNotIdentical()</error>
      <error line="212" code="50015">Argument $second is missing from the Docblock of assertNotIdentical()</error>
      <error line="212" code="50015">Argument $message is missing from the Docblock of assertNotIdentical()</error>
      <error line="228" code="50015">Argument $second is missing from the Docblock of assertReference()</error>
      <error line="228" code="50015">Argument $message is missing from the Docblock of assertReference()</error>
      <error line="252" code="50015">Argument $second is missing from the Docblock of assertSame()</error>
      <error line="252" code="50015">Argument $message is missing from the Docblock of assertSame()</error>
      <error line="275" code="50015">Argument $second is missing from the Docblock of assertClone()</error>
      <error line="275" code="50015">Argument $message is missing from the Docblock of assertClone()</error>
      <error line="298" code="50015">Argument $second is missing from the Docblock of assertCopy()</error>
      <error line="298" code="50015">Argument $message is missing from the Docblock of assertCopy()</error>
      <error line="322" code="50015">Argument $subject is missing from the Docblock of assertPattern()</error>
      <error line="322" code="50015">Argument $message is missing from the Docblock of assertPattern()</error>
      <error line="339" code="50015">Argument $subject is missing from the Docblock of assertNoPattern()</error>
      <error line="339" code="50015">Argument $message is missing from the Docblock of assertNoPattern()</error>
      <error line="356" code="50015">Argument $message is missing from the Docblock of expectError()</error>
      <error line="369" code="50015">Argument $message is missing from the Docblock of expectException()</error>
      <error line="394" code="50015">Argument $expected is missing from the Docblock of coerceExpectation()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/url.php" hash="8d11e2ce68992933b7e082498020061e" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: url.php 2011 2011-04-29 08:22:48Z pp11 $"/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="25" package="SimpleTest&#10;   @subpackage WebTester">
      <extends/>
      <name>SimpleUrl</name>
      <full_name>\SimpleUrl</full_name>
      <docblock line="15">
        <description>URL parser to replace parse_url() PHP function which
   got broken in PHP 4.3.0.</description>
        <long-description>&lt;p&gt;Adds some browser specific
   functionality such as expandomatics.
   Guesses a bit trying to separate the host from
   the path and tries to keep a raw, possibly unparsable,
   request string as long as possible.&lt;/p&gt;</long-description>
        <tag line="15" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="26" namespace="global" package="Default">
        <name>$scheme</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="27" namespace="global" package="Default">
        <name>$username</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="28" namespace="global" package="Default">
        <name>$password</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="29" namespace="global" package="Default">
        <name>$host</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="30" namespace="global" package="Default">
        <name>$port</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="31" namespace="global" package="Default">
        <name>$path</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="32" namespace="global" package="Default">
        <name>$request</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="33" namespace="global" package="Default">
        <name>$fragment</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="34" namespace="global" package="Default">
        <name>$x</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="35" namespace="global" package="Default">
        <name>$y</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="36" namespace="global" package="Default">
        <name>$target</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="37" namespace="global" package="Default">
        <name>$raw</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="39">
          <description>Constructor.</description>
          <long-description>&lt;p&gt;Parses URL into sections.&lt;/p&gt;</long-description>
          <tag line="39" name="param" description="Incoming URL. @access public" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$url</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="82" package="SimpleTest&#10;   @subpackage WebTester">
        <name>chompCoordinates</name>
        <full_name>chompCoordinates</full_name>
        <docblock line="75">
          <description>Extracts the X, Y coordinate pair from an image map.</description>
          <long-description>&lt;p&gt;@param string $url   URL so far. The coordinates will be
                        removed.&lt;/p&gt;</long-description>
          <tag line="75" name="return" description="X, Y as a pair of integers.&#10;   @access private" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="97" package="SimpleTest&#10;   @subpackage WebTester">
        <name>chompScheme</name>
        <full_name>chompScheme</full_name>
        <docblock line="90">
          <description>Extracts the scheme part of an incoming URL.</description>
          <long-description>&lt;p&gt;@param string $url   URL so far. The scheme will be
                        removed.&lt;/p&gt;</long-description>
          <tag line="90" name="return" description="Scheme part or false.&#10;   @access private" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="115" package="SimpleTest&#10;   @subpackage WebTester">
        <name>chompLogin</name>
        <full_name>chompLogin</full_name>
        <docblock line="105">
          <description>Extracts the username and password from the
   incoming URL.</description>
          <long-description>&lt;p&gt;The // prefix will be reattached
   to the URL after the doublet is extracted.&lt;/p&gt;</long-description>
          <tag line="105" name="param" description="URL so far. The username and password are removed. @return array Two item list of username and password. Will urldecode() them. @access private" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="143" package="SimpleTest&#10;   @subpackage WebTester">
        <name>chompHost</name>
        <full_name>chompHost</full_name>
        <docblock line="132">
          <description>Extracts the host part of an incoming URL.</description>
          <long-description>&lt;p&gt;Includes the port number part. Will extract
   the host if it starts with // or it has
   a top level domain or it has at least two
   dots.&lt;/p&gt;</long-description>
          <tag line="132" name="param" description="URL so far. The host will be removed. @return string Host part guess or false. @access private" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="169" package="SimpleTest&#10;   @subpackage WebTester">
        <name>chompPath</name>
        <full_name>chompPath</full_name>
        <docblock line="161">
          <description>Extracts the path information from the incoming
   URL.</description>
          <long-description>&lt;p&gt;Strips this path from the URL.&lt;/p&gt;</long-description>
          <tag line="161" name="param" description="URL so far. The host will be removed. @return string Path part or '/'. @access private" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="184" package="SimpleTest&#10;   @subpackage WebTester">
        <name>chompRequest</name>
        <full_name>chompRequest</full_name>
        <docblock line="177">
          <description>Strips off the request data.</description>
          <long-description>&lt;p&gt;@param string $url  URL so far. The request will be
                       removed.&lt;/p&gt;</long-description>
          <tag line="177" name="return" description="Raw request part.&#10;   @access private" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="198" package="SimpleTest&#10;   @subpackage WebTester">
        <name>parseRequest</name>
        <full_name>parseRequest</full_name>
        <docblock line="192">
          <description>Breaks the request down into an object.</description>
          <long-description>&lt;p&gt;@param string $raw           Raw request.&lt;/p&gt;</long-description>
          <tag line="192" name="return" description="Parsed data.&#10;   @access private" type="\SimpleFormEncoding">
            <type by_reference="false">\SimpleFormEncoding</type>
          </tag>
        </docblock>
        <argument line="198">
          <name>$raw</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="217" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getScheme</name>
        <full_name>getScheme</full_name>
        <docblock line="211">
          <description>Accessor for protocol part.</description>
          <long-description>&lt;p&gt;@param string $default    Value to use if not present.&lt;/p&gt;</long-description>
          <tag line="211" name="return" description="Scheme name, e.g &quot;http&quot;.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="217">
          <name>$default</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="226" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getUsername</name>
        <full_name>getUsername</full_name>
        <docblock line="221">
          <description>Accessor for user name.</description>
          <long-description>&lt;p&gt;@return string    Username preceding host.&lt;/p&gt;</long-description>
          <tag line="221" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="235" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getPassword</name>
        <full_name>getPassword</full_name>
        <docblock line="230">
          <description>Accessor for password.</description>
          <long-description>&lt;p&gt;@return string    Password preceding host.&lt;/p&gt;</long-description>
          <tag line="230" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="245" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getHost</name>
        <full_name>getHost</full_name>
        <docblock line="239">
          <description>Accessor for hostname and port.</description>
          <long-description>&lt;p&gt;@param string $default    Value to use if not present.&lt;/p&gt;</long-description>
          <tag line="239" name="return" description="Hostname only.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="245">
          <name>$default</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="254" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getTld</name>
        <full_name>getTld</full_name>
        <docblock line="249">
          <description>Accessor for top level domain.</description>
          <long-description>&lt;p&gt;@return string       Last part of host.&lt;/p&gt;</long-description>
          <tag line="249" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="264" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getPort</name>
        <full_name>getPort</full_name>
        <docblock line="259">
          <description>Accessor for port number.</description>
          <long-description>&lt;p&gt;@return integer    TCP/IP port number.&lt;/p&gt;</long-description>
          <tag line="259" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="273" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getPath</name>
        <full_name>getPath</full_name>
        <docblock line="268">
          <description>Accessor for path.</description>
          <long-description>&lt;p&gt;@return string    Full path including leading slash if implied.&lt;/p&gt;</long-description>
          <tag line="268" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="286" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getPage</name>
        <full_name>getPage</full_name>
        <docblock line="280">
          <description>Accessor for page if any.</description>
          <long-description>&lt;p&gt;This may be a
   directory name if ambiguious.&lt;/p&gt;</long-description>
          <tag line="280" name="return" description="name.&#10;   @access public" type="\Page">
            <type by_reference="false">\Page</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="298" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getBasePath</name>
        <full_name>getBasePath</full_name>
        <docblock line="293">
          <description>Gets the path to the page.</description>
          <long-description>&lt;p&gt;@return string       Path less the page.&lt;/p&gt;</long-description>
          <tag line="293" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="310" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getFragment</name>
        <full_name>getFragment</full_name>
        <docblock line="305">
          <description>Accessor for fragment at end of URL after the "#".</description>
          <long-description>&lt;p&gt;@return string    Part after "#".&lt;/p&gt;</long-description>
          <tag line="305" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="321" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setCoordinates</name>
        <full_name>setCoordinates</full_name>
        <docblock line="314">
          <description>Sets image coordinates.</description>
          <long-description>&lt;p&gt;Set to false to clear
   them.&lt;/p&gt;</long-description>
          <tag line="314" name="param" description="Horizontal position. @param integer $y Vertical position. @access public" type="integer" variable="$x">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="321">
          <name>$x</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="321">
          <name>$y</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="335" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getX</name>
        <full_name>getX</full_name>
        <docblock line="330">
          <description>Accessor for horizontal image coordinate.</description>
          <long-description>&lt;p&gt;@return integer        X value.&lt;/p&gt;</long-description>
          <tag line="330" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="344" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getY</name>
        <full_name>getY</full_name>
        <docblock line="339">
          <description>Accessor for vertical image coordinate.</description>
          <long-description>&lt;p&gt;@return integer        Y value.&lt;/p&gt;</long-description>
          <tag line="339" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="356" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getEncodedRequest</name>
        <full_name>getEncodedRequest</full_name>
        <docblock line="348">
          <description>Accessor for current request parameters
   in URL string form.</description>
          <long-description>&lt;p&gt;Will return teh original request
   if at all possible even if it doesn't make much
   sense.&lt;/p&gt;</long-description>
          <tag line="348" name="return" description="Form is string &quot;?a=1&amp;b=2&quot;, etc.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="374" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addRequestParameter</name>
        <full_name>addRequestParameter</full_name>
        <docblock line="368">
          <description>Adds an additional parameter to the request.</description>
          <long-description>&lt;p&gt;@param string $key            Name of parameter.&lt;/p&gt;</long-description>
          <tag line="368" name="param" description="Value as string. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="374">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
        <argument line="374">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="385" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addRequestParameters</name>
        <full_name>addRequestParameters</full_name>
        <docblock line="379">
          <description>Adds additional parameters to the request.</description>
          <long-description>&lt;p&gt;@param hash/SimpleFormEncoding $parameters   Additional
                                               parameters.&lt;/p&gt;</long-description>
          <tag line="379" name="access" description="public"/>
        </docblock>
        <argument line="385">
          <name>$parameters</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="394" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clearRequest</name>
        <full_name>clearRequest</full_name>
        <docblock line="390">
          <description>Clears down all parameters.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="406" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getTarget</name>
        <full_name>getTarget</full_name>
        <docblock line="399">
          <description>Gets the frame target if present.</description>
          <long-description>&lt;p&gt;Although
   not strictly part of the URL specification it
   acts as similarily to the browser.&lt;/p&gt;</long-description>
          <tag line="399" name="return" description="Frame name or false if none.&#10;   @access public" type="\boolean/string">
            <type by_reference="false">\boolean/string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="415" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setTarget</name>
        <full_name>setTarget</full_name>
        <docblock line="410">
          <description>Attaches a frame target.</description>
          <long-description>&lt;p&gt;@param string $frame        Name of frame.&lt;/p&gt;</long-description>
          <tag line="410" name="access" description="public"/>
        </docblock>
        <argument line="415">
          <name>$frame</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="425" package="SimpleTest&#10;   @subpackage WebTester">
        <name>asString</name>
        <full_name>asString</full_name>
        <docblock line="420">
          <description>Renders the URL back into a string.</description>
          <long-description>&lt;p&gt;@return string        URL in canonical form.&lt;/p&gt;</long-description>
          <tag line="420" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="461" package="SimpleTest&#10;   @subpackage WebTester">
        <name>makeAbsolute</name>
        <full_name>makeAbsolute</full_name>
        <docblock line="454">
          <description>Replaces unknown sections to turn a relative
   URL into an absolute one.</description>
          <long-description>&lt;p&gt;The base URL can
   be either a string or a SimpleUrl object.&lt;/p&gt;</long-description>
          <tag line="454" name="param" description="Base URL. @access public" type="\string/SimpleUrl" variable="$base">
            <type by_reference="false">\string/SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="461">
          <name>$base</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="493" package="SimpleTest&#10;   @subpackage WebTester">
        <name>extractAbsolutePath</name>
        <full_name>extractAbsolutePath</full_name>
        <docblock line="486">
          <description>Replaces unknown sections of the path with base parts
   to return a complete absolute one.</description>
          <long-description>&lt;p&gt;@param string/SimpleUrl $base       Base URL.&lt;/p&gt;</long-description>
          <tag line="486" name="param" description="Absolute path. @access private" type="string" variable="$base">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="493">
          <name>$base</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="512" package="SimpleTest&#10;   @subpackage WebTester">
        <name>isRelativePath</name>
        <full_name>isRelativePath</full_name>
        <docblock line="506">
          <description>Simple test to see if a path part is relative.</description>
          <long-description>&lt;p&gt;@param string $path        Path to test.&lt;/p&gt;</long-description>
          <tag line="506" name="return" description="True if starts with a &quot;/&quot;.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="512">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="522" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getIdentity</name>
        <full_name>getIdentity</full_name>
        <docblock line="516">
          <description>Extracts the username and password for use in rendering
   a URL.</description>
          <long-description>&lt;p&gt;@return string/boolean    Form of username:password or false.&lt;/p&gt;</long-description>
          <tag line="516" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="535" package="SimpleTest&#10;   @subpackage WebTester">
        <name>normalisePath</name>
        <full_name>normalisePath</full_name>
        <docblock line="529">
          <description>Replaces .</description>
          <long-description>&lt;p&gt;and .. sections of the path.&lt;/p&gt;</long-description>
          <tag line="529" name="param" description="Unoptimised path. @return string Path with dots removed if possible. @access public" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="535">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="546" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getAllTopLevelDomains</name>
        <full_name>getAllTopLevelDomains</full_name>
        <docblock line="540">
          <description>A pipe seperated list of all TLDs that result in two part
   domain names.</description>
          <long-description>&lt;p&gt;@return string        Pipe separated list.&lt;/p&gt;</long-description>
          <tag line="540" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/url.php</error>
      <error line="26" code="50018">No DocBlock was found for property $scheme</error>
      <error line="27" code="50018">No DocBlock was found for property $username</error>
      <error line="28" code="50018">No DocBlock was found for property $password</error>
      <error line="29" code="50018">No DocBlock was found for property $host</error>
      <error line="30" code="50018">No DocBlock was found for property $port</error>
      <error line="31" code="50018">No DocBlock was found for property $path</error>
      <error line="32" code="50018">No DocBlock was found for property $request</error>
      <error line="33" code="50018">No DocBlock was found for property $fragment</error>
      <error line="34" code="50018">No DocBlock was found for property $x</error>
      <error line="35" code="50018">No DocBlock was found for property $y</error>
      <error line="36" code="50018">No DocBlock was found for property $target</error>
      <error line="37" code="50018">No DocBlock was found for property $raw</error>
      <error line="75" code="50015">Argument $url is missing from the Docblock of chompCoordinates()</error>
      <error line="90" code="50015">Argument $url is missing from the Docblock of chompScheme()</error>
      <error line="177" code="50015">Argument $url is missing from the Docblock of chompRequest()</error>
      <error line="192" code="50015">Argument $raw is missing from the Docblock of parseRequest()</error>
      <error line="211" code="50015">Argument $default is missing from the Docblock of getScheme()</error>
      <error line="239" code="50015">Argument $default is missing from the Docblock of getHost()</error>
      <error line="314" code="50015">Argument $y is missing from the Docblock of setCoordinates()</error>
      <error line="368" code="50014">Name of argument $key does not match with the DocBlock's name $value in addRequestParameter()</error>
      <error line="368" code="50015">Argument $value is missing from the Docblock of addRequestParameter()</error>
      <error line="379" code="50015">Argument $parameters is missing from the Docblock of addRequestParameters()</error>
      <error line="410" code="50015">Argument $frame is missing from the Docblock of setTarget()</error>
      <error line="506" code="50015">Argument $path is missing from the Docblock of isRelativePath()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/user_agent.php" hash="272affae707a3104609ddb8215a052c9" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: user_agent.php 2039 2011-11-30 18:16:15Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <constant namespace="global" line="19" package="Default">
      <name>DEFAULT_MAX_REDIRECTS</name>
      <full_name>\DEFAULT_MAX_REDIRECTS</full_name>
      <value>3</value>
    </constant>
    <constant namespace="global" line="22" package="Default">
      <name>DEFAULT_CONNECTION_TIMEOUT</name>
      <full_name>\DEFAULT_CONNECTION_TIMEOUT</full_name>
      <value>15</value>
    </constant>
    <class final="false" abstract="false" namespace="global" line="31" package="Default">
      <extends/>
      <name>SimpleUserAgent</name>
      <full_name>\SimpleUserAgent</full_name>
      <docblock line="25">
        <description>Fetches web pages whilst keeping track of
   cookies and authentication.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="25" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="32" namespace="global" package="Default">
        <name>$cookie_jar</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="33" namespace="global" package="Default">
        <name>$cookies_enabled</name>
        <default>true</default>
      </property>
      <property final="false" static="false" visibility="private" line="34" namespace="global" package="Default">
        <name>$authenticator</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="35" namespace="global" package="Default">
        <name>$max_redirects</name>
        <default>DEFAULT_MAX_REDIRECTS</default>
      </property>
      <property final="false" static="false" visibility="private" line="36" namespace="global" package="Default">
        <name>$proxy</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="37" namespace="global" package="Default">
        <name>$proxy_username</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="38" namespace="global" package="Default">
        <name>$proxy_password</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="private" line="39" namespace="global" package="Default">
        <name>$connection_timeout</name>
        <default>DEFAULT_CONNECTION_TIMEOUT</default>
      </property>
      <property final="false" static="false" visibility="private" line="40" namespace="global" package="Default">
        <name>$additional_headers</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="46" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="42">
          <description>Starts with no cookies, realms or proxies.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="60" package="Default">
        <name>restart</name>
        <full_name>restart</full_name>
        <docblock line="51">
          <description>Removes expired and temporary cookies as if
   the browser was closed and re-opened.</description>
          <long-description>&lt;p&gt;Authorisation
   has to be obtained again as well.&lt;/p&gt;</long-description>
          <tag line="51" name="param" description="Time when session restarted. If omitted then all persistent cookies are kept. @access public" type="\string/integer" variable="$date">
            <type by_reference="false">\string/integer</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$date</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="71" package="Default">
        <name>addHeader</name>
        <full_name>addHeader</full_name>
        <docblock line="65">
          <description>Adds a header to every fetch.</description>
          <long-description>&lt;p&gt;@param string $header       Header line to add to every
                               request until cleared.&lt;/p&gt;</long-description>
          <tag line="65" name="access" description="public"/>
        </docblock>
        <argument line="71">
          <name>$header</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="Default">
        <name>ageCookies</name>
        <full_name>ageCookies</full_name>
        <docblock line="75">
          <description>Ages the cookies by the specified time.</description>
          <long-description>&lt;p&gt;@param integer $interval    Amount in seconds.&lt;/p&gt;</long-description>
          <tag line="75" name="access" description="public"/>
        </docblock>
        <argument line="80">
          <name>$interval</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="94" package="Default">
        <name>setCookie</name>
        <full_name>setCookie</full_name>
        <docblock line="84">
          <description>Sets an additional cookie.</description>
          <long-description>&lt;p&gt;If a cookie has
   the same name and path it is replaced.&lt;/p&gt;</long-description>
          <tag line="84" name="param" description="Cookie key. @param string $value Value of cookie. @param string $host Host upon which the cookie is valid. @param string $path Cookie path if not host wide. @param string $expiry Expiry date. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="94">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="94">
          <name>$host</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="94">
          <name>$path</name>
          <default>'/'</default>
          <type/>
        </argument>
        <argument line="94">
          <name>$expiry</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="108" package="Default">
        <name>getCookieValue</name>
        <full_name>getCookieValue</full_name>
        <docblock line="98">
          <description>Reads the most specific cookie value from the
   browser cookies.</description>
          <long-description>&lt;p&gt;@param string $host        Host to search.&lt;/p&gt;</long-description>
          <tag line="98" name="param" description="Applicable path. @param string $name Name of cookie to read. @return string False if not present, else the value as a string. @access public" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="108">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="108">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="120" package="Default">
        <name>getBaseCookieValue</name>
        <full_name>getBaseCookieValue</full_name>
        <docblock line="112">
          <description>Reads the current cookies within the base URL.</description>
          <long-description>&lt;p&gt;@param string $name     Key of cookie to find.&lt;/p&gt;</long-description>
          <tag line="112" name="param" description="Base URL to search from. @return string/boolean Null if there is no base URL, false if the cookie is not set. @access public" type="\SimpleUrl" variable="$base">
            <type by_reference="false">\SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="120">
          <name>$base</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="131" package="Default">
        <name>ignoreCookies</name>
        <full_name>ignoreCookies</full_name>
        <docblock line="127">
          <description>Switches off cookie sending and recieving.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="Default">
        <name>useCookies</name>
        <full_name>useCookies</full_name>
        <docblock line="135">
          <description>Switches back on the cookie sending and recieving.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="148" package="Default">
        <name>setConnectionTimeout</name>
        <full_name>setConnectionTimeout</full_name>
        <docblock line="143">
          <description>Sets the socket timeout for opening a connection.</description>
          <long-description>&lt;p&gt;@param integer $timeout      Maximum time in seconds.&lt;/p&gt;</long-description>
          <tag line="143" name="access" description="public"/>
        </docblock>
        <argument line="148">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="158" package="Default">
        <name>setMaximumRedirects</name>
        <full_name>setMaximumRedirects</full_name>
        <docblock line="152">
          <description>Sets the maximum number of redirects before
   a page will be loaded anyway.</description>
          <long-description>&lt;p&gt;@param integer $max        Most hops allowed.&lt;/p&gt;</long-description>
          <tag line="152" name="access" description="public"/>
        </docblock>
        <argument line="158">
          <name>$max</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="171" package="Default">
        <name>useProxy</name>
        <full_name>useProxy</full_name>
        <docblock line="162">
          <description>Sets proxy to use on all requests for when
   testing from behind a firewall.</description>
          <long-description>&lt;p&gt;Set URL
   to false to disable.&lt;/p&gt;</long-description>
          <tag line="162" name="param" description="Proxy URL. @param string $username Proxy username for authentication. @param string $password Proxy password for authentication. @access public" type="string" variable="$proxy">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="171">
          <name>$proxy</name>
          <default></default>
          <type/>
        </argument>
        <argument line="171">
          <name>$username</name>
          <default></default>
          <type/>
        </argument>
        <argument line="171">
          <name>$password</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="190" package="Default">
        <name>isTooManyRedirects</name>
        <full_name>isTooManyRedirects</full_name>
        <docblock line="184">
          <description>Test to see if the redirect limit is passed.</description>
          <long-description>&lt;p&gt;@param integer $redirects        Count so far.&lt;/p&gt;</long-description>
          <tag line="184" name="return" description="True if over.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$redirects</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="202" package="Default">
        <name>setIdentity</name>
        <full_name>setIdentity</full_name>
        <docblock line="194">
          <description>Sets the identity for the current realm.</description>
          <long-description>&lt;p&gt;@param string $host        Host to which realm applies.&lt;/p&gt;</long-description>
          <tag line="194" name="param" description="Full name of realm. @param string $username Username for realm. @param string $password Password for realm. @access public" type="string" variable="$realm">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$host</name>
          <default></default>
          <type/>
        </argument>
        <argument line="202">
          <name>$realm</name>
          <default></default>
          <type/>
        </argument>
        <argument line="202">
          <name>$username</name>
          <default></default>
          <type/>
        </argument>
        <argument line="202">
          <name>$password</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="214" package="Default">
        <name>fetchResponse</name>
        <full_name>fetchResponse</full_name>
        <docblock line="206">
          <description>Fetches a URL as a response object.</description>
          <long-description>&lt;p&gt;Will keep trying if redirected.
   It will also collect authentication realm information.&lt;/p&gt;</long-description>
          <tag line="206" name="param" description="Target to fetch. @param SimpleEncoding $encoding Additional parameters for request. @return SimpleHttpResponse Hopefully the target page. @access public" type="\string/SimpleUrl" variable="$url">
            <type by_reference="false">\string/SimpleUrl</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="214">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="239" package="Default">
        <name>fetchWhileRedirected</name>
        <full_name>fetchWhileRedirected</full_name>
        <docblock line="231">
          <description>Fetches the page until no longer redirected or
   until the redirect limit runs out.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url                  Target to fetch.&lt;/p&gt;</long-description>
          <tag line="231" name="param" description="Additional parameters for request. @return SimpleHttpResponse Hopefully the target page. @access private" type="\SimpelFormEncoding" variable="$encoding">
            <type by_reference="false">\SimpelFormEncoding</type>
          </tag>
        </docblock>
        <argument line="239">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="239">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="267" package="Default">
        <name>fetch</name>
        <full_name>fetch</full_name>
        <docblock line="260">
          <description>Actually make the web request.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url                   Target to fetch.&lt;/p&gt;</long-description>
          <tag line="260" name="param" description="Additional parameters for request. @return SimpleHttpResponse Headers and hopefully content. @access protected" type="\SimpleFormEncoding" variable="$encoding">
            <type by_reference="false">\SimpleFormEncoding</type>
          </tag>
        </docblock>
        <argument line="267">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="267">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="279" package="Default">
        <name>createRequest</name>
        <full_name>createRequest</full_name>
        <docblock line="272">
          <description>Creates a full page request.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url                 Target to fetch as url object.&lt;/p&gt;</long-description>
          <tag line="272" name="param" description="POST/GET parameters. @return SimpleHttpRequest New request. @access private" type="\SimpleFormEncoding" variable="$encoding">
            <type by_reference="false">\SimpleFormEncoding</type>
          </tag>
        </docblock>
        <argument line="279">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="279">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="296" package="Default">
        <name>createHttpRequest</name>
        <full_name>createHttpRequest</full_name>
        <docblock line="289">
          <description>Builds the appropriate HTTP request object.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url                  Target to fetch as url object.&lt;/p&gt;</long-description>
          <tag line="289" name="param" description="POST/GET parameters. @return SimpleHttpRequest New request object. @access protected" type="\SimpleFormEncoding" variable="$parameters">
            <type by_reference="false">\SimpleFormEncoding</type>
          </tag>
        </docblock>
        <argument line="296">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="296">
          <name>$encoding</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="306" package="Default">
        <name>createRoute</name>
        <full_name>createRoute</full_name>
        <docblock line="300">
          <description>Sets up either a direct route or via a proxy.</description>
          <long-description>&lt;p&gt;@param SimpleUrl $url   Target to fetch as url object.&lt;/p&gt;</long-description>
          <tag line="300" name="return" description="Route to take to fetch URL.&#10;   @access protected" type="\SimpleRoute">
            <type by_reference="false">\SimpleRoute</type>
          </tag>
        </docblock>
        <argument line="306">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="322" package="Default">
        <name>addAdditionalHeaders</name>
        <full_name>addAdditionalHeaders</full_name>
        <docblock line="317">
          <description>Adds additional manual headers.</description>
          <long-description>&lt;p&gt;@param SimpleHttpRequest $request    Outgoing request.&lt;/p&gt;</long-description>
          <tag line="317" name="access" description="private"/>
        </docblock>
        <argument line="322">
          <name>$request</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/user_agent.php</error>
      <critical line="25" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="32" code="50018">No DocBlock was found for property $cookie_jar</error>
      <error line="33" code="50018">No DocBlock was found for property $cookies_enabled</error>
      <error line="34" code="50018">No DocBlock was found for property $authenticator</error>
      <error line="35" code="50018">No DocBlock was found for property $max_redirects</error>
      <error line="36" code="50018">No DocBlock was found for property $proxy</error>
      <error line="37" code="50018">No DocBlock was found for property $proxy_username</error>
      <error line="38" code="50018">No DocBlock was found for property $proxy_password</error>
      <error line="39" code="50018">No DocBlock was found for property $connection_timeout</error>
      <error line="40" code="50018">No DocBlock was found for property $additional_headers</error>
      <error line="65" code="50015">Argument $header is missing from the Docblock of addHeader()</error>
      <error line="75" code="50015">Argument $interval is missing from the Docblock of ageCookies()</error>
      <error line="84" code="50015">Argument $value is missing from the Docblock of setCookie()</error>
      <error line="84" code="50015">Argument $host is missing from the Docblock of setCookie()</error>
      <error line="84" code="50015">Argument $path is missing from the Docblock of setCookie()</error>
      <error line="84" code="50015">Argument $expiry is missing from the Docblock of setCookie()</error>
      <error line="98" code="50014">Name of argument $host does not match with the DocBlock's name $path in getCookieValue()</error>
      <error line="98" code="50015">Argument $path is missing from the Docblock of getCookieValue()</error>
      <error line="98" code="50015">Argument $name is missing from the Docblock of getCookieValue()</error>
      <error line="112" code="50014">Name of argument $name does not match with the DocBlock's name $base in getBaseCookieValue()</error>
      <error line="112" code="50015">Argument $base is missing from the Docblock of getBaseCookieValue()</error>
      <error line="143" code="50015">Argument $timeout is missing from the Docblock of setConnectionTimeout()</error>
      <error line="152" code="50015">Argument $max is missing from the Docblock of setMaximumRedirects()</error>
      <error line="162" code="50015">Argument $username is missing from the Docblock of useProxy()</error>
      <error line="162" code="50015">Argument $password is missing from the Docblock of useProxy()</error>
      <error line="184" code="50015">Argument $redirects is missing from the Docblock of isTooManyRedirects()</error>
      <error line="194" code="50014">Name of argument $host does not match with the DocBlock's name $realm in setIdentity()</error>
      <error line="194" code="50015">Argument $realm is missing from the Docblock of setIdentity()</error>
      <error line="194" code="50015">Argument $username is missing from the Docblock of setIdentity()</error>
      <error line="194" code="50015">Argument $password is missing from the Docblock of setIdentity()</error>
      <error line="206" code="50015">Argument $encoding is missing from the Docblock of fetchResponse()</error>
      <error line="231" code="50014">Name of argument $url does not match with the DocBlock's name $encoding in fetchWhileRedirected()</error>
      <error line="231" code="50015">Argument $encoding is missing from the Docblock of fetchWhileRedirected()</error>
      <error line="260" code="50014">Name of argument $url does not match with the DocBlock's name $encoding in fetch()</error>
      <error line="260" code="50015">Argument $encoding is missing from the Docblock of fetch()</error>
      <error line="272" code="50014">Name of argument $url does not match with the DocBlock's name $encoding in createRequest()</error>
      <error line="272" code="50015">Argument $encoding is missing from the Docblock of createRequest()</error>
      <error line="289" code="50014">Name of argument $url does not match with the DocBlock's name $parameters in createHttpRequest()</error>
      <error line="289" code="50015">Argument $encoding is missing from the Docblock of createHttpRequest()</error>
      <notice line="289" code="50013">Parameter $parameters could not be found in createHttpRequest()</notice>
      <error line="300" code="50015">Argument $url is missing from the Docblock of createRoute()</error>
      <error line="317" code="50015">Argument $request is missing from the Docblock of addAdditionalHeaders()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/web_tester.php" hash="2ff3a4aa0c5310b3b28cae443144440f" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>Base include file for SimpleTest.</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="WebTester&#10; @version    $Id: web_tester.php 2013 2011-04-29 09:29:45Z pp11 $"/>
      </docblock>
    </include>
    <include line="13" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="14" type="Require Once" package="Default">
      <name/>
    </include>
    <include line="15" type="Require Once" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="23" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>FieldExpectation</name>
      <full_name>\FieldExpectation</full_name>
      <docblock line="18">
        <description>Test for an HTML widget value match.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="18" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="24" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="34" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="26">
          <description>Sets the field value to compare against.</description>
          <long-description>&lt;p&gt;@param mixed $value     Test value to match. Can be an
                           expectation for say pattern matching.&lt;/p&gt;</long-description>
          <tag line="26" name="param" description="Optiona message override. Can use %s as a placeholder for the original message. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="34">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="50" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="42">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if it matches
   a string value or an array value in any order.&lt;/p&gt;</long-description>
          <tag line="42" name="param" description="Comparison value. False for an unset field. @return boolean True if correct. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="69" package="Default">
        <name>isSingle</name>
        <full_name>isSingle</full_name>
        <docblock line="63">
          <description>Tests for valid field comparisons with a single option.</description>
          <long-description>&lt;p&gt;@param mixed $value       Value to type check.&lt;/p&gt;</long-description>
          <tag line="63" name="return" description="True if integer, string or float.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="79" package="Default">
        <name>testSingle</name>
        <full_name>testSingle</full_name>
        <docblock line="73">
          <description>String comparison for simple field with a single option.</description>
          <long-description>&lt;p&gt;@param mixed $compare    String to test against.&lt;/p&gt;</long-description>
          <tag line="73" name="returns" description="boolean         True if matching.&#10;   @access private"/>
        </docblock>
        <argument line="79">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="95" package="Default">
        <name>testMultiple</name>
        <full_name>testMultiple</full_name>
        <docblock line="89">
          <description>List comparison for multivalue field.</description>
          <long-description>&lt;p&gt;@param mixed $compare    List in any order to test against.&lt;/p&gt;</long-description>
          <tag line="89" name="returns" description="boolean         True if matching.&#10;   @access private"/>
        </docblock>
        <argument line="95">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="113" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="106">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="106" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="134" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>HttpHeaderExpectation</name>
      <full_name>\HttpHeaderExpectation</full_name>
      <docblock line="129">
        <description>Test for a specific HTTP header within a header block.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="129" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="135" namespace="global" package="Default">
        <name>$expected_header</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="136" namespace="global" package="Default">
        <name>$expected_value</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="148" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="138">
          <description>Sets the field and value to compare against.</description>
          <long-description>&lt;p&gt;@param string $header   Case insenstive trimmed header name.&lt;/p&gt;</long-description>
          <tag line="138" name="param" description="Optional value to compare. If not given then any value will match. If an expectation object then that will be used instead. @param string $message Optiona message override. Can use %s as a placeholder for the original message." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="148">
          <name>$header</name>
          <default></default>
          <type/>
        </argument>
        <argument line="148">
          <name>$value</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="148">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="159" package="Default">
        <name>getExpectation</name>
        <full_name>getExpectation</full_name>
        <docblock line="154">
          <description>Accessor for aggregated object.</description>
          <long-description>&lt;p&gt;@return mixed        Expectation set in constructor.&lt;/p&gt;</long-description>
          <tag line="154" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="170" package="Default">
        <name>normaliseHeader</name>
        <full_name>normaliseHeader</full_name>
        <docblock line="163">
          <description>Removes whitespace at ends and case variations.</description>
          <long-description>&lt;p&gt;@param string $header    Name of header.&lt;/p&gt;</long-description>
          <tag line="163" name="param" description="Trimmed and lowecased header name. @access private" type="string" variable="$header">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="170">
          <name>$header</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="181" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="174">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if it matches
   a string value or an array value in any order.&lt;/p&gt;</long-description>
          <tag line="174" name="param" description="Raw header block to search. @return boolean True if header present. @access public" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="181">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="192" package="Default">
        <name>findHeader</name>
        <full_name>findHeader</full_name>
        <docblock line="185">
          <description>Searches the incoming result.</description>
          <long-description>&lt;p&gt;Will extract the matching
   line as text.&lt;/p&gt;</long-description>
          <tag line="185" name="param" description="Raw header block to search. @return string Matching header line. @access protected" type="mixed" variable="$compare">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="192">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="208" package="Default">
        <name>testHeaderLine</name>
        <full_name>testHeaderLine</full_name>
        <docblock line="202">
          <description>Compares a single header line against the expectation.</description>
          <long-description>&lt;p&gt;@param string $line      A single line to compare.&lt;/p&gt;</long-description>
          <tag line="202" name="return" description="True if matched.&#10;   @access private" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="208">
          <name>$line</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="226" package="Default">
        <name>testHeaderValue</name>
        <full_name>testHeaderValue</full_name>
        <docblock line="219">
          <description>Tests the value part of the header.</description>
          <long-description>&lt;p&gt;@param string $value        Value to test.&lt;/p&gt;</long-description>
          <tag line="219" name="param" description="Value to test against. @return boolean True if matched. @access protected" type="mixed" variable="$expected">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="226">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="226">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="243" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="236">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Raw header block to search.&lt;/p&gt;</long-description>
          <tag line="236" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="243">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="264" package="Default">
      <extends>\HttpHeaderExpectation</extends>
      <name>NoHttpHeaderExpectation</name>
      <full_name>\NoHttpHeaderExpectation</full_name>
      <docblock line="258">
        <description>Test for a specific HTTP header within a header block that
   should not be found.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="258" name="subpackage" description="WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="265" namespace="global" package="Default">
        <name>$expected_header</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="266" namespace="global" package="Default">
        <name>$expected_value</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="274" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="268">
          <description>Sets the field and value to compare against.</description>
          <long-description>&lt;p&gt;@param string $unwanted   Case insenstive trimmed header name.&lt;/p&gt;</long-description>
          <tag line="268" name="param" description="Optiona message override. Can use %s as a placeholder for the original message." type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="274">
          <name>$unwanted</name>
          <default></default>
          <type/>
        </argument>
        <argument line="274">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="284" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="278">
          <description>Tests that the unwanted header is not found.</description>
          <long-description>&lt;p&gt;@param mixed $compare   Raw header block to search.&lt;/p&gt;</long-description>
          <tag line="278" name="return" description="True if header present.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="284">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="295" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="288">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Raw header block to search.&lt;/p&gt;</long-description>
          <tag line="288" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="295">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="310" package="Default">
      <extends>\SimpleExpectation</extends>
      <name>TextExpectation</name>
      <full_name>\TextExpectation</full_name>
      <docblock line="305">
        <description>Test for a text substring.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="305" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="311" namespace="global" package="Default">
        <name>$substring</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="319" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="313">
          <description>Sets the value to compare against.</description>
          <long-description>&lt;p&gt;@param string $substring  Text to search for.&lt;/p&gt;</long-description>
          <tag line="313" name="param" description="Customised message on failure. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="319">
          <name>$substring</name>
          <default></default>
          <type/>
        </argument>
        <argument line="319">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="329" package="Default">
        <name>getSubstring</name>
        <full_name>getSubstring</full_name>
        <docblock line="324">
          <description>Accessor for the substring.</description>
          <long-description>&lt;p&gt;@return string       Text to match.&lt;/p&gt;</long-description>
          <tag line="324" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="340" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="333">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;True if the text contains the
   substring.&lt;/p&gt;</long-description>
          <tag line="333" name="param" description="Comparison value. @return boolean True if correct. @access public" type="string" variable="$compare">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="340">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="351" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="344">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param mixed $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="344" name="return" description="Description of success&#10;                              or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="351">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="369" package="Default">
        <name>describeTextMatch</name>
        <full_name>describeTextMatch</full_name>
        <docblock line="362">
          <description>Describes a pattern match including the string
   found and it's position.</description>
          <long-description>&lt;p&gt;@param string $substring      Text to search for.&lt;/p&gt;</long-description>
          <tag line="362" name="param" description="Subject to search. @access protected" type="string" variable="$subject">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="369">
          <name>$substring</name>
          <default></default>
          <type/>
        </argument>
        <argument line="369">
          <name>$subject</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="384" package="Default">
      <extends>\TextExpectation</extends>
      <name>NoTextExpectation</name>
      <full_name>\NoTextExpectation</full_name>
      <docblock line="378">
        <description>Fail if a substring is detected within the
   comparison text.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="378" name="subpackage" description="UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="392" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="386">
          <description>Sets the reject pattern</description>
          <long-description>&lt;p&gt;@param string $substring  Text to search for.&lt;/p&gt;</long-description>
          <tag line="386" name="param" description="Customised message on failure. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="392">
          <name>$substring</name>
          <default></default>
          <type/>
        </argument>
        <argument line="392">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="403" package="Default">
        <name>test</name>
        <full_name>test</full_name>
        <docblock line="396">
          <description>Tests the expectation.</description>
          <long-description>&lt;p&gt;False if the substring appears
   in the text.&lt;/p&gt;</long-description>
          <tag line="396" name="param" description="Comparison value. @return boolean True if correct. @access public" type="string" variable="$compare">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="403">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="414" package="Default">
        <name>testMessage</name>
        <full_name>testMessage</full_name>
        <docblock line="407">
          <description>Returns a human readable test message.</description>
          <long-description>&lt;p&gt;@param string $compare      Comparison value.&lt;/p&gt;</long-description>
          <tag line="407" name="return" description="Description of success&#10;                               or failure.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="414">
          <name>$compare</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="433" package="SimpleTest&#10;   @subpackage WebTester">
      <extends>\SimpleTestCase</extends>
      <name>WebTestCase</name>
      <full_name>\WebTestCase</full_name>
      <docblock line="426">
        <description>Test case for testing of web pages.</description>
        <long-description>&lt;p&gt;Allows
   fetching of pages, parsing of HTML and
   submitting forms.&lt;/p&gt;</long-description>
        <tag line="426" name="package" description="SimpleTest&#10;   @subpackage WebTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="434" namespace="global" package="Default">
        <name>$browser</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="435" namespace="global" package="Default">
        <name>$ignore_errors</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="444" package="SimpleTest&#10;   @subpackage WebTester">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="437">
          <description>Creates an empty test case.</description>
          <long-description>&lt;p&gt;Should be subclassed
   with test methods for a functional test case.&lt;/p&gt;</long-description>
          <tag line="437" name="param" description="Name of test case. Will use the class name if none specified. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="444">
          <name>$label</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="453" package="SimpleTest&#10;   @subpackage WebTester">
        <name>before</name>
        <full_name>before</full_name>
        <docblock line="448">
          <description>Announces the start of the test.</description>
          <long-description>&lt;p&gt;@param string $method    Test method just started.&lt;/p&gt;</long-description>
          <tag line="448" name="access" description="public"/>
        </docblock>
        <argument line="453">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="463" package="SimpleTest&#10;   @subpackage WebTester">
        <name>after</name>
        <full_name>after</full_name>
        <docblock line="458">
          <description>Announces the end of the test.</description>
          <long-description>&lt;p&gt;Includes private clean up.&lt;/p&gt;</long-description>
          <tag line="458" name="param" description="Test method just finished. @access public" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="463">
          <name>$method</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="475" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getBrowser</name>
        <full_name>getBrowser</full_name>
        <docblock line="468">
          <description>Gets a current browser reference for setting
   special expectations or for detailed
   examination of page fetches.</description>
          <long-description>&lt;p&gt;@return SimpleBrowser     Current test browser object.&lt;/p&gt;</long-description>
          <tag line="468" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="486" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setBrowser</name>
        <full_name>setBrowser</full_name>
        <docblock line="479">
          <description>Gets a current browser reference for setting
   special expectations or for detailed
   examination of page fetches.</description>
          <long-description>&lt;p&gt;@param SimpleBrowser $browser    New test browser object.&lt;/p&gt;</long-description>
          <tag line="479" name="access" description="public"/>
        </docblock>
        <argument line="486">
          <name>$browser</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="495" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setParser</name>
        <full_name>setParser</full_name>
        <docblock line="490">
          <description>Sets the HTML parser to use within this browser.</description>
          <long-description>&lt;p&gt;@param object         The parser, one of SimplePHPPageBuilder or
                         SimpleTidyPageBuilder.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="495">
          <name>$parser</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="504" package="SimpleTest&#10;   @subpackage WebTester">
        <name>unsetBrowser</name>
        <full_name>unsetBrowser</full_name>
        <docblock line="499">
          <description>Clears the current browser reference to help the
   PHP garbage collector.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="514" package="SimpleTest&#10;   @subpackage WebTester">
        <name>createBrowser</name>
        <full_name>createBrowser</full_name>
        <docblock line="508">
          <description>Creates a new default web browser object.</description>
          <long-description>&lt;p&gt;Will be cleared at the end of the test method.&lt;/p&gt;</long-description>
          <tag line="508" name="return" description="New browser.&#10;   @access public" type="\TestBrowser">
            <type by_reference="false">\TestBrowser</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="523" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getTransportError</name>
        <full_name>getTransportError</full_name>
        <docblock line="518">
          <description>Gets the last response error.</description>
          <long-description>&lt;p&gt;@return string    Last low level HTTP error.&lt;/p&gt;</long-description>
          <tag line="518" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="533" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getUrl</name>
        <full_name>getUrl</full_name>
        <docblock line="527">
          <description>Accessor for the currently selected URL.</description>
          <long-description>&lt;p&gt;@return string        Current location or false if
                         no page yet fetched.&lt;/p&gt;</long-description>
          <tag line="527" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="541" package="SimpleTest&#10;   @subpackage WebTester">
        <name>showRequest</name>
        <full_name>showRequest</full_name>
        <docblock line="537">
          <description>Dumps the current request for debugging.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="549" package="SimpleTest&#10;   @subpackage WebTester">
        <name>showHeaders</name>
        <full_name>showHeaders</full_name>
        <docblock line="545">
          <description>Dumps the current HTTP headers for debugging.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="557" package="SimpleTest&#10;   @subpackage WebTester">
        <name>showSource</name>
        <full_name>showSource</full_name>
        <docblock line="553">
          <description>Dumps the current HTML source for debugging.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="565" package="SimpleTest&#10;   @subpackage WebTester">
        <name>showText</name>
        <full_name>showText</full_name>
        <docblock line="561">
          <description>Dumps the visible text only for debugging.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="580" package="SimpleTest&#10;   @subpackage WebTester">
        <name>restart</name>
        <full_name>restart</full_name>
        <docblock line="569">
          <description>Simulates the closing and reopening of the browser.</description>
          <long-description>&lt;p&gt;Temporary cookies will be discarded and timed
   cookies will be expired if later than the
   specified time.&lt;/p&gt;</long-description>
          <tag line="569" name="param" description="Time when session restarted. If ommitted then all persistent cookies are kept. Time is either Cookie format string or timestamp. @access public" type="\string/integer" variable="$date">
            <type by_reference="false">\string/integer</type>
          </tag>
        </docblock>
        <argument line="580">
          <name>$date</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="593" package="SimpleTest&#10;   @subpackage WebTester">
        <name>ageCookies</name>
        <full_name>ageCookies</full_name>
        <docblock line="587">
          <description>Moves cookie expiry times back into the past.</description>
          <long-description>&lt;p&gt;Useful for testing timeouts and expiries.&lt;/p&gt;</long-description>
          <tag line="587" name="param" description="Amount to age in seconds. @access public" type="integer" variable="$interval">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="593">
          <name>$interval</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="602" package="SimpleTest&#10;   @subpackage WebTester">
        <name>ignoreFrames</name>
        <full_name>ignoreFrames</full_name>
        <docblock line="597">
          <description>Disables frames support.</description>
          <long-description>&lt;p&gt;Frames will not be fetched
   and the frameset page will be used instead.&lt;/p&gt;</long-description>
          <tag line="597" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="610" package="SimpleTest&#10;   @subpackage WebTester">
        <name>ignoreCookies</name>
        <full_name>ignoreCookies</full_name>
        <docblock line="606">
          <description>Switches off cookie sending and recieving.</description>
          <long-description>&lt;p&gt;@access public&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="620" package="SimpleTest&#10;   @subpackage WebTester">
        <name>ignoreErrors</name>
        <full_name>ignoreErrors</full_name>
        <docblock line="614">
          <description>Skips errors for the next request only.</description>
          <long-description>&lt;p&gt;You might
   want to confirm that a page is unreachable for
   example.&lt;/p&gt;</long-description>
          <tag line="614" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="632" package="SimpleTest&#10;   @subpackage WebTester">
        <name>failOnError</name>
        <full_name>failOnError</full_name>
        <docblock line="624">
          <description>Issues a fail if there is a transport error anywhere
   in the current frameset.</description>
          <long-description>&lt;p&gt;Only one such error is
   reported.&lt;/p&gt;</long-description>
          <tag line="624" name="param" description="HTML or failure. @return string/boolean $result Passes through result. @access private" type="\string/boolean" variable="$result">
            <type by_reference="false">\string/boolean</type>
          </tag>
        </docblock>
        <argument line="632">
          <name>$result</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="648" package="SimpleTest&#10;   @subpackage WebTester">
        <name>addHeader</name>
        <full_name>addHeader</full_name>
        <docblock line="642">
          <description>Adds a header to every fetch.</description>
          <long-description>&lt;p&gt;@param string $header       Header line to add to every
                               request until cleared.&lt;/p&gt;</long-description>
          <tag line="642" name="access" description="public"/>
        </docblock>
        <argument line="648">
          <name>$header</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="658" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setMaximumRedirects</name>
        <full_name>setMaximumRedirects</full_name>
        <docblock line="652">
          <description>Sets the maximum number of redirects before
   the web page is loaded regardless.</description>
          <long-description>&lt;p&gt;@param integer $max        Maximum hops.&lt;/p&gt;</long-description>
          <tag line="652" name="access" description="public"/>
        </docblock>
        <argument line="658">
          <name>$max</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="672" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setConnectionTimeout</name>
        <full_name>setConnectionTimeout</full_name>
        <docblock line="666">
          <description>Sets the socket timeout for opening a connection and
   receiving at least one byte of information.</description>
          <long-description>&lt;p&gt;@param integer $timeout      Maximum time in seconds.&lt;/p&gt;</long-description>
          <tag line="666" name="access" description="public"/>
        </docblock>
        <argument line="672">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="685" package="SimpleTest&#10;   @subpackage WebTester">
        <name>useProxy</name>
        <full_name>useProxy</full_name>
        <docblock line="676">
          <description>Sets proxy to use on all requests for when
   testing from behind a firewall.</description>
          <long-description>&lt;p&gt;Set URL
   to false to disable.&lt;/p&gt;</long-description>
          <tag line="676" name="param" description="Proxy URL. @param string $username Proxy username for authentication. @param string $password Proxy password for authentication. @access public" type="string" variable="$proxy">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="685">
          <name>$proxy</name>
          <default></default>
          <type/>
        </argument>
        <argument line="685">
          <name>$username</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="685">
          <name>$password</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="699" package="SimpleTest&#10;   @subpackage WebTester">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="689">
          <description>Fetches a page into the page buffer.</description>
          <long-description>&lt;p&gt;If
   there is no base for the URL then the
   current base URL is used. After the fetch
   the base URL reflects the new location.&lt;/p&gt;</long-description>
          <tag line="689" name="param" description="URL to fetch. @param hash $parameters Optional additional GET data. @return boolean/string Raw page on success. @access public" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="699">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="699">
          <name>$parameters</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="714" package="SimpleTest&#10;   @subpackage WebTester">
        <name>post</name>
        <full_name>post</full_name>
        <docblock line="703">
          <description>Fetches a page by POST into the page buffer.</description>
          <long-description>&lt;p&gt;If there is no base for the URL then the
   current base URL is used. After the fetch
   the base URL reflects the new location.&lt;/p&gt;</long-description>
          <tag line="703" name="param" description="URL to fetch. @param mixed $parameters Optional POST parameters or content body to send @param string $content_type Content type of provided body @return boolean/string Raw page on success. @access public" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="714">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="714">
          <name>$parameters</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="714">
          <name>$content_type</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="729" package="SimpleTest&#10;   @subpackage WebTester">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="718">
          <description>Fetches a page by PUT into the page buffer.</description>
          <long-description>&lt;p&gt;If there is no base for the URL then the
   current base URL is used. After the fetch
   the base URL reflects the new location.&lt;/p&gt;</long-description>
          <tag line="718" name="param" description="URL to fetch. @param mixed $body Optional content body to send @param string $content_type Content type of provided body @return boolean/string Raw page on success. @access public" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="729">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="729">
          <name>$body</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="729">
          <name>$content_type</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="740" package="SimpleTest&#10;   @subpackage WebTester">
        <name>delete</name>
        <full_name>delete</full_name>
        <docblock line="733">
          <description>Fetches a page by a DELETE request</description>
          <long-description>&lt;p&gt;@param string $url          URL to fetch.&lt;/p&gt;</long-description>
          <tag line="733" name="param" description="Optional additional parameters. @return boolean/string Raw page on success. @access public" type="\hash" variable="$parameters">
            <type by_reference="false">\hash</type>
          </tag>
        </docblock>
        <argument line="740">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="740">
          <name>$parameters</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="753" package="SimpleTest&#10;   @subpackage WebTester">
        <name>head</name>
        <full_name>head</full_name>
        <docblock line="745">
          <description>Does a HTTP HEAD fetch, fetching only the page
   headers.</description>
          <long-description>&lt;p&gt;The current base URL is unchanged by this.&lt;/p&gt;</long-description>
          <tag line="745" name="param" description="URL to fetch. @param hash $parameters Optional additional GET data. @return boolean True on success. @access public" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="753">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="753">
          <name>$parameters</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="763" package="SimpleTest&#10;   @subpackage WebTester">
        <name>retry</name>
        <full_name>retry</full_name>
        <docblock line="757">
          <description>Equivalent to hitting the retry button on the
   browser.</description>
          <long-description>&lt;p&gt;Will attempt to repeat the page fetch.&lt;/p&gt;</long-description>
          <tag line="757" name="return" description="True if fetch succeeded.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="774" package="SimpleTest&#10;   @subpackage WebTester">
        <name>back</name>
        <full_name>back</full_name>
        <docblock line="767">
          <description>Equivalent to hitting the back button on the
   browser.</description>
          <long-description>&lt;p&gt;@return boolean     True if history entry and
                       fetch succeeded.&lt;/p&gt;</long-description>
          <tag line="767" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="785" package="SimpleTest&#10;   @subpackage WebTester">
        <name>forward</name>
        <full_name>forward</full_name>
        <docblock line="778">
          <description>Equivalent to hitting the forward button on the
   browser.</description>
          <long-description>&lt;p&gt;@return boolean     True if history entry and
                       fetch succeeded.&lt;/p&gt;</long-description>
          <tag line="778" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="799" package="SimpleTest&#10;   @subpackage WebTester">
        <name>authenticate</name>
        <full_name>authenticate</full_name>
        <docblock line="789">
          <description>Retries a request after setting the authentication
   for the current realm.</description>
          <long-description>&lt;p&gt;@param string $username    Username for realm.&lt;/p&gt;</long-description>
          <tag line="789" name="param" description="Password for realm. @return boolean/string HTML on successful fetch. Note that authentication may still have failed. @access public" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="799">
          <name>$username</name>
          <default></default>
          <type/>
        </argument>
        <argument line="799">
          <name>$password</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="810" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getCookie</name>
        <full_name>getCookie</full_name>
        <docblock line="804">
          <description>Gets the cookie value for the current browser context.</description>
          <long-description>&lt;p&gt;@param string $name          Name of cookie.&lt;/p&gt;</long-description>
          <tag line="804" name="return" description="Value of cookie or false if unset.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="810">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="823" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setCookie</name>
        <full_name>setCookie</full_name>
        <docblock line="814">
          <description>Sets a cookie in the current browser.</description>
          <long-description>&lt;p&gt;@param string $name          Name of cookie.&lt;/p&gt;</long-description>
          <tag line="814" name="param" description="Cookie value. @param string $host Host upon which the cookie is valid. @param string $path Cookie path if not host wide. @param string $expiry Expiry date. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="823">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="823">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="823">
          <name>$host</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="823">
          <name>$path</name>
          <default>'/'</default>
          <type/>
        </argument>
        <argument line="823">
          <name>$expiry</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="835" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getFrameFocus</name>
        <full_name>getFrameFocus</full_name>
        <docblock line="827">
          <description>Accessor for current frame focus.</description>
          <long-description>&lt;p&gt;Will be
   false if no frame has focus.&lt;/p&gt;</long-description>
          <tag line="827" name="return" description="Label if any, otherwise&#10;                                     the position in the frameset&#10;                                     or false if none.&#10;   @access public" type="\integer/string/boolean">
            <type by_reference="false">\integer/string/boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="845" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setFrameFocusByIndex</name>
        <full_name>setFrameFocusByIndex</full_name>
        <docblock line="839">
          <description>Sets the focus by index.</description>
          <long-description>&lt;p&gt;The integer index starts from 1.&lt;/p&gt;</long-description>
          <tag line="839" name="param" description="Chosen frame. @return boolean True if frame exists. @access public" type="integer" variable="$choice">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="845">
          <name>$choice</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="855" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setFrameFocus</name>
        <full_name>setFrameFocus</full_name>
        <docblock line="849">
          <description>Sets the focus by name.</description>
          <long-description>&lt;p&gt;@param string $name    Chosen frame.&lt;/p&gt;</long-description>
          <tag line="849" name="return" description="True if frame exists.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="855">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="864" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clearFrameFocus</name>
        <full_name>clearFrameFocus</full_name>
        <docblock line="859">
          <description>Clears the frame focus.</description>
          <long-description>&lt;p&gt;All frames will be searched
   for content.&lt;/p&gt;</long-description>
          <tag line="859" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="875" package="SimpleTest&#10;   @subpackage WebTester">
        <name>click</name>
        <full_name>click</full_name>
        <docblock line="868">
          <description>Clicks a visible text item.</description>
          <long-description>&lt;p&gt;Will first try buttons,
   then links and then images.&lt;/p&gt;</long-description>
          <tag line="868" name="param" description="Visible text or alt text. @return string/boolean Raw page or false. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="875">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="885" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertClickable</name>
        <full_name>assertClickable</full_name>
        <docblock line="879">
          <description>Checks for a click target.</description>
          <long-description>&lt;p&gt;@param string $label        Visible text or alt text.&lt;/p&gt;</long-description>
          <tag line="879" name="return" description="True if click target.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="885">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="885">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="900" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickSubmit</name>
        <full_name>clickSubmit</full_name>
        <docblock line="891">
          <description>Clicks the submit button by label.</description>
          <long-description>&lt;p&gt;The owning
   form will be submitted by this.&lt;/p&gt;</long-description>
          <tag line="891" name="param" description="Button label. An unlabeled button can be triggered by 'Submit'. @param hash $additional Additional form values. @return boolean/string Page on success, else false. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="900">
          <name>$label</name>
          <default>'Submit'</default>
          <type/>
        </argument>
        <argument line="900">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="913" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickSubmitByName</name>
        <full_name>clickSubmitByName</full_name>
        <docblock line="905">
          <description>Clicks the submit button by name attribute.</description>
          <long-description>&lt;p&gt;The owning
   form will be submitted by this.&lt;/p&gt;</long-description>
          <tag line="905" name="param" description="Name attribute of button. @param hash $additional Additional form values. @return boolean/string Page on success. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="913">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="913">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="926" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickSubmitById</name>
        <full_name>clickSubmitById</full_name>
        <docblock line="918">
          <description>Clicks the submit button by ID attribute.</description>
          <long-description>&lt;p&gt;The owning
   form will be submitted by this.&lt;/p&gt;</long-description>
          <tag line="918" name="param" description="ID attribute of button. @param hash $additional Additional form values. @return boolean/string Page on success. @access public" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="926">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="926">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="937" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertSubmit</name>
        <full_name>assertSubmit</full_name>
        <docblock line="931">
          <description>Checks for a valid button label.</description>
          <long-description>&lt;p&gt;@param string $label        Visible text.&lt;/p&gt;</long-description>
          <tag line="931" name="return" description="True if click target.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="937">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="937">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="956" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickImage</name>
        <full_name>clickImage</full_name>
        <docblock line="943">
          <description>Clicks the submit image by some kind of label.</description>
          <long-description>&lt;p&gt;Usually
   the alt tag or the nearest equivalent. The owning
   form will be submitted by this. Clicking outside of
   the boundary of the coordinates will result in
   a failure.&lt;/p&gt;</long-description>
          <tag line="943" name="param" description="Alt attribute of button. @param integer $x X-coordinate of imaginary click. @param integer $y Y-coordinate of imaginary click. @param hash $additional Additional form values. @return boolean/string Page on success. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="956">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="956">
          <name>$x</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="956">
          <name>$y</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="956">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="974" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickImageByName</name>
        <full_name>clickImageByName</full_name>
        <docblock line="961">
          <description>Clicks the submit image by the name.</description>
          <long-description>&lt;p&gt;Usually
   the alt tag or the nearest equivalent. The owning
   form will be submitted by this. Clicking outside of
   the boundary of the coordinates will result in
   a failure.&lt;/p&gt;</long-description>
          <tag line="961" name="param" description="Name attribute of button. @param integer $x X-coordinate of imaginary click. @param integer $y Y-coordinate of imaginary click. @param hash $additional Additional form values. @return boolean/string Page on success. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="974">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="974">
          <name>$x</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="974">
          <name>$y</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="974">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="991" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickImageById</name>
        <full_name>clickImageById</full_name>
        <docblock line="979">
          <description>Clicks the submit image by ID attribute.</description>
          <long-description>&lt;p&gt;The owning
   form will be submitted by this. Clicking outside of
   the boundary of the coordinates will result in
   a failure.&lt;/p&gt;</long-description>
          <tag line="979" name="param" description="ID attribute of button. @param integer $x X-coordinate of imaginary click. @param integer $y Y-coordinate of imaginary click. @param hash $additional Additional form values. @return boolean/string Page on success. @access public" type="\integer/string" variable="$id">
            <type by_reference="false">\integer/string</type>
          </tag>
        </docblock>
        <argument line="991">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="991">
          <name>$x</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="991">
          <name>$y</name>
          <default>1</default>
          <type/>
        </argument>
        <argument line="991">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1002" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertImage</name>
        <full_name>assertImage</full_name>
        <docblock line="996">
          <description>Checks for a valid image with atht alt text or title.</description>
          <long-description>&lt;p&gt;@param string $label        Visible text.&lt;/p&gt;</long-description>
          <tag line="996" name="return" description="True if click target.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1002">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1002">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1015" package="SimpleTest&#10;   @subpackage WebTester">
        <name>submitFormById</name>
        <full_name>submitFormById</full_name>
        <docblock line="1008">
          <description>Submits a form by the ID.</description>
          <long-description>&lt;p&gt;@param string $id       Form ID. No button information
                           is submitted this way.&lt;/p&gt;</long-description>
          <tag line="1008" name="return" description="Page on success.&#10;   @access public" type="\boolean/string">
            <type by_reference="false">\boolean/string</type>
          </tag>
        </docblock>
        <argument line="1015">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1015">
          <name>$additional</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1029" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickLink</name>
        <full_name>clickLink</full_name>
        <docblock line="1019">
          <description>Follows a link by name.</description>
          <long-description>&lt;p&gt;Will click the first link
   found with this link text by default, or a later
   one if an index is given. Match is case insensitive
   with normalised space.&lt;/p&gt;</long-description>
          <tag line="1019" name="param" description="Text between the anchor tags. @param integer $index Link position counting from zero. @return boolean/string Page on success. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1029">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1029">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1039" package="SimpleTest&#10;   @subpackage WebTester">
        <name>clickLinkById</name>
        <full_name>clickLinkById</full_name>
        <docblock line="1033">
          <description>Follows a link by id attribute.</description>
          <long-description>&lt;p&gt;@param string $id        ID attribute value.&lt;/p&gt;</long-description>
          <tag line="1033" name="return" description="Page on success.&#10;   @access public" type="\boolean/string">
            <type by_reference="false">\boolean/string</type>
          </tag>
        </docblock>
        <argument line="1039">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1053" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertLink</name>
        <full_name>assertLink</full_name>
        <docblock line="1043">
          <description>Tests for the presence of a link label.</description>
          <long-description>&lt;p&gt;Match is
   case insensitive with normalised space.&lt;/p&gt;</long-description>
          <tag line="1043" name="param" description="Text between the anchor tags. @param mixed $expected Expected URL or expectation object. @param string $message Message to display. Default can be embedded with %s. @return boolean True if link present. @access public" type="string" variable="$label">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1053">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1053">
          <name>$expected</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1053">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1074" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertNoLink</name>
        <full_name>assertNoLink</full_name>
        <docblock line="1064">
          <description>Tests for the non-presence of a link label.</description>
          <long-description>&lt;p&gt;Match is
   case insensitive with normalised space.&lt;/p&gt;</long-description>
          <tag line="1064" name="param" description="Text between the anchor tags or ID attribute. @param string $message Message to display. Default can be embedded with %s. @return boolean True if link missing. @access public" type="\string/integer" variable="$label">
            <type by_reference="false">\string/integer</type>
          </tag>
        </docblock>
        <argument line="1074">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1074">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1089" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertLinkById</name>
        <full_name>assertLinkById</full_name>
        <docblock line="1080">
          <description>Tests for the presence of a link id attribute.</description>
          <long-description>&lt;p&gt;@param string $id        Id attribute value.&lt;/p&gt;</long-description>
          <tag line="1080" name="param" description="Expected URL or expectation object. @param string $message Message to display. Default can be embedded with %s. @return boolean True if link present. @access public" type="mixed" variable="$expected">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="1089">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1089">
          <name>$expected</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1089">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1109" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertNoLinkById</name>
        <full_name>assertNoLinkById</full_name>
        <docblock line="1100">
          <description>Tests for the non-presence of a link label.</description>
          <long-description>&lt;p&gt;Match is
   case insensitive with normalised space.&lt;/p&gt;</long-description>
          <tag line="1100" name="param" description="Id attribute value. @param string $message Message to display. Default can be embedded with %s. @return boolean True if link missing. @access public" type="string" variable="$id">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1109">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1109">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1123" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setField</name>
        <full_name>setField</full_name>
        <docblock line="1115">
          <description>Sets all form fields with that label, or name if there
   is no label attached.</description>
          <long-description>&lt;p&gt;@param string $name    Name of field in forms.&lt;/p&gt;</long-description>
          <tag line="1115" name="param" description="New value of field. @return boolean True if field exists, otherwise false. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1123">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1123">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1123">
          <name>$position</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1134" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setFieldByName</name>
        <full_name>setFieldByName</full_name>
        <docblock line="1127">
          <description>Sets all form fields with that name.</description>
          <long-description>&lt;p&gt;@param string $name    Name of field in forms.&lt;/p&gt;</long-description>
          <tag line="1127" name="param" description="New value of field. @return boolean True if field exists, otherwise false. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1134">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1134">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1134">
          <name>$position</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1145" package="SimpleTest&#10;   @subpackage WebTester">
        <name>setFieldById</name>
        <full_name>setFieldById</full_name>
        <docblock line="1138">
          <description>Sets all form fields with that id.</description>
          <long-description>&lt;p&gt;@param string/integer $id   Id of field in forms.&lt;/p&gt;</long-description>
          <tag line="1138" name="param" description="New value of field. @return boolean True if field exists, otherwise false. @access public" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1145">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1145">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1162" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertField</name>
        <full_name>assertField</full_name>
        <docblock line="1149">
          <description>Confirms that the form element is currently set
   to the expected value.</description>
          <long-description>&lt;p&gt;A missing form will always
   fail. If no value is given then only the existence
   of the field is checked.&lt;/p&gt;</long-description>
          <tag line="1149" name="param" description="Name of field in forms. @param mixed $expected Expected string/array value or false for unset fields. @param string $message Message to display. Default can be embedded with %s. @return boolean True if pass. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1162">
          <name>$label</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1162">
          <name>$expected</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1162">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1180" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertFieldByName</name>
        <full_name>assertFieldByName</full_name>
        <docblock line="1167">
          <description>Confirms that the form element is currently set
   to the expected value.</description>
          <long-description>&lt;p&gt;A missing form element will always
   fail. If no value is given then only the existence
   of the field is checked.&lt;/p&gt;</long-description>
          <tag line="1167" name="param" description="Name of field in forms. @param mixed $expected Expected string/array value or false for unset fields. @param string $message Message to display. Default can be embedded with %s. @return boolean True if pass. @access public" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1180">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1180">
          <name>$expected</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1180">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1198" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertFieldById</name>
        <full_name>assertFieldById</full_name>
        <docblock line="1185">
          <description>Confirms that the form element is currently set
   to the expected value.</description>
          <long-description>&lt;p&gt;A missing form will always
   fail. If no ID is given then only the existence
   of the field is checked.&lt;/p&gt;</long-description>
          <tag line="1185" name="param" description="Name of field in forms. @param mixed $expected Expected string/array value or false for unset fields. @param string $message Message to display. Default can be embedded with %s. @return boolean True if pass. @access public" type="\string/integer" variable="$id">
            <type by_reference="false">\string/integer</type>
          </tag>
        </docblock>
        <argument line="1198">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1198">
          <name>$expected</name>
          <default>true</default>
          <type/>
        </argument>
        <argument line="1198">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="1212" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertFieldValue</name>
        <full_name>assertFieldValue</full_name>
        <docblock line="1203">
          <description>Tests the field value against the expectation.</description>
          <long-description>&lt;p&gt;@param string $identifier      Name, ID or label.&lt;/p&gt;</long-description>
          <tag line="1203" name="param" description="Current field value. @param mixed $expected Expected value to match. @param string $message Failure message. @return boolean True if pass @access protected" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="1212">
          <name>$identifier</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1212">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1212">
          <name>$expected</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1212">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1236" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertResponse</name>
        <full_name>assertResponse</full_name>
        <docblock line="1227">
          <description>Checks the response code against a list
   of possible values.</description>
          <long-description>&lt;p&gt;@param array $responses    Possible responses for a pass.&lt;/p&gt;</long-description>
          <tag line="1227" name="param" description="Message to display. Default can be embedded with %s. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1236">
          <name>$responses</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1236">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1252" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertMime</name>
        <full_name>assertMime</full_name>
        <docblock line="1244">
          <description>Checks the mime type against a list
   of possible values.</description>
          <long-description>&lt;p&gt;@param array $types      Possible mime types for a pass.&lt;/p&gt;</long-description>
          <tag line="1244" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1252">
          <name>$types</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1252">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1268" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertAuthentication</name>
        <full_name>assertAuthentication</full_name>
        <docblock line="1260">
          <description>Attempt to match the authentication type within
   the security realm we are currently matching.</description>
          <long-description>&lt;p&gt;@param string $authentication   Usually basic.&lt;/p&gt;</long-description>
          <tag line="1260" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1268">
          <name>$authentication</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="1268">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1291" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertNoAuthentication</name>
        <full_name>assertNoAuthentication</full_name>
        <docblock line="1284">
          <description>Checks that no authentication is necessary to view
   the desired page.</description>
          <long-description>&lt;p&gt;@param string $message     Message to display.&lt;/p&gt;</long-description>
          <tag line="1284" name="return" description="True if pass.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1291">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1304" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertRealm</name>
        <full_name>assertRealm</full_name>
        <docblock line="1297">
          <description>Attempts to match the current security realm.</description>
          <long-description>&lt;p&gt;@param string $realm     Name of security realm.&lt;/p&gt;</long-description>
          <tag line="1297" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1304">
          <name>$realm</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1304">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1324" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertHeader</name>
        <full_name>assertHeader</full_name>
        <docblock line="1314">
          <description>Checks each header line for the required value.</description>
          <long-description>&lt;p&gt;If no
   value is given then only an existence check is made.&lt;/p&gt;</long-description>
          <tag line="1314" name="param" description="Case insensitive header name. @param mixed $value Case sensitive trimmed string to match against. An expectation object can be used for pattern matching. @return boolean True if pass. @access public" type="string" variable="$header">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1324">
          <name>$header</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1324">
          <name>$value</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="1324">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1340" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertNoHeader</name>
        <full_name>assertNoHeader</full_name>
        <docblock line="1331">
          <description>Confirms that the header type has not been received.</description>
          <long-description>&lt;p&gt;Only the landing page is checked. If you want to check
   redirect pages, then you should limit redirects so
   as to capture the page you want.&lt;/p&gt;</long-description>
          <tag line="1331" name="param" description="Case insensitive header name. @return boolean True if pass. @access public" type="string" variable="$header">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1340">
          <name>$header</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1340">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1354" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertTitle</name>
        <full_name>assertTitle</full_name>
        <docblock line="1347">
          <description>Tests the text between the title tags.</description>
          <long-description>&lt;p&gt;@param string/SimpleExpectation $title    Expected title.&lt;/p&gt;</long-description>
          <tag line="1347" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1354">
          <name>$title</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="1354">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1369" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertText</name>
        <full_name>assertText</full_name>
        <docblock line="1361">
          <description>Will trigger a pass if the text is found in the plain
   text form of the page.</description>
          <long-description>&lt;p&gt;@param string $text       Text to look for.&lt;/p&gt;</long-description>
          <tag line="1361" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1369">
          <name>$text</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1369">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1384" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertNoText</name>
        <full_name>assertNoText</full_name>
        <docblock line="1376">
          <description>Will trigger a pass if the text is not found in the plain
   text form of the page.</description>
          <long-description>&lt;p&gt;@param string $text       Text to look for.&lt;/p&gt;</long-description>
          <tag line="1376" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1384">
          <name>$text</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1384">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1400" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertPattern</name>
        <full_name>assertPattern</full_name>
        <docblock line="1391">
          <description>Will trigger a pass if the Perl regex pattern
   is found in the raw content.</description>
          <long-description>&lt;p&gt;@param string $pattern    Perl regex to look for including
                             the regex delimiters.&lt;/p&gt;</long-description>
          <tag line="1391" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1400">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1400">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1416" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertNoPattern</name>
        <full_name>assertNoPattern</full_name>
        <docblock line="1407">
          <description>Will trigger a pass if the perl regex pattern
   is not present in raw content.</description>
          <long-description>&lt;p&gt;@param string $pattern    Perl regex to look for including
                             the regex delimiters.&lt;/p&gt;</long-description>
          <tag line="1407" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1416">
          <name>$pattern</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1416">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1433" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertCookie</name>
        <full_name>assertCookie</full_name>
        <docblock line="1423">
          <description>Checks that a cookie is set for the current page
   and optionally checks the value.</description>
          <long-description>&lt;p&gt;@param string $name        Name of cookie to test.&lt;/p&gt;</long-description>
          <tag line="1423" name="param" description="Expected value as a string or false if any value will do. @param string $message Message to display. @return boolean True if pass. @access public" type="string" variable="$expected">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1433">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1433">
          <name>$expected</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="1433">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1454" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertNoCookie</name>
        <full_name>assertNoCookie</full_name>
        <docblock line="1446">
          <description>Checks that no cookie is present or that it has
   been successfully cleared.</description>
          <long-description>&lt;p&gt;@param string $name        Name of cookie to test.&lt;/p&gt;</long-description>
          <tag line="1446" name="param" description="Message to display. @return boolean True if pass. @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1454">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1454">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1469" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertTrue</name>
        <full_name>assertTrue</full_name>
        <docblock line="1460">
          <description>Called from within the test methods to register
   passes and failures.</description>
          <long-description>&lt;p&gt;@param boolean $result    Pass on true.&lt;/p&gt;</long-description>
          <tag line="1460" name="param" description="Message to display describing the test state. @return boolean True on pass @access public" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="1469">
          <name>$result</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1469">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1483" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertFalse</name>
        <full_name>assertFalse</full_name>
        <docblock line="1473">
          <description>Will be true on false and vice versa.</description>
          <long-description>&lt;p&gt;False
   is the PHP definition of false, so that null,
   empty strings, zero and an empty array all count
   as false.&lt;/p&gt;</long-description>
          <tag line="1473" name="param" description="Pass on false. @param string $message Message to display. @return boolean True on pass @access public" type="boolean" variable="$result">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="1483">
          <name>$result</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1483">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1497" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertEqual</name>
        <full_name>assertEqual</full_name>
        <docblock line="1487">
          <description>Will trigger a pass if the two parameters have
   the same value only.</description>
          <long-description>&lt;p&gt;Otherwise a fail. This
   is for testing hand extracted text, etc.&lt;/p&gt;</long-description>
          <tag line="1487" name="param" description="Value to compare. @param mixed $second Value to compare. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="1497">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1497">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1497">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1514" package="SimpleTest&#10;   @subpackage WebTester">
        <name>assertNotEqual</name>
        <full_name>assertNotEqual</full_name>
        <docblock line="1504">
          <description>Will trigger a pass if the two parameters have
   a different value.</description>
          <long-description>&lt;p&gt;Otherwise a fail. This
   is for testing hand extracted text, etc.&lt;/p&gt;</long-description>
          <tag line="1504" name="param" description="Value to compare. @param mixed $second Value to compare. @param string $message Message to display. @return boolean True on pass @access public" type="mixed" variable="$first">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="1514">
          <name>$first</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1514">
          <name>$second</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1514">
          <name>$message</name>
          <default>'%s'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1527" package="SimpleTest&#10;   @subpackage WebTester">
        <name>getAssertionLine</name>
        <full_name>getAssertionLine</full_name>
        <docblock line="1521">
          <description>Uses a stack trace to find the line of an assertion.</description>
          <long-description>&lt;p&gt;@return string           Line number of first assert*
                            method embedded in format string.&lt;/p&gt;</long-description>
          <tag line="1521" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/web_tester.php</error>
      <critical line="18" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="24" code="50018">No DocBlock was found for property $value</error>
      <error line="26" code="50014">Name of argument $value does not match with the DocBlock's name $message in __construct()</error>
      <error line="26" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="63" code="50015">Argument $value is missing from the Docblock of isSingle()</error>
      <error line="73" code="50015">Argument $compare is missing from the Docblock of testSingle()</error>
      <error line="89" code="50015">Argument $compare is missing from the Docblock of testMultiple()</error>
      <error line="106" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="129" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="135" code="50018">No DocBlock was found for property $expected_header</error>
      <error line="136" code="50018">No DocBlock was found for property $expected_value</error>
      <error line="138" code="50014">Name of argument $header does not match with the DocBlock's name $value in __construct()</error>
      <error line="138" code="50015">Argument $value is missing from the Docblock of __construct()</error>
      <error line="138" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="202" code="50015">Argument $line is missing from the Docblock of testHeaderLine()</error>
      <error line="219" code="50014">Name of argument $value does not match with the DocBlock's name $expected in testHeaderValue()</error>
      <error line="219" code="50015">Argument $expected is missing from the Docblock of testHeaderValue()</error>
      <error line="236" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="258" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="265" code="50018">No DocBlock was found for property $expected_header</error>
      <error line="266" code="50018">No DocBlock was found for property $expected_value</error>
      <error line="268" code="50014">Name of argument $unwanted does not match with the DocBlock's name $message in __construct()</error>
      <error line="268" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="278" code="50015">Argument $compare is missing from the Docblock of test()</error>
      <error line="288" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <critical line="305" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="311" code="50018">No DocBlock was found for property $substring</error>
      <error line="313" code="50014">Name of argument $substring does not match with the DocBlock's name $message in __construct()</error>
      <error line="313" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="344" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <error line="362" code="50014">Name of argument $substring does not match with the DocBlock's name $subject in describeTextMatch()</error>
      <error line="362" code="50015">Argument $subject is missing from the Docblock of describeTextMatch()</error>
      <critical line="378" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="386" code="50014">Name of argument $substring does not match with the DocBlock's name $message in __construct()</error>
      <error line="386" code="50015">Argument $message is missing from the Docblock of __construct()</error>
      <error line="407" code="50015">Argument $compare is missing from the Docblock of testMessage()</error>
      <error line="434" code="50018">No DocBlock was found for property $browser</error>
      <error line="435" code="50018">No DocBlock was found for property $ignore_errors</error>
      <error line="448" code="50015">Argument $method is missing from the Docblock of before()</error>
      <error line="479" code="50015">Argument $browser is missing from the Docblock of setBrowser()</error>
      <error line="490" code="50015">Argument $parser is missing from the Docblock of setParser()</error>
      <error line="642" code="50015">Argument $header is missing from the Docblock of addHeader()</error>
      <error line="652" code="50015">Argument $max is missing from the Docblock of setMaximumRedirects()</error>
      <error line="666" code="50015">Argument $timeout is missing from the Docblock of setConnectionTimeout()</error>
      <error line="676" code="50015">Argument $username is missing from the Docblock of useProxy()</error>
      <error line="676" code="50015">Argument $password is missing from the Docblock of useProxy()</error>
      <error line="689" code="50015">Argument $parameters is missing from the Docblock of get()</error>
      <error line="703" code="50015">Argument $parameters is missing from the Docblock of post()</error>
      <error line="703" code="50015">Argument $content_type is missing from the Docblock of post()</error>
      <error line="718" code="50015">Argument $body is missing from the Docblock of put()</error>
      <error line="718" code="50015">Argument $content_type is missing from the Docblock of put()</error>
      <error line="733" code="50014">Name of argument $url does not match with the DocBlock's name $parameters in delete()</error>
      <error line="733" code="50015">Argument $parameters is missing from the Docblock of delete()</error>
      <error line="745" code="50015">Argument $parameters is missing from the Docblock of head()</error>
      <error line="789" code="50014">Name of argument $username does not match with the DocBlock's name $password in authenticate()</error>
      <error line="789" code="50015">Argument $password is missing from the Docblock of authenticate()</error>
      <error line="804" code="50015">Argument $name is missing from the Docblock of getCookie()</error>
      <error line="814" code="50014">Name of argument $name does not match with the DocBlock's name $value in setCookie()</error>
      <error line="814" code="50015">Argument $value is missing from the Docblock of setCookie()</error>
      <error line="814" code="50015">Argument $host is missing from the Docblock of setCookie()</error>
      <error line="814" code="50015">Argument $path is missing from the Docblock of setCookie()</error>
      <error line="814" code="50015">Argument $expiry is missing from the Docblock of setCookie()</error>
      <error line="849" code="50015">Argument $name is missing from the Docblock of setFrameFocus()</error>
      <error line="879" code="50015">Argument $label is missing from the Docblock of assertClickable()</error>
      <error line="879" code="50015">Argument $message is missing from the Docblock of assertClickable()</error>
      <error line="891" code="50015">Argument $additional is missing from the Docblock of clickSubmit()</error>
      <error line="905" code="50015">Argument $additional is missing from the Docblock of clickSubmitByName()</error>
      <error line="918" code="50015">Argument $additional is missing from the Docblock of clickSubmitById()</error>
      <error line="931" code="50015">Argument $label is missing from the Docblock of assertSubmit()</error>
      <error line="931" code="50015">Argument $message is missing from the Docblock of assertSubmit()</error>
      <error line="943" code="50015">Argument $x is missing from the Docblock of clickImage()</error>
      <error line="943" code="50015">Argument $y is missing from the Docblock of clickImage()</error>
      <error line="943" code="50015">Argument $additional is missing from the Docblock of clickImage()</error>
      <error line="961" code="50015">Argument $x is missing from the Docblock of clickImageByName()</error>
      <error line="961" code="50015">Argument $y is missing from the Docblock of clickImageByName()</error>
      <error line="961" code="50015">Argument $additional is missing from the Docblock of clickImageByName()</error>
      <error line="979" code="50015">Argument $x is missing from the Docblock of clickImageById()</error>
      <error line="979" code="50015">Argument $y is missing from the Docblock of clickImageById()</error>
      <error line="979" code="50015">Argument $additional is missing from the Docblock of clickImageById()</error>
      <error line="996" code="50015">Argument $label is missing from the Docblock of assertImage()</error>
      <error line="996" code="50015">Argument $message is missing from the Docblock of assertImage()</error>
      <error line="1008" code="50015">Argument $id is missing from the Docblock of submitFormById()</error>
      <error line="1008" code="50015">Argument $additional is missing from the Docblock of submitFormById()</error>
      <error line="1019" code="50015">Argument $index is missing from the Docblock of clickLink()</error>
      <error line="1033" code="50015">Argument $id is missing from the Docblock of clickLinkById()</error>
      <error line="1043" code="50015">Argument $expected is missing from the Docblock of assertLink()</error>
      <error line="1043" code="50015">Argument $message is missing from the Docblock of assertLink()</error>
      <error line="1064" code="50015">Argument $message is missing from the Docblock of assertNoLink()</error>
      <error line="1080" code="50014">Name of argument $id does not match with the DocBlock's name $expected in assertLinkById()</error>
      <error line="1080" code="50015">Argument $expected is missing from the Docblock of assertLinkById()</error>
      <error line="1080" code="50015">Argument $message is missing from the Docblock of assertLinkById()</error>
      <error line="1100" code="50015">Argument $message is missing from the Docblock of assertNoLinkById()</error>
      <error line="1115" code="50014">Name of argument $label does not match with the DocBlock's name $value in setField()</error>
      <error line="1115" code="50015">Argument $value is missing from the Docblock of setField()</error>
      <error line="1115" code="50015">Argument $position is missing from the Docblock of setField()</error>
      <error line="1127" code="50014">Name of argument $name does not match with the DocBlock's name $value in setFieldByName()</error>
      <error line="1127" code="50015">Argument $value is missing from the Docblock of setFieldByName()</error>
      <error line="1127" code="50015">Argument $position is missing from the Docblock of setFieldByName()</error>
      <error line="1138" code="50014">Name of argument $id does not match with the DocBlock's name $value in setFieldById()</error>
      <error line="1138" code="50015">Argument $value is missing from the Docblock of setFieldById()</error>
      <error line="1149" code="50014">Name of argument $label does not match with the DocBlock's name $name in assertField()</error>
      <error line="1149" code="50015">Argument $expected is missing from the Docblock of assertField()</error>
      <error line="1149" code="50015">Argument $message is missing from the Docblock of assertField()</error>
      <notice line="1149" code="50013">Parameter $name could not be found in assertField()</notice>
      <error line="1167" code="50015">Argument $expected is missing from the Docblock of assertFieldByName()</error>
      <error line="1167" code="50015">Argument $message is missing from the Docblock of assertFieldByName()</error>
      <error line="1185" code="50015">Argument $expected is missing from the Docblock of assertFieldById()</error>
      <error line="1185" code="50015">Argument $message is missing from the Docblock of assertFieldById()</error>
      <error line="1203" code="50014">Name of argument $identifier does not match with the DocBlock's name $value in assertFieldValue()</error>
      <error line="1203" code="50015">Argument $value is missing from the Docblock of assertFieldValue()</error>
      <error line="1203" code="50015">Argument $expected is missing from the Docblock of assertFieldValue()</error>
      <error line="1203" code="50015">Argument $message is missing from the Docblock of assertFieldValue()</error>
      <error line="1227" code="50014">Name of argument $responses does not match with the DocBlock's name $message in assertResponse()</error>
      <error line="1227" code="50015">Argument $message is missing from the Docblock of assertResponse()</error>
      <error line="1244" code="50014">Name of argument $types does not match with the DocBlock's name $message in assertMime()</error>
      <error line="1244" code="50015">Argument $message is missing from the Docblock of assertMime()</error>
      <error line="1260" code="50014">Name of argument $authentication does not match with the DocBlock's name $message in assertAuthentication()</error>
      <error line="1260" code="50015">Argument $message is missing from the Docblock of assertAuthentication()</error>
      <error line="1284" code="50015">Argument $message is missing from the Docblock of assertNoAuthentication()</error>
      <error line="1297" code="50014">Name of argument $realm does not match with the DocBlock's name $message in assertRealm()</error>
      <error line="1297" code="50015">Argument $message is missing from the Docblock of assertRealm()</error>
      <error line="1314" code="50015">Argument $value is missing from the Docblock of assertHeader()</error>
      <error line="1314" code="50015">Argument $message is missing from the Docblock of assertHeader()</error>
      <error line="1331" code="50015">Argument $message is missing from the Docblock of assertNoHeader()</error>
      <error line="1347" code="50014">Name of argument $title does not match with the DocBlock's name $message in assertTitle()</error>
      <error line="1347" code="50015">Argument $message is missing from the Docblock of assertTitle()</error>
      <error line="1361" code="50014">Name of argument $text does not match with the DocBlock's name $message in assertText()</error>
      <error line="1361" code="50015">Argument $message is missing from the Docblock of assertText()</error>
      <error line="1376" code="50014">Name of argument $text does not match with the DocBlock's name $message in assertNoText()</error>
      <error line="1376" code="50015">Argument $message is missing from the Docblock of assertNoText()</error>
      <error line="1391" code="50014">Name of argument $pattern does not match with the DocBlock's name $message in assertPattern()</error>
      <error line="1391" code="50015">Argument $message is missing from the Docblock of assertPattern()</error>
      <error line="1407" code="50014">Name of argument $pattern does not match with the DocBlock's name $message in assertNoPattern()</error>
      <error line="1407" code="50015">Argument $message is missing from the Docblock of assertNoPattern()</error>
      <error line="1423" code="50014">Name of argument $name does not match with the DocBlock's name $expected in assertCookie()</error>
      <error line="1423" code="50015">Argument $expected is missing from the Docblock of assertCookie()</error>
      <error line="1423" code="50015">Argument $message is missing from the Docblock of assertCookie()</error>
      <error line="1446" code="50014">Name of argument $name does not match with the DocBlock's name $message in assertNoCookie()</error>
      <error line="1446" code="50015">Argument $message is missing from the Docblock of assertNoCookie()</error>
      <error line="1460" code="50014">Name of argument $result does not match with the DocBlock's name $message in assertTrue()</error>
      <error line="1460" code="50015">Argument $message is missing from the Docblock of assertTrue()</error>
      <error line="1473" code="50015">Argument $message is missing from the Docblock of assertFalse()</error>
      <error line="1487" code="50015">Argument $second is missing from the Docblock of assertEqual()</error>
      <error line="1487" code="50015">Argument $message is missing from the Docblock of assertEqual()</error>
      <error line="1504" code="50015">Argument $second is missing from the Docblock of assertNotEqual()</error>
      <error line="1504" code="50015">Argument $message is missing from the Docblock of assertNotEqual()</error>
    </parse_markers>
  </file>
  <file path="test/simpletest/xml.php" hash="fa55636bd706e3828a0f9ad96c956be6" package="Default">
    <include line="12" type="Require Once" package="Default">
      <name/>
      <docblock line="2">
        <description>base include file for SimpleTest</description>
        <long-description>&lt;p&gt;@package    SimpleTest&lt;/p&gt;</long-description>
        <tag line="2" name="subpackage" description="UnitTester&#10; @version    $Id: xml.php 1787 2008-04-26 20:35:39Z pp11 $"/>
      </docblock>
    </include>
    <class final="false" abstract="false" namespace="global" line="21" package="Default">
      <extends>\SimpleReporter</extends>
      <name>XmlReporter</name>
      <full_name>\XmlReporter</full_name>
      <docblock line="15">
        <description>Creates the XML needed for remote communication
   by SimpleTest.</description>
        <long-description>&lt;p&gt;@package SimpleTest&lt;/p&gt;</long-description>
        <tag line="15" name="subpackage" description="UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="22" namespace="global" package="Default">
        <name>$indent</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="23" namespace="global" package="Default">
        <name>$namespace</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="31" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="25">
          <description>Sets up indentation and namespace.</description>
          <long-description>&lt;p&gt;@param string $namespace        Namespace to add to each tag.&lt;/p&gt;</long-description>
          <tag line="25" name="param" description="Indenting to add on each nesting. @access public" type="string" variable="$indent">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$namespace</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="31">
          <name>$indent</name>
          <default>'  '</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="44" package="Default">
        <name>getIndent</name>
        <full_name>getIndent</full_name>
        <docblock line="37">
          <description>Calculates the pretty printing indent level
   from the current level of nesting.</description>
          <long-description>&lt;p&gt;@param integer $offset  Extra indenting level.&lt;/p&gt;</long-description>
          <tag line="37" name="return" description="Leading space.&#10;   @access protected" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$offset</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="57" package="Default">
        <name>toParsedXml</name>
        <full_name>toParsedXml</full_name>
        <docblock line="50">
          <description>Converts character string to parsed XML
   entities string.</description>
          <long-description>&lt;p&gt;@param string text        Unparsed character data.&lt;/p&gt;</long-description>
          <tag line="50" name="return" description="Parsed character data.&#10;   @access public" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$text</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="70" package="Default">
        <name>paintGroupStart</name>
        <full_name>paintGroupStart</full_name>
        <docblock line="64">
          <description>Paints the start of a group test.</description>
          <long-description>&lt;p&gt;@param string $test_name   Name of test that is starting.&lt;/p&gt;</long-description>
          <tag line="64" name="param" description="Number of test cases starting. @access public" type="integer" variable="$size">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="70">
          <name>$size</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="Default">
        <name>paintGroupEnd</name>
        <full_name>paintGroupEnd</full_name>
        <docblock line="80">
          <description>Paints the end of a group test.</description>
          <long-description>&lt;p&gt;@param string $test_name   Name of test that is ending.&lt;/p&gt;</long-description>
          <tag line="80" name="access" description="public"/>
        </docblock>
        <argument line="85">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="96" package="Default">
        <name>paintCaseStart</name>
        <full_name>paintCaseStart</full_name>
        <docblock line="91">
          <description>Paints the start of a test case.</description>
          <long-description>&lt;p&gt;@param string $test_name   Name of test that is starting.&lt;/p&gt;</long-description>
          <tag line="91" name="access" description="public"/>
        </docblock>
        <argument line="96">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="111" package="Default">
        <name>paintCaseEnd</name>
        <full_name>paintCaseEnd</full_name>
        <docblock line="106">
          <description>Paints the end of a test case.</description>
          <long-description>&lt;p&gt;@param string $test_name   Name of test that is ending.&lt;/p&gt;</long-description>
          <tag line="106" name="access" description="public"/>
        </docblock>
        <argument line="111">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="122" package="Default">
        <name>paintMethodStart</name>
        <full_name>paintMethodStart</full_name>
        <docblock line="117">
          <description>Paints the start of a test method.</description>
          <long-description>&lt;p&gt;@param string $test_name   Name of test that is starting.&lt;/p&gt;</long-description>
          <tag line="117" name="access" description="public"/>
        </docblock>
        <argument line="122">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="138" package="Default">
        <name>paintMethodEnd</name>
        <full_name>paintMethodEnd</full_name>
        <docblock line="132">
          <description>Paints the end of a test method.</description>
          <long-description>&lt;p&gt;@param string $test_name   Name of test that is ending.&lt;/p&gt;</long-description>
          <tag line="132" name="param" description="Number of test cases ending. @access public" type="integer" variable="$progress">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$test_name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="149" package="Default">
        <name>paintPass</name>
        <full_name>paintPass</full_name>
        <docblock line="144">
          <description>Paints pass as XML.</description>
          <long-description>&lt;p&gt;@param string $message        Message to encode.&lt;/p&gt;</long-description>
          <tag line="144" name="access" description="public"/>
        </docblock>
        <argument line="149">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="162" package="Default">
        <name>paintFail</name>
        <full_name>paintFail</full_name>
        <docblock line="157">
          <description>Paints failure as XML.</description>
          <long-description>&lt;p&gt;@param string $message        Message to encode.&lt;/p&gt;</long-description>
          <tag line="157" name="access" description="public"/>
        </docblock>
        <argument line="162">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="175" package="Default">
        <name>paintError</name>
        <full_name>paintError</full_name>
        <docblock line="170">
          <description>Paints error as XML.</description>
          <long-description>&lt;p&gt;@param string $message        Message to encode.&lt;/p&gt;</long-description>
          <tag line="170" name="access" description="public"/>
        </docblock>
        <argument line="175">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="188" package="Default">
        <name>paintException</name>
        <full_name>paintException</full_name>
        <docblock line="183">
          <description>Paints exception as XML.</description>
          <long-description>&lt;p&gt;@param Exception $exception    Exception to encode.&lt;/p&gt;</long-description>
          <tag line="183" name="access" description="public"/>
        </docblock>
        <argument line="188">
          <name>$exception</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="205" package="Default">
        <name>paintSkip</name>
        <full_name>paintSkip</full_name>
        <docblock line="200">
          <description>Paints the skipping message and tag.</description>
          <long-description>&lt;p&gt;@param string $message        Text to display in skip tag.&lt;/p&gt;</long-description>
          <tag line="200" name="access" description="public"/>
        </docblock>
        <argument line="205">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="218" package="Default">
        <name>paintMessage</name>
        <full_name>paintMessage</full_name>
        <docblock line="213">
          <description>Paints a simple supplementary message.</description>
          <long-description>&lt;p&gt;@param string $message        Text to display.&lt;/p&gt;</long-description>
          <tag line="213" name="access" description="public"/>
        </docblock>
        <argument line="218">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="232" package="Default">
        <name>paintFormattedMessage</name>
        <full_name>paintFormattedMessage</full_name>
        <docblock line="226">
          <description>Paints a formatted ASCII message such as a
   privateiable dump.</description>
          <long-description>&lt;p&gt;@param string $message        Text to display.&lt;/p&gt;</long-description>
          <tag line="226" name="access" description="public"/>
        </docblock>
        <argument line="232">
          <name>$message</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="246" package="Default">
        <name>paintSignal</name>
        <full_name>paintSignal</full_name>
        <docblock line="240">
          <description>Serialises the event object.</description>
          <long-description>&lt;p&gt;@param string $type        Event type as text.&lt;/p&gt;</long-description>
          <tag line="240" name="param" description="Message or object. @access public" type="mixed" variable="$payload">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="246">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="246">
          <name>$payload</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="292" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends/>
      <name>NestingXmlTag</name>
      <full_name>\NestingXmlTag</full_name>
      <docblock line="285">
        <description>Accumulator for incoming tag.</description>
        <long-description>&lt;p&gt;Holds the
   incoming test structure information for
   later dispatch to the reporter.&lt;/p&gt;</long-description>
        <tag line="285" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="293" namespace="global" package="Default">
        <name>$name</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="294" namespace="global" package="Default">
        <name>$attributes</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="302" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>NestingXmlTag</name>
        <full_name>NestingXmlTag</full_name>
        <docblock line="296">
          <description>Sets the basic test information except
   the name.</description>
          <long-description>&lt;p&gt;@param hash $attributes   Name value pairs.&lt;/p&gt;</long-description>
          <tag line="296" name="access" description="public"/>
        </docblock>
        <argument line="302">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="312" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>setName</name>
        <full_name>setName</full_name>
        <docblock line="307">
          <description>Sets the test case/method name.</description>
          <long-description>&lt;p&gt;@param string $name        Name of test.&lt;/p&gt;</long-description>
          <tag line="307" name="access" description="public"/>
        </docblock>
        <argument line="312">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="321" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getName</name>
        <full_name>getName</full_name>
        <docblock line="316">
          <description>Accessor for name.</description>
          <long-description>&lt;p&gt;@return string        Name of test.&lt;/p&gt;</long-description>
          <tag line="316" name="access" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="330" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getAttributes</name>
        <full_name>getAttributes</full_name>
        <docblock line="325">
          <description>Accessor for attributes.</description>
          <long-description>&lt;p&gt;@return hash        All attributes.&lt;/p&gt;</long-description>
          <tag line="325" name="access" description="protected"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="342" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends>\NestingXmlTag</extends>
      <name>NestingMethodTag</name>
      <full_name>\NestingMethodTag</full_name>
      <docblock line="335">
        <description>Accumulator for incoming method tag.</description>
        <long-description>&lt;p&gt;Holds the
   incoming test structure information for
   later dispatch to the reporter.&lt;/p&gt;</long-description>
        <tag line="335" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="350" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>NestingMethodTag</name>
        <full_name>NestingMethodTag</full_name>
        <docblock line="344">
          <description>Sets the basic test information except
   the name.</description>
          <long-description>&lt;p&gt;@param hash $attributes   Name value pairs.&lt;/p&gt;</long-description>
          <tag line="344" name="access" description="public"/>
        </docblock>
        <argument line="350">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="360" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintStart</name>
        <full_name>paintStart</full_name>
        <docblock line="354">
          <description>Signals the appropriate start event on the
   listener.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $listener    Target for events.&lt;/p&gt;</long-description>
          <tag line="354" name="access" description="public"/>
        </docblock>
        <argument line="360">
          <name>$listener</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="370" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintEnd</name>
        <full_name>paintEnd</full_name>
        <docblock line="364">
          <description>Signals the appropriate end event on the
   listener.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $listener    Target for events.&lt;/p&gt;</long-description>
          <tag line="364" name="access" description="public"/>
        </docblock>
        <argument line="370">
          <name>$listener</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="382" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends>\NestingXmlTag</extends>
      <name>NestingCaseTag</name>
      <full_name>\NestingCaseTag</full_name>
      <docblock line="375">
        <description>Accumulator for incoming case tag.</description>
        <long-description>&lt;p&gt;Holds the
   incoming test structure information for
   later dispatch to the reporter.&lt;/p&gt;</long-description>
        <tag line="375" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="390" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>NestingCaseTag</name>
        <full_name>NestingCaseTag</full_name>
        <docblock line="384">
          <description>Sets the basic test information except
   the name.</description>
          <long-description>&lt;p&gt;@param hash $attributes   Name value pairs.&lt;/p&gt;</long-description>
          <tag line="384" name="access" description="public"/>
        </docblock>
        <argument line="390">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="400" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintStart</name>
        <full_name>paintStart</full_name>
        <docblock line="394">
          <description>Signals the appropriate start event on the
   listener.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $listener    Target for events.&lt;/p&gt;</long-description>
          <tag line="394" name="access" description="public"/>
        </docblock>
        <argument line="400">
          <name>$listener</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="410" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintEnd</name>
        <full_name>paintEnd</full_name>
        <docblock line="404">
          <description>Signals the appropriate end event on the
   listener.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $listener    Target for events.&lt;/p&gt;</long-description>
          <tag line="404" name="access" description="public"/>
        </docblock>
        <argument line="410">
          <name>$listener</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="422" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends>\NestingXmlTag</extends>
      <name>NestingGroupTag</name>
      <full_name>\NestingGroupTag</full_name>
      <docblock line="415">
        <description>Accumulator for incoming group tag.</description>
        <long-description>&lt;p&gt;Holds the
   incoming test structure information for
   later dispatch to the reporter.&lt;/p&gt;</long-description>
        <tag line="415" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="430" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>NestingGroupTag</name>
        <full_name>NestingGroupTag</full_name>
        <docblock line="424">
          <description>Sets the basic test information except
   the name.</description>
          <long-description>&lt;p&gt;@param hash $attributes   Name value pairs.&lt;/p&gt;</long-description>
          <tag line="424" name="access" description="public"/>
        </docblock>
        <argument line="430">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="440" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintStart</name>
        <full_name>paintStart</full_name>
        <docblock line="434">
          <description>Signals the appropriate start event on the
   listener.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $listener    Target for events.&lt;/p&gt;</long-description>
          <tag line="434" name="access" description="public"/>
        </docblock>
        <argument line="440">
          <name>$listener</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="450" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>paintEnd</name>
        <full_name>paintEnd</full_name>
        <docblock line="444">
          <description>Signals the appropriate end event on the
   listener.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $listener    Target for events.&lt;/p&gt;</long-description>
          <tag line="444" name="access" description="public"/>
        </docblock>
        <argument line="450">
          <name>$listener</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="459" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getSize</name>
        <full_name>getSize</full_name>
        <docblock line="454">
          <description>The size in the attributes.</description>
          <long-description>&lt;p&gt;@return integer     Value of size attribute or zero.&lt;/p&gt;</long-description>
          <tag line="454" name="access" description="public"/>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="474" package="SimpleTest&#10;   @subpackage UnitTester">
      <extends/>
      <name>SimpleTestXmlParser</name>
      <full_name>\SimpleTestXmlParser</full_name>
      <docblock line="468">
        <description>Parser for importing the output of the XmlReporter.</description>
        <long-description>&lt;p&gt;Dispatches that output to another reporter.&lt;/p&gt;</long-description>
        <tag line="468" name="package" description="SimpleTest&#10;   @subpackage UnitTester"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="475" namespace="global" package="Default">
        <name>$listener</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="476" namespace="global" package="Default">
        <name>$expat</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="477" namespace="global" package="Default">
        <name>$tag_stack</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="478" namespace="global" package="Default">
        <name>$in_content_tag</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="479" namespace="global" package="Default">
        <name>$content</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="480" namespace="global" package="Default">
        <name>$attributes</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="488" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>SimpleTestXmlParser</name>
        <full_name>SimpleTestXmlParser</full_name>
        <docblock line="482">
          <description>Loads a listener with the SimpleReporter
   interface.</description>
          <long-description>&lt;p&gt;@param SimpleReporter $listener   Listener of tag events.&lt;/p&gt;</long-description>
          <tag line="482" name="access" description="public"/>
        </docblock>
        <argument line="488">
          <name>$listener</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="504" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>parse</name>
        <full_name>parse</full_name>
        <docblock line="497">
          <description>Parses a block of XML sending the results to
   the listener.</description>
          <long-description>&lt;p&gt;@param string $chunk        Block of text to read.&lt;/p&gt;</long-description>
          <tag line="497" name="return" description="True if valid XML.&#10;   @access public" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="504">
          <name>$chunk</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="518" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>createParser</name>
        <full_name>createParser</full_name>
        <docblock line="513">
          <description>Sets up expat as the XML parser.</description>
          <long-description>&lt;p&gt;@return resource        Expat handle.&lt;/p&gt;</long-description>
          <tag line="513" name="access" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="533" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>pushNestingTag</name>
        <full_name>pushNestingTag</full_name>
        <docblock line="527">
          <description>Opens a new test nesting level.</description>
          <long-description>&lt;p&gt;@return NestedXmlTag     The group, case or method tag
                            to start.&lt;/p&gt;</long-description>
          <tag line="527" name="access" description="private"/>
        </docblock>
        <argument line="533">
          <name>$nested</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="543" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>getCurrentNestingTag</name>
        <full_name>getCurrentNestingTag</full_name>
        <docblock line="537">
          <description>Accessor for current test structure tag.</description>
          <long-description>&lt;p&gt;@return NestedXmlTag     The group, case or method tag
                            being parsed.&lt;/p&gt;</long-description>
          <tag line="537" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="553" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>popNestingTag</name>
        <full_name>popNestingTag</full_name>
        <docblock line="547">
          <description>Ends a nesting tag.</description>
          <long-description>&lt;p&gt;@return NestedXmlTag     The group, case or method tag
                            just finished.&lt;/p&gt;</long-description>
          <tag line="547" name="access" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="563" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>isLeaf</name>
        <full_name>isLeaf</full_name>
        <docblock line="557">
          <description>Test if tag is a leaf node with only text content.</description>
          <long-description>&lt;p&gt;@param string $tag        XML tag name.&lt;/p&gt;</long-description>
          <tag line="557" name="return" description="True if leaf, false if nesting.&#10;   @private" type="\@boolean">
            <type by_reference="false">\@boolean</type>
          </tag>
        </docblock>
        <argument line="563">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="577" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>startElement</name>
        <full_name>startElement</full_name>
        <docblock line="568">
          <description>Handler for start of event element.</description>
          <long-description>&lt;p&gt;@param resource $expat     Parser handle.&lt;/p&gt;</long-description>
          <tag line="568" name="param" description="Element name. @param hash $attributes Name value pairs. Attributes without content are marked as true. @access protected" type="string" variable="$tag">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="577">
          <name>$expat</name>
          <default></default>
          <type/>
        </argument>
        <argument line="577">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
        <argument line="577">
          <name>$attributes</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="597" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>endElement</name>
        <full_name>endElement</full_name>
        <docblock line="591">
          <description>End of element event.</description>
          <long-description>&lt;p&gt;@param resource $expat     Parser handle.&lt;/p&gt;</long-description>
          <tag line="591" name="param" description="Element name. @access protected" type="string" variable="$tag">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="597">
          <name>$expat</name>
          <default></default>
          <type/>
        </argument>
        <argument line="597">
          <name>$tag</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="631" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>addContent</name>
        <full_name>addContent</full_name>
        <docblock line="625">
          <description>Content between start and end elements.</description>
          <long-description>&lt;p&gt;@param resource $expat     Parser handle.&lt;/p&gt;</long-description>
          <tag line="625" name="param" description="Usually output messages. @access protected" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="631">
          <name>$expat</name>
          <default></default>
          <type/>
        </argument>
        <argument line="631">
          <name>$text</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="644" package="SimpleTest&#10;   @subpackage UnitTester">
        <name>defaultContent</name>
        <full_name>defaultContent</full_name>
        <docblock line="638">
          <description>XML and Doctype handler.</description>
          <long-description>&lt;p&gt;Discards all such content.&lt;/p&gt;</long-description>
          <tag line="638" name="param" description="Parser handle. @param string $default Text of default content. @access protected" type="resource" variable="$expat">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
        <argument line="644">
          <name>$expat</name>
          <default></default>
          <type/>
        </argument>
        <argument line="644">
          <name>$default</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/simpletest/xml.php</error>
      <critical line="15" code="50004">Cannot have a @subpackage when a @package tag is not present</critical>
      <error line="22" code="50018">No DocBlock was found for property $indent</error>
      <error line="23" code="50018">No DocBlock was found for property $namespace</error>
      <error line="25" code="50014">Name of argument $namespace does not match with the DocBlock's name $indent in __construct()</error>
      <error line="25" code="50015">Argument $indent is missing from the Docblock of __construct()</error>
      <error line="37" code="50015">Argument $offset is missing from the Docblock of getIndent()</error>
      <error line="50" code="50015">Argument $text is missing from the Docblock of toParsedXml()</error>
      <error line="64" code="50014">Name of argument $test_name does not match with the DocBlock's name $size in paintGroupStart()</error>
      <error line="64" code="50015">Argument $size is missing from the Docblock of paintGroupStart()</error>
      <error line="80" code="50015">Argument $test_name is missing from the Docblock of paintGroupEnd()</error>
      <error line="91" code="50015">Argument $test_name is missing from the Docblock of paintCaseStart()</error>
      <error line="106" code="50015">Argument $test_name is missing from the Docblock of paintCaseEnd()</error>
      <error line="117" code="50015">Argument $test_name is missing from the Docblock of paintMethodStart()</error>
      <error line="132" code="50014">Name of argument $test_name does not match with the DocBlock's name $progress in paintMethodEnd()</error>
      <notice line="132" code="50013">Parameter $progress could not be found in paintMethodEnd()</notice>
      <error line="144" code="50015">Argument $message is missing from the Docblock of paintPass()</error>
      <error line="157" code="50015">Argument $message is missing from the Docblock of paintFail()</error>
      <error line="170" code="50015">Argument $message is missing from the Docblock of paintError()</error>
      <error line="183" code="50015">Argument $exception is missing from the Docblock of paintException()</error>
      <error line="200" code="50015">Argument $message is missing from the Docblock of paintSkip()</error>
      <error line="213" code="50015">Argument $message is missing from the Docblock of paintMessage()</error>
      <error line="226" code="50015">Argument $message is missing from the Docblock of paintFormattedMessage()</error>
      <error line="240" code="50014">Name of argument $type does not match with the DocBlock's name $payload in paintSignal()</error>
      <error line="240" code="50015">Argument $payload is missing from the Docblock of paintSignal()</error>
      <error line="254" code="50015">Argument $test_name is missing from the Docblock of paintHeader()</error>
      <error line="274" code="50015">Argument $test_name is missing from the Docblock of paintFooter()</error>
      <error line="293" code="50018">No DocBlock was found for property $name</error>
      <error line="294" code="50018">No DocBlock was found for property $attributes</error>
      <error line="296" code="50015">Argument $attributes is missing from the Docblock of NestingXmlTag()</error>
      <error line="307" code="50015">Argument $name is missing from the Docblock of setName()</error>
      <error line="344" code="50015">Argument $attributes is missing from the Docblock of NestingMethodTag()</error>
      <error line="354" code="50015">Argument $listener is missing from the Docblock of paintStart()</error>
      <error line="364" code="50015">Argument $listener is missing from the Docblock of paintEnd()</error>
      <error line="384" code="50015">Argument $attributes is missing from the Docblock of NestingCaseTag()</error>
      <error line="394" code="50015">Argument $listener is missing from the Docblock of paintStart()</error>
      <error line="404" code="50015">Argument $listener is missing from the Docblock of paintEnd()</error>
      <error line="424" code="50015">Argument $attributes is missing from the Docblock of NestingGroupTag()</error>
      <error line="434" code="50015">Argument $listener is missing from the Docblock of paintStart()</error>
      <error line="444" code="50015">Argument $listener is missing from the Docblock of paintEnd()</error>
      <error line="475" code="50018">No DocBlock was found for property $listener</error>
      <error line="476" code="50018">No DocBlock was found for property $expat</error>
      <error line="477" code="50018">No DocBlock was found for property $tag_stack</error>
      <error line="478" code="50018">No DocBlock was found for property $in_content_tag</error>
      <error line="479" code="50018">No DocBlock was found for property $content</error>
      <error line="480" code="50018">No DocBlock was found for property $attributes</error>
      <error line="482" code="50015">Argument $listener is missing from the Docblock of SimpleTestXmlParser()</error>
      <error line="497" code="50015">Argument $chunk is missing from the Docblock of parse()</error>
      <error line="527" code="50015">Argument $nested is missing from the Docblock of pushNestingTag()</error>
      <error line="557" code="50015">Argument $tag is missing from the Docblock of isLeaf()</error>
      <error line="568" code="50014">Name of argument $expat does not match with the DocBlock's name $tag in startElement()</error>
      <error line="568" code="50015">Argument $tag is missing from the Docblock of startElement()</error>
      <error line="568" code="50015">Argument $attributes is missing from the Docblock of startElement()</error>
      <error line="591" code="50014">Name of argument $expat does not match with the DocBlock's name $tag in endElement()</error>
      <error line="591" code="50015">Argument $tag is missing from the Docblock of endElement()</error>
      <error line="625" code="50014">Name of argument $expat does not match with the DocBlock's name $text in addContent()</error>
      <error line="625" code="50015">Argument $text is missing from the Docblock of addContent()</error>
      <error line="638" code="50015">Argument $default is missing from the Docblock of defaultContent()</error>
    </parse_markers>
  </file>
  <file path="test/unit_tests.php" hash="a1b6ed6b8adc32d349df455739bfe004" package="Default">
    <include line="3" type="Require Once" package="Default">
      <name>simpletest/autorun.php</name>
    </include>
    <include line="4" type="Require Once" package="Default">
      <name>../Freerider.php</name>
    </include>
    <include line="5" type="Require Once" package="Default">
      <name>../FreeriderAPI.php</name>
    </include>
    <class final="false" abstract="false" namespace="global" line="7" package="Default">
      <extends>\UnitTestCase</extends>
      <name>FreeriderAPITests</name>
      <full_name>\FreeriderAPITests</full_name>
      <property final="false" static="false" visibility="private" line="10" namespace="global" package="Default">
        <name>$freerider</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="private" line="11" namespace="global" package="Default">
        <name>$freeriderAPI</name>
        <default>null</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="13" package="Default">
        <name>setUp</name>
        <full_name>setUp</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Default">
        <name>tearDown</name>
        <full_name>tearDown</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="33" package="Default">
        <name>testFreeriderObject</name>
        <full_name>testFreeriderObject</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="46" package="Default">
        <name>testScrape</name>
        <full_name>testScrape</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Default">
        <name>testGetAll</name>
        <full_name>testGetAll</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Default">
        <name>testGetDestination</name>
        <full_name>testGetDestination</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="97" package="Default">
        <name>testGetOrigin</name>
        <full_name>testGetOrigin</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="115" package="Default">
        <name>tesGetOriginIncorrectSearch</name>
        <full_name>tesGetOriginIncorrectSearch</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file test/unit_tests.php</error>
      <error line="7" code="50000">No DocBlock was found for \FreeriderAPITests</error>
      <error line="10" code="50018">No DocBlock was found for property $freerider</error>
      <error line="11" code="50018">No DocBlock was found for property $freeriderAPI</error>
      <error line="13" code="50010">No DocBlock was found for method setUp()</error>
      <error line="24" code="50010">No DocBlock was found for method tearDown()</error>
      <error line="33" code="50010">No DocBlock was found for method testFreeriderObject()</error>
      <error line="46" code="50010">No DocBlock was found for method testScrape()</error>
      <error line="58" code="50010">No DocBlock was found for method testGetAll()</error>
      <error line="76" code="50010">No DocBlock was found for method testGetDestination()</error>
      <error line="97" code="50010">No DocBlock was found for method testGetOrigin()</error>
      <error line="115" code="50010">No DocBlock was found for method tesGetOriginIncorrectSearch()</error>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="PlaceLocalInclude" full_name="PlaceLocalInclude">
    <package name="simple" full_name="PlaceLocalInclude\simple">
      <package name="html" full_name="PlaceLocalInclude\simple\html">
        <package name="dom" full_name="PlaceLocalInclude\simple\html\dom"/>
      </package>
    </package>
  </package>
  <package name="SimpleTest" full_name="SimpleTest">
    <package name="Extensions" full_name="SimpleTest\Extensions"/>
    <package name="Extensions&#10; @author Rene vd O (original code)&#10; @author Perrick Penet&#10; @author Marcus Baker" full_name="SimpleTest\Extensions&#10; @author Rene vd O (original code)&#10; @author Perrick Penet&#10; @author Marcus Baker"/>
    <package name="UnitTester" full_name="SimpleTest\UnitTester"/>
  </package>
  <package name="SimpleTest&#10;     @subpackage UnitTester" full_name="SimpleTest&#10;     @subpackage UnitTester"/>
  <package name="SimpleTest&#10;   @subpackage   UnitTester" full_name="SimpleTest&#10;   @subpackage   UnitTester"/>
  <package name="SimpleTest&#10;   @subpackage MockObjects" full_name="SimpleTest&#10;   @subpackage MockObjects"/>
  <package name="SimpleTest&#10;   @subpackage UnitTester" full_name="SimpleTest&#10;   @subpackage UnitTester"/>
  <package name="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract" full_name="SimpleTest&#10;   @subpackage UnitTester&#10;   @abstract"/>
  <package name="SimpleTest&#10;   @subpackage WebTester" full_name="SimpleTest&#10;   @subpackage WebTester"/>
  <package name="SimpleTest&#10; @subpackage Eclipse" full_name="SimpleTest&#10; @subpackage Eclipse"/>
  <namespace name="global" full_name="global"/>
  <marker count="3">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="7"/>
</project>
